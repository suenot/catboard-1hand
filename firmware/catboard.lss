
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800232  00800232  00001120  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e5  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000021  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000000be  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000010aa  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000053c  00000000  00000000  00002d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b31  00000000  00000000  0000324e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001c0  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005fd  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001102  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000007e  00000000  00000000  0000563f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  000056bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	bd c5       	rjmp	.+2938   	; 0xba8 <__vector_11>
  2e:	00 00       	nop
  30:	1a c6       	rjmp	.+3124   	; 0xc66 <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	12 e0       	ldi	r17, 0x02	; 2
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ea e5       	ldi	r30, 0x5A	; 90
 15a:	ff e0       	ldi	r31, 0x0F	; 15
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 33       	cpi	r26, 0x32	; 50
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a2 e3       	ldi	r26, 0x32	; 50
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a6 38       	cpi	r26, 0x86	; 134
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	9d d4       	rcall	.+2362   	; 0xab4 <main>
 17a:	ed c6       	rjmp	.+3546   	; 0xf56 <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <init_ports>:

#define FN_KEY_ID			7*5+4

// Init ports
void init_ports(void) {
	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
 17e:	8a e4       	ldi	r24, 0x4A	; 74
 180:	84 b9       	out	0x04, r24	; 4
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	87 b9       	out	0x07, r24	; 7
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	88 b9       	out	0x08, r24	; 8
 190:	8b b9       	out	0x0b, r24	; 11
 192:	08 95       	ret

00000194 <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	80 93 61 00 	sts	0x0061, r24
 19a:	10 92 61 00 	sts	0x0061, r1

	init_ports();
 19e:	ef df       	rcall	.-34     	; 0x17e <init_ports>
 1a0:	56 9a       	sbi	0x0a, 6	; 10

	LED_CONFIG;
 1a2:	3e 9a       	sbi	0x07, 6	; 7
	LED_RED_CONFIG;
 1a4:	51 9a       	sbi	0x0a, 1	; 10
	LED_BLUE_CONFIG;
 1a6:	46 9a       	sbi	0x08, 6	; 8

	LED_RED_OFF;
 1a8:	59 98       	cbi	0x0b, 1	; 11
	LED_BLUE_OFF;
 1aa:	80 91 01 01 	lds	r24, 0x0101
	if (led) LED_ON;
 1ae:	81 11       	cpse	r24, r1
 1b0:	5e 98       	cbi	0x0b, 6	; 11
 1b2:	ea e4       	ldi	r30, 0x4A	; 74
 1b4:	f2 e0       	ldi	r31, 0x02	; 2
 1b6:	11 92       	st	Z+, r1

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1b8:	82 e0       	ldi	r24, 0x02	; 2

	LED_RED_OFF;
	LED_BLUE_OFF;
	if (led) LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
 1ba:	e6 38       	cpi	r30, 0x86	; 134
 1bc:	f8 07       	cpc	r31, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <init+0x22>
 1c0:	95 d4       	rcall	.+2346   	; 0xaec <usb_init>
		pressed[i] = 0;
	}

	usb_init();
 1c2:	a8 d4       	rcall	.+2384   	; 0xb14 <usb_configured>
 1c4:	88 23       	and	r24, r24
	while(!usb_configured());
 1c6:	e9 f3       	breq	.-6      	; 0x1c2 <init+0x2e>
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
 1ca:	80 91 01 01 	lds	r24, 0x0101
	LED_OFF;
 1ce:	81 11       	cpse	r24, r1
	if (led) LED_RED_ON;
 1d0:	46 98       	cbi	0x08, 6	; 8
 1d2:	80 91 46 02 	lds	r24, 0x0246
 1d6:	80 93 3e 02 	sts	0x023E, r24
	caps_lock_led = keyboard_leds;
 1da:	08 95       	ret

000001dc <caps_lock_change_layer>:
 1dc:	20 91 46 02 	lds	r18, 0x0246
 1e0:	22 70       	andi	r18, 0x02	; 2
	repeat_tick();
	_delay_ms(5);
}

void caps_lock_change_layer() {
	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
 1e2:	20 93 3e 02 	sts	0x023E, r18
 1e6:	80 91 0a 01 	lds	r24, 0x010A
 1ea:	90 91 0b 01 	lds	r25, 0x010B
	if ((caps_lock_led) && (layout != layer1)) {
 1ee:	22 23       	and	r18, r18
 1f0:	d9 f0       	breq	.+54     	; 0x228 <caps_lock_change_layer+0x4c>
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	87 38       	cpi	r24, 0x87	; 135
 1f6:	92 07       	cpc	r25, r18
 1f8:	81 f1       	breq	.+96     	; 0x25a <caps_lock_change_layer+0x7e>
		if (layout==layer_fn) {
 1fa:	8b 54       	subi	r24, 0x4B	; 75
 1fc:	91 40       	sbci	r25, 0x01	; 1
 1fe:	39 f4       	brne	.+14     	; 0x20e <caps_lock_change_layer+0x32>
			prev_layer = layer1;
 200:	87 e8       	ldi	r24, 0x87	; 135
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 3c 02 	sts	0x023C, r25
 208:	80 93 3b 02 	sts	0x023B, r24
 20c:	06 c0       	rjmp	.+12     	; 0x21a <caps_lock_change_layer+0x3e>
		} else {
			layout = layer1;
 20e:	87 e8       	ldi	r24, 0x87	; 135
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	90 93 0b 01 	sts	0x010B, r25
 216:	80 93 0a 01 	sts	0x010A, r24
		}
		LED_RED_OFF;
 21a:	46 9a       	sbi	0x08, 6	; 8
		if (led) LED_BLUE_ON;
 21c:	80 91 01 01 	lds	r24, 0x0101
 220:	88 23       	and	r24, r24
 222:	d9 f0       	breq	.+54     	; 0x25a <caps_lock_change_layer+0x7e>
 224:	59 9a       	sbi	0x0b, 1	; 11
 226:	08 95       	ret
	} else if ((! caps_lock_led) && (layout != layer2)) {
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	86 3f       	cpi	r24, 0xF6	; 246
 22c:	92 07       	cpc	r25, r18
 22e:	a9 f0       	breq	.+42     	; 0x25a <caps_lock_change_layer+0x7e>
		if (layout==layer_fn) {
 230:	8b 54       	subi	r24, 0x4B	; 75
 232:	91 40       	sbci	r25, 0x01	; 1
 234:	39 f4       	brne	.+14     	; 0x244 <caps_lock_change_layer+0x68>
			prev_layer = layer2;
 236:	86 ef       	ldi	r24, 0xF6	; 246
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 3c 02 	sts	0x023C, r25
 23e:	80 93 3b 02 	sts	0x023B, r24
 242:	06 c0       	rjmp	.+12     	; 0x250 <caps_lock_change_layer+0x74>
		} else {
			layout = layer2;
 244:	86 ef       	ldi	r24, 0xF6	; 246
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	90 93 0b 01 	sts	0x010B, r25
 24c:	80 93 0a 01 	sts	0x010A, r24
		}
		LED_BLUE_OFF;
 250:	59 98       	cbi	0x0b, 1	; 11
		if (led) LED_RED_ON;
 252:	80 91 01 01 	lds	r24, 0x0101
 256:	81 11       	cpse	r24, r1
 258:	46 98       	cbi	0x08, 6	; 8
 25a:	08 95       	ret

0000025c <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
 25c:	80 91 0c 01 	lds	r24, 0x010C
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	91 f4       	brne	.+36     	; 0x288 <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	80 93 3f 02 	sts	0x023F, r24
		keyboard_keys[0] = 0;
 26a:	10 92 40 02 	sts	0x0240, r1
		usb_keyboard_send();
 26e:	55 d4       	rcall	.+2218   	; 0xb1a <usb_keyboard_send>
 270:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	80 e7       	ldi	r24, 0x70	; 112
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <change_layout+0x1a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <change_layout+0x24>
 280:	00 00       	nop
 282:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 284:	8c e2       	ldi	r24, 0x2C	; 44
 286:	11 c0       	rjmp	.+34     	; 0x2aa <change_layout+0x4e>
 288:	84 e0       	ldi	r24, 0x04	; 4
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 28a:	80 93 3f 02 	sts	0x023F, r24
 28e:	10 92 40 02 	sts	0x0240, r1
		keyboard_keys[0] = 0;
 292:	43 d4       	rcall	.+2182   	; 0xb1a <usb_keyboard_send>
		usb_keyboard_send();
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <change_layout+0x3e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <change_layout+0x48>
 2a4:	00 00       	nop
 2a6:	66 e0       	ldi	r22, 0x06	; 6
 2a8:	80 e0       	ldi	r24, 0x00	; 0
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 2aa:	71 c4       	rjmp	.+2274   	; 0xb8e <usb_keyboard_press>

000002ac <get_code>:
 2ac:	8c 33       	cpi	r24, 0x3C	; 60
 2ae:	08 f5       	brcc	.+66     	; 0x2f2 <get_code+0x46>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 2b2:	fc 01       	movw	r30, r24
 2b4:	e6 5b       	subi	r30, 0xB6	; 182
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	40 81       	ld	r20, Z
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	39 f4       	brne	.+14     	; 0x2cc <get_code+0x20>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 2be:	fc 01       	movw	r30, r24
 2c0:	e5 5b       	subi	r30, 0xB5	; 181
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	80 81       	ld	r24, Z
 2c6:	18 16       	cp	r1, r24
 2c8:	ac f0       	brlt	.+42     	; 0x2f4 <get_code+0x48>
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <get_code+0x46>
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 2cc:	20 91 0a 01 	lds	r18, 0x010A
 2d0:	30 91 0b 01 	lds	r19, 0x010B
 2d4:	51 e0       	ldi	r21, 0x01	; 1
 2d6:	2b 34       	cpi	r18, 0x4B	; 75
 2d8:	35 07       	cpc	r19, r21
 2da:	31 f0       	breq	.+12     	; 0x2e8 <get_code+0x3c>
 2dc:	42 30       	cpi	r20, 0x02	; 2
 2de:	21 f4       	brne	.+8      	; 0x2e8 <get_code+0x3c>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 2e0:	fc 01       	movw	r30, r24
 2e2:	e9 57       	subi	r30, 0x79	; 121
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <get_code+0x42>
		} else {
			key_code = layout[key_id];
 2e8:	f9 01       	movw	r30, r18
 2ea:	e8 0f       	add	r30, r24
 2ec:	f9 1f       	adc	r31, r25
 2ee:	80 81       	ld	r24, Z
 2f0:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 2f4:	08 95       	ret

000002f6 <repeat_tick>:
		if (led) LED_RED_ON;
	}
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
 2f6:	80 91 32 02 	lds	r24, 0x0232
 2fa:	90 91 33 02 	lds	r25, 0x0233
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	39 f1       	breq	.+78     	; 0x350 <__stack+0x51>
		if (repeat_time<(release_time>>2)) {
 302:	20 91 34 02 	lds	r18, 0x0234
 306:	30 91 35 02 	lds	r19, 0x0235
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	82 17       	cp	r24, r18
 314:	93 07       	cpc	r25, r19
 316:	10 f4       	brcc	.+4      	; 0x31c <__stack+0x1d>
			repeat_time++;
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	3c c0       	rjmp	.+120    	; 0x394 <__stack+0x95>
		} else { // repeat press
			repeat_time = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 33 02 	sts	0x0233, r25
 324:	80 93 32 02 	sts	0x0232, r24
			if (turbo_repeat) {
 328:	80 91 02 01 	lds	r24, 0x0102
 32c:	88 23       	and	r24, r24
 32e:	09 f4       	brne	.+2      	; 0x332 <__stack+0x33>
 330:	67 c0       	rjmp	.+206    	; 0x400 <__stack+0x101>
				keyboard_modifier_keys = mod_keys;
 332:	80 91 3d 02 	lds	r24, 0x023D
 336:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = get_code(last_key);
 33a:	80 91 00 01 	lds	r24, 0x0100
 33e:	b6 df       	rcall	.-148    	; 0x2ac <get_code>
 340:	80 93 40 02 	sts	0x0240, r24
 344:	ea d3       	rcall	.+2004   	; 0xb1a <usb_keyboard_send>
				if (! usb_keyboard_send()) { // repeat release
 346:	81 11       	cpse	r24, r1
 348:	5b c0       	rjmp	.+182    	; 0x400 <__stack+0x101>
 34a:	10 92 40 02 	sts	0x0240, r1
					keyboard_keys[0] = 0;
 34e:	e5 c3       	rjmp	.+1994   	; 0xb1a <usb_keyboard_send>
 350:	20 91 36 02 	lds	r18, 0x0236
					usb_keyboard_send();
 354:	30 91 37 02 	lds	r19, 0x0237
				}
			}
		}
	} else if (press_time2) { // press2 pause
 358:	80 91 38 02 	lds	r24, 0x0238
 35c:	90 91 39 02 	lds	r25, 0x0239
 360:	21 15       	cp	r18, r1
 362:	31 05       	cpc	r19, r1
 364:	e1 f0       	breq	.+56     	; 0x39e <__stack+0x9f>
 366:	40 91 71 02 	lds	r20, 0x0271
 36a:	44 23       	and	r20, r20
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 36c:	19 f0       	breq	.+6      	; 0x374 <__stack+0x75>
 36e:	45 e0       	ldi	r20, 0x05	; 5
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <__stack+0x79>
 374:	4e e1       	ldi	r20, 0x1E	; 30
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	84 0f       	add	r24, r20
 37a:	95 1f       	adc	r25, r21
 37c:	28 17       	cp	r18, r24
 37e:	39 07       	cpc	r19, r25
 380:	38 f4       	brcc	.+14     	; 0x390 <__stack+0x91>
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	30 93 37 02 	sts	0x0237, r19
			press_time2++;
 38a:	20 93 36 02 	sts	0x0236, r18
 38e:	08 95       	ret
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 33 02 	sts	0x0233, r25
		} else {
			repeat_time = 1;
 398:	80 93 32 02 	sts	0x0232, r24
 39c:	08 95       	ret
 39e:	20 91 34 02 	lds	r18, 0x0234
 3a2:	30 91 35 02 	lds	r19, 0x0235
		}
	} else if (release_time) { // release pause
 3a6:	21 15       	cp	r18, r1
 3a8:	31 05       	cpc	r19, r1
 3aa:	d9 f0       	breq	.+54     	; 0x3e2 <__stack+0xe3>
 3ac:	c2 96       	adiw	r24, 0x32	; 50
 3ae:	28 17       	cp	r18, r24
 3b0:	39 07       	cpc	r19, r25
		if (release_time<(press_time+50)) {
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <__stack+0xc3>
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	30 93 35 02 	sts	0x0235, r19
			release_time++;
 3bc:	20 93 34 02 	sts	0x0234, r18
 3c0:	08 95       	ret
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	80 93 00 01 	sts	0x0100, r24
		} else {
			last_key = 0xFF;
 3c8:	10 92 35 02 	sts	0x0235, r1
 3cc:	10 92 34 02 	sts	0x0234, r1
			release_time = 0;
 3d0:	10 92 39 02 	sts	0x0239, r1
 3d4:	10 92 38 02 	sts	0x0238, r1
			press_time = 0;
 3d8:	10 92 37 02 	sts	0x0237, r1
 3dc:	10 92 36 02 	sts	0x0236, r1
			press_time2 = 0;
 3e0:	08 95       	ret
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	69 f0       	breq	.+26     	; 0x400 <__stack+0x101>
 3e6:	8a 3f       	cpi	r24, 0xFA	; 250
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 3e8:	91 05       	cpc	r25, r1
 3ea:	30 f4       	brcc	.+12     	; 0x3f8 <__stack+0xf9>
		if (press_time<250) {
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	90 93 39 02 	sts	0x0239, r25
			press_time++;
 3f2:	80 93 38 02 	sts	0x0238, r24
 3f6:	08 95       	ret
 3f8:	10 92 39 02 	sts	0x0239, r1
 3fc:	10 92 38 02 	sts	0x0238, r1
		} else {
			press_time = 0;
 400:	08 95       	ret

00000402 <send>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 408:	df 93       	push	r29
 40a:	c3 e0       	ldi	r28, 0x03	; 3
 40c:	d1 e0       	ldi	r29, 0x01	; 1
 40e:	00 e4       	ldi	r16, 0x40	; 64
 410:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 412:	89 91       	ld	r24, Y+
 414:	4b df       	rcall	.-362    	; 0x2ac <get_code>
 416:	f8 01       	movw	r30, r16
 418:	81 93       	st	Z+, r24
 41a:	8f 01       	movw	r16, r30
 41c:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 41e:	c9 30       	cpi	r28, 0x09	; 9
 420:	df 07       	cpc	r29, r31
 422:	b9 f7       	brne	.-18     	; 0x412 <send+0x10>
 424:	80 91 3d 02 	lds	r24, 0x023D
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 428:	80 93 3f 02 	sts	0x023F, r24
 42c:	df 91       	pop	r29
	usb_keyboard_send();
}
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	72 c3       	rjmp	.+1764   	; 0xb1a <usb_keyboard_send>

00000436 <key_press>:
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
 436:	cf 93       	push	r28
 438:	c8 2f       	mov	r28, r24
	}	
}

void key_press(uint8_t key_id) {
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 43a:	60 91 3d 02 	lds	r22, 0x023D
 43e:	96 2f       	mov	r25, r22
 440:	9d 7d       	andi	r25, 0xDD	; 221
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	80 91 71 02 	lds	r24, 0x0271
 44a:	81 11       	cpse	r24, r1
 44c:	04 c0       	rjmp	.+8      	; 0x456 <key_press+0x20>
 44e:	99 23       	and	r25, r25
 450:	21 f0       	breq	.+8      	; 0x45a <key_press+0x24>
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	03 c0       	rjmp	.+6      	; 0x45c <key_press+0x26>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	01 c0       	rjmp	.+2      	; 0x45c <key_press+0x26>
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	f9 01       	movw	r30, r18
 45e:	e6 5b       	subi	r30, 0xB6	; 182
 460:	fd 4f       	sbci	r31, 0xFD	; 253
 462:	80 83       	st	Z, r24
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	21 f4       	brne	.+8      	; 0x470 <key_press+0x3a>
 468:	d9 01       	movw	r26, r18
 46a:	a5 5b       	subi	r26, 0xB5	; 181
 46c:	be 4f       	sbci	r27, 0xFE	; 254
 46e:	06 c0       	rjmp	.+12     	; 0x47c <key_press+0x46>
 470:	a0 91 0a 01 	lds	r26, 0x010A
 474:	b0 91 0b 01 	lds	r27, 0x010B
 478:	a2 0f       	add	r26, r18
 47a:	b3 1f       	adc	r27, r19
 47c:	8c 91       	ld	r24, X
	if (key_code==NULL) {
 47e:	81 11       	cpse	r24, r1
 480:	1e c0       	rjmp	.+60     	; 0x4be <key_press+0x88>
		key_code = layout[key_id];
 482:	a0 91 0a 01 	lds	r26, 0x010A
 486:	b0 91 0b 01 	lds	r27, 0x010B
 48a:	a2 0f       	add	r26, r18
 48c:	b3 1f       	adc	r27, r19
 48e:	8c 91       	ld	r24, X
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 490:	99 23       	and	r25, r25
 492:	11 f0       	breq	.+4      	; 0x498 <key_press+0x62>
 494:	92 e0       	ldi	r25, 0x02	; 2
 496:	01 c0       	rjmp	.+2      	; 0x49a <key_press+0x64>
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	90 83       	st	Z, r25
		if (key_code==NULL && prev_layer && ! mod_keys) {
 49c:	81 11       	cpse	r24, r1
 49e:	0f c0       	rjmp	.+30     	; 0x4be <key_press+0x88>
 4a0:	40 91 3b 02 	lds	r20, 0x023B
 4a4:	50 91 3c 02 	lds	r21, 0x023C
 4a8:	41 15       	cp	r20, r1
 4aa:	51 05       	cpc	r21, r1
 4ac:	41 f0       	breq	.+16     	; 0x4be <key_press+0x88>
 4ae:	61 11       	cpse	r22, r1
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <key_press+0x88>
			key_code = prev_layer[key_id];
 4b2:	da 01       	movw	r26, r20
 4b4:	a2 0f       	add	r26, r18
 4b6:	b3 1f       	adc	r27, r19
 4b8:	8c 91       	ld	r24, X
			pressed[key_id] = KEY_PRESSED_PREV;
 4ba:	96 e0       	ldi	r25, 0x06	; 6
 4bc:	90 83       	st	Z, r25
		}
	}

	if (locked && key_code!=KEY_LOCK) return;
 4be:	90 91 3a 02 	lds	r25, 0x023A
 4c2:	99 23       	and	r25, r25
 4c4:	21 f0       	breq	.+8      	; 0x4ce <key_press+0x98>
 4c6:	8a 37       	cpi	r24, 0x7A	; 122
 4c8:	09 f0       	breq	.+2      	; 0x4cc <key_press+0x96>
 4ca:	3d c1       	rjmp	.+634    	; 0x746 <key_press+0x310>
 4cc:	93 c0       	rjmp	.+294    	; 0x5f4 <key_press+0x1be>
	
	if (key_code>=KEY_CB_START) { // Catboard keys
 4ce:	8d 36       	cpi	r24, 0x6D	; 109
 4d0:	08 f4       	brcc	.+2      	; 0x4d4 <key_press+0x9e>
 4d2:	cb c0       	rjmp	.+406    	; 0x66a <key_press+0x234>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 4d4:	8d 37       	cpi	r24, 0x7D	; 125
 4d6:	01 f5       	brne	.+64     	; 0x518 <key_press+0xe2>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 4d8:	80 81       	ld	r24, Z
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	19 f4       	brne	.+6      	; 0x4e4 <key_press+0xae>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 4de:	64 e0       	ldi	r22, 0x04	; 4
 4e0:	8b e2       	ldi	r24, 0x2B	; 43
 4e2:	56 c0       	rjmp	.+172    	; 0x590 <key_press+0x15a>
			} else { // Alt press, Tab press and release
				if (! mod_keys) {
 4e4:	61 11       	cpse	r22, r1
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <key_press+0xba>
					mod_keys |= (KEY_ALT);
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	80 93 3d 02 	sts	0x023D, r24
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <key_press+0xbe>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
 4f4:	80 91 3d 02 	lds	r24, 0x023D
 4f8:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = KEY_TAB;
 4fc:	8b e2       	ldi	r24, 0x2B	; 43
 4fe:	80 93 40 02 	sts	0x0240, r24
				usb_keyboard_send();
 502:	0b d3       	rcall	.+1558   	; 0xb1a <usb_keyboard_send>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	80 e7       	ldi	r24, 0x70	; 112
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <key_press+0xd4>
 512:	00 c0       	rjmp	.+0      	; 0x514 <key_press+0xde>
 514:	00 00       	nop
 516:	f7 c0       	rjmp	.+494    	; 0x706 <key_press+0x2d0>
 518:	8e 37       	cpi	r24, 0x7E	; 126
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 51a:	31 f5       	brne	.+76     	; 0x568 <key_press+0x132>
 51c:	80 81       	ld	r24, Z
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <key_press+0xee>
 522:	f2 c0       	rjmp	.+484    	; 0x708 <key_press+0x2d2>
 524:	62 72       	andi	r22, 0x22	; 34
 526:	09 f4       	brne	.+2      	; 0x52a <key_press+0xf4>
 528:	ef c0       	rjmp	.+478    	; 0x708 <key_press+0x2d2>
 52a:	20 91 3b 02 	lds	r18, 0x023B
				if (prev_layer) { // FnLock Off
 52e:	30 91 3c 02 	lds	r19, 0x023C
 532:	21 15       	cp	r18, r1
 534:	31 05       	cpc	r19, r1
 536:	49 f0       	breq	.+18     	; 0x54a <key_press+0x114>
 538:	30 93 0b 01 	sts	0x010B, r19
					layout = prev_layer;
 53c:	20 93 0a 01 	sts	0x010A, r18
 540:	10 92 3c 02 	sts	0x023C, r1
					prev_layer = 0;
 544:	10 92 3b 02 	sts	0x023B, r1
 548:	df c0       	rjmp	.+446    	; 0x708 <key_press+0x2d2>
 54a:	80 91 0a 01 	lds	r24, 0x010A
				} else { // FnLock On
					prev_layer = layout;
 54e:	90 91 0b 01 	lds	r25, 0x010B
 552:	90 93 3c 02 	sts	0x023C, r25
 556:	80 93 3b 02 	sts	0x023B, r24
 55a:	8f e0       	ldi	r24, 0x0F	; 15
					layout = layer_fnlock;
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	90 93 0b 01 	sts	0x010B, r25
 562:	80 93 0a 01 	sts	0x010A, r24
 566:	d0 c0       	rjmp	.+416    	; 0x708 <key_press+0x2d2>
 568:	8c 37       	cpi	r24, 0x7C	; 124
				}
			}
		} else if (key_code==KEY_OS_MODE) { // Mac mode
 56a:	a1 f4       	brne	.+40     	; 0x594 <key_press+0x15e>
 56c:	80 81       	ld	r24, Z
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	71 f4       	brne	.+28     	; 0x58e <key_press+0x158>
 572:	86 2f       	mov	r24, r22
 574:	82 72       	andi	r24, 0x22	; 34
 576:	59 f0       	breq	.+22     	; 0x58e <key_press+0x158>
 578:	80 91 0c 01 	lds	r24, 0x010C
				os_mode++;
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 0c 01 	sts	0x010C, r24
 582:	83 30       	cpi	r24, 0x03	; 3
				if (os_mode>2) os_mode = 0;
 584:	08 f4       	brcc	.+2      	; 0x588 <key_press+0x152>
 586:	c0 c0       	rjmp	.+384    	; 0x708 <key_press+0x2d2>
 588:	10 92 0c 01 	sts	0x010C, r1
 58c:	bd c0       	rjmp	.+378    	; 0x708 <key_press+0x2d2>
 58e:	8c e2       	ldi	r24, 0x2C	; 44
			} else { // Press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
 590:	fe d2       	rcall	.+1532   	; 0xb8e <usb_keyboard_press>
 592:	ba c0       	rjmp	.+372    	; 0x708 <key_press+0x2d2>
 594:	8d 36       	cpi	r24, 0x6D	; 109
 596:	61 f4       	brne	.+24     	; 0x5b0 <key_press+0x17a>
			}
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 598:	86 2f       	mov	r24, r22
 59a:	82 72       	andi	r24, 0x22	; 34
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 59c:	21 f0       	breq	.+8      	; 0x5a6 <key_press+0x170>
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	80 83       	st	Z, r24
				pressed[key_id] = KEY_PRESSED_CTRL;
 5a2:	61 60       	ori	r22, 0x01	; 1
 5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <key_press+0x19c>
				mod_keys |= KEY_CTRL;
 5a6:	66 23       	and	r22, r22
 5a8:	99 f0       	breq	.+38     	; 0x5d0 <key_press+0x19a>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	80 83       	st	Z, r24
 5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <key_press+0x19a>
 5b0:	8e 36       	cpi	r24, 0x6E	; 110
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <key_press+0x182>
				mod_keys |= KEY_SHIFT;
				send();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 5b4:	60 62       	ori	r22, 0x20	; 32
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <key_press+0x19c>
			mod_keys |= KEY_RIGHT_SHIFT;
 5b8:	8b 37       	cpi	r24, 0x7B	; 123
 5ba:	41 f4       	brne	.+16     	; 0x5cc <key_press+0x196>
			send();
		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 91 02 01 	lds	r25, 0x0102
			turbo_repeat = ! turbo_repeat;
 5c2:	91 11       	cpse	r25, r1
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	80 93 02 01 	sts	0x0102, r24
 5ca:	9e c0       	rjmp	.+316    	; 0x708 <key_press+0x2d2>
 5cc:	87 37       	cpi	r24, 0x77	; 119
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <key_press+0x1a2>
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 5d0:	62 60       	ori	r22, 0x02	; 2
 5d2:	60 93 3d 02 	sts	0x023D, r22
			mod_keys |= KEY_SHIFT;
 5d6:	97 c0       	rjmp	.+302    	; 0x706 <key_press+0x2d0>
 5d8:	8f 36       	cpi	r24, 0x6F	; 111
 5da:	09 f4       	brne	.+2      	; 0x5de <key_press+0x1a8>
			send();
		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 5dc:	95 c0       	rjmp	.+298    	; 0x708 <key_press+0x2d2>
 5de:	8a 37       	cpi	r24, 0x7A	; 122
 5e0:	89 f4       	brne	.+34     	; 0x604 <key_press+0x1ce>
			uint16_t *macros;
			uint16_t *macros = macros_press[macros_pos_index];
			for (i==0; i<sizeof(macros); i=i+2) {
				usb_keyboard_press(macros[i], macros[i+1]);
			}*/
		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	80 93 3a 02 	sts	0x023A, r24
				if (led) {
					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
				}
			} else {
				locked = 1;
 5e8:	5e 9a       	sbi	0x0b, 6	; 11
 5ea:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 5ec:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 5ee:	68 e0       	ldi	r22, 0x08	; 8
				LED_BLUE_OFF;
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 5f2:	ce cf       	rjmp	.-100    	; 0x590 <key_press+0x15a>
 5f4:	10 92 3a 02 	sts	0x023A, r1
			for (i==0; i<sizeof(macros); i=i+2) {
				usb_keyboard_press(macros[i], macros[i+1]);
			}*/
		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
			if (locked) {
				locked = 0;
 5f8:	80 91 01 01 	lds	r24, 0x0101
				if (led) {
 5fc:	88 23       	and	r24, r24
 5fe:	09 f4       	brne	.+2      	; 0x602 <key_press+0x1cc>
 600:	83 c0       	rjmp	.+262    	; 0x708 <key_press+0x2d2>
 602:	13 c0       	rjmp	.+38     	; 0x62a <key_press+0x1f4>
 604:	89 37       	cpi	r24, 0x79	; 121
 606:	09 f0       	breq	.+2      	; 0x60a <key_press+0x1d4>
				LED_OFF;
				LED_RED_OFF;
				LED_BLUE_OFF;
				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
			}
		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 608:	7f c0       	rjmp	.+254    	; 0x708 <key_press+0x2d2>
 60a:	62 72       	andi	r22, 0x22	; 34
 60c:	09 f4       	brne	.+2      	; 0x610 <key_press+0x1da>
 60e:	7c c0       	rjmp	.+248    	; 0x708 <key_press+0x2d2>
 610:	80 91 01 01 	lds	r24, 0x0101
			if (led) {
 614:	88 23       	and	r24, r24
 616:	31 f0       	breq	.+12     	; 0x624 <key_press+0x1ee>
 618:	10 92 01 01 	sts	0x0101, r1
				led = 0;
 61c:	5e 9a       	sbi	0x0b, 6	; 11
 61e:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 620:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 622:	72 c0       	rjmp	.+228    	; 0x708 <key_press+0x2d2>
				LED_BLUE_OFF;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 01 01 	sts	0x0101, r24
			} else {
				led = 1;
 62a:	80 91 0a 01 	lds	r24, 0x010A
				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 62e:	90 91 0b 01 	lds	r25, 0x010B
 632:	87 58       	subi	r24, 0x87	; 135
 634:	91 40       	sbci	r25, 0x01	; 1
 636:	39 f0       	breq	.+14     	; 0x646 <key_press+0x210>
 638:	80 91 3b 02 	lds	r24, 0x023B
 63c:	90 91 3c 02 	lds	r25, 0x023C
 640:	87 58       	subi	r24, 0x87	; 135
 642:	91 40       	sbci	r25, 0x01	; 1
 644:	09 f4       	brne	.+2      	; 0x648 <key_press+0x212>
 646:	59 9a       	sbi	0x0b, 1	; 11
 648:	80 91 0a 01 	lds	r24, 0x010A
				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 64c:	90 91 0b 01 	lds	r25, 0x010B
 650:	86 5f       	subi	r24, 0xF6	; 246
 652:	91 40       	sbci	r25, 0x01	; 1
 654:	41 f0       	breq	.+16     	; 0x666 <key_press+0x230>
 656:	80 91 3b 02 	lds	r24, 0x023B
 65a:	90 91 3c 02 	lds	r25, 0x023C
 65e:	86 5f       	subi	r24, 0xF6	; 246
 660:	91 40       	sbci	r25, 0x01	; 1
 662:	09 f0       	breq	.+2      	; 0x666 <key_press+0x230>
 664:	51 c0       	rjmp	.+162    	; 0x708 <key_press+0x2d2>
 666:	46 98       	cbi	0x08, 6	; 8
 668:	4f c0       	rjmp	.+158    	; 0x708 <key_press+0x2d2>
 66a:	85 36       	cpi	r24, 0x65	; 101
 66c:	b0 f1       	brcs	.+108    	; 0x6da <key_press+0x2a4>
			}
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys
 66e:	90 91 0c 01 	lds	r25, 0x010C
		if (os_mode==2 && key_code==KEY_LCTRL) {
 672:	92 30       	cpi	r25, 0x02	; 2
 674:	29 f4       	brne	.+10     	; 0x680 <key_press+0x24a>
 676:	85 36       	cpi	r24, 0x65	; 101
 678:	b9 f0       	breq	.+46     	; 0x6a8 <key_press+0x272>
 67a:	89 36       	cpi	r24, 0x69	; 105
 67c:	49 f4       	brne	.+18     	; 0x690 <key_press+0x25a>
			mod_keys |= KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 67e:	02 c0       	rjmp	.+4      	; 0x684 <key_press+0x24e>
 680:	8c 36       	cpi	r24, 0x6C	; 108
 682:	11 f4       	brne	.+4      	; 0x688 <key_press+0x252>
 684:	60 68       	ori	r22, 0x80	; 128
 686:	1b c0       	rjmp	.+54     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_RIGHT_GUI;
 688:	85 36       	cpi	r24, 0x65	; 101
 68a:	21 f4       	brne	.+8      	; 0x694 <key_press+0x25e>
		} else if (key_code==KEY_LCTRL) {
 68c:	61 60       	ori	r22, 0x01	; 1
 68e:	17 c0       	rjmp	.+46     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_CTRL;
 690:	8c 36       	cpi	r24, 0x6C	; 108
 692:	c1 f3       	breq	.-16     	; 0x684 <key_press+0x24e>
			}
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys
		if (os_mode==2 && key_code==KEY_LCTRL) {
			mod_keys |= KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 694:	86 36       	cpi	r24, 0x66	; 102
 696:	11 f4       	brne	.+4      	; 0x69c <key_press+0x266>
			mod_keys |= KEY_RIGHT_GUI;
		} else if (key_code==KEY_LCTRL) {
			mod_keys |= KEY_CTRL;
		} else if (key_code==KEY_LSHIFT) {
 698:	62 60       	ori	r22, 0x02	; 2
 69a:	11 c0       	rjmp	.+34     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_SHIFT;
 69c:	87 36       	cpi	r24, 0x67	; 103
 69e:	11 f4       	brne	.+4      	; 0x6a4 <key_press+0x26e>
		} else if (key_code==KEY_LALT) {
 6a0:	64 60       	ori	r22, 0x04	; 4
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_ALT;
 6a4:	88 36       	cpi	r24, 0x68	; 104
 6a6:	11 f4       	brne	.+4      	; 0x6ac <key_press+0x276>
		} else if (key_code==KEY_LGUI) {
 6a8:	68 60       	ori	r22, 0x08	; 8
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_GUI;
 6ac:	89 36       	cpi	r24, 0x69	; 105
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <key_press+0x27e>
		} else if (key_code==KEY_RCTRL) {
 6b0:	60 61       	ori	r22, 0x10	; 16
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <key_press+0x288>
			mod_keys |= KEY_RIGHT_CTRL;
 6b4:	8a 36       	cpi	r24, 0x6A	; 106
 6b6:	11 f4       	brne	.+4      	; 0x6bc <key_press+0x286>
		} else if (key_code==KEY_RSHIFT) {
 6b8:	60 62       	ori	r22, 0x20	; 32
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <key_press+0x288>
			mod_keys |= KEY_RIGHT_SHIFT;
 6bc:	60 64       	ori	r22, 0x40	; 64
 6be:	60 93 3d 02 	sts	0x023D, r22
		} else if (key_code==KEY_RALT) {
			mod_keys |= KEY_RIGHT_ALT;
 6c2:	9f de       	rcall	.-706    	; 0x402 <send>
 6c4:	10 92 39 02 	sts	0x0239, r1
		} else if (key_code==KEY_RGUI) {
			mod_keys |= KEY_RIGHT_GUI;
		}
		send();
 6c8:	10 92 38 02 	sts	0x0238, r1
		press_time = 0;
 6cc:	10 92 35 02 	sts	0x0235, r1
 6d0:	10 92 34 02 	sts	0x0234, r1
		press_time2 = 0;
		release_time = 0;
 6d4:	10 92 00 01 	sts	0x0100, r1
 6d8:	17 c0       	rjmp	.+46     	; 0x708 <key_press+0x2d2>
		repeat_time = 0;
		last_key = 0;
 6da:	80 91 00 01 	lds	r24, 0x0100
 6de:	8c 13       	cpse	r24, r28
		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
			uint16_t num = layer2_typo[0];
			char str[4];
			itoa(num, &str, 16);
		}*/
		if (! (last_key==key_id && release_time<10)) { // debounce
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <key_press+0x2b8>
 6e2:	80 91 34 02 	lds	r24, 0x0234
 6e6:	90 91 35 02 	lds	r25, 0x0235
 6ea:	0a 97       	sbiw	r24, 0x0a	; 10
 6ec:	68 f0       	brcs	.+26     	; 0x708 <key_press+0x2d2>
 6ee:	e8 e0       	ldi	r30, 0x08	; 8
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
 6f2:	a9 e0       	ldi	r26, 0x09	; 9
 6f4:	b1 e0       	ldi	r27, 0x01	; 1
 6f6:	82 91       	ld	r24, -Z
 6f8:	8e 93       	st	-X, r24
 6fa:	81 e0       	ldi	r24, 0x01	; 1
			for (i=5; i>0; i--) queue[i] = queue[i-1];
 6fc:	e3 30       	cpi	r30, 0x03	; 3
 6fe:	f8 07       	cpc	r31, r24
 700:	d1 f7       	brne	.-12     	; 0x6f6 <key_press+0x2c0>
 702:	c0 93 03 01 	sts	0x0103, r28
 706:	7d de       	rcall	.-774    	; 0x402 <send>
			queue[0] = key_id;
 708:	80 91 00 01 	lds	r24, 0x0100
			send();
 70c:	8c 13       	cpse	r24, r28
 70e:	07 c0       	rjmp	.+14     	; 0x71e <key_press+0x2e8>
		}
	}
	// Autorepeat
	if (last_key==key_id) { // calc press2
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	90 93 37 02 	sts	0x0237, r25
		press_time2 = 1;
 718:	80 93 36 02 	sts	0x0236, r24
 71c:	10 c0       	rjmp	.+32     	; 0x73e <key_press+0x308>
 71e:	c0 93 00 01 	sts	0x0100, r28
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
		repeat_time = 0;
	} else { // calc press1
		last_key = key_id;
 726:	90 93 39 02 	sts	0x0239, r25
		press_time = 1;
 72a:	80 93 38 02 	sts	0x0238, r24
 72e:	10 92 37 02 	sts	0x0237, r1
 732:	10 92 36 02 	sts	0x0236, r1
		press_time2 = 0;
 736:	10 92 35 02 	sts	0x0235, r1
 73a:	10 92 34 02 	sts	0x0234, r1
		release_time = 0;
 73e:	10 92 33 02 	sts	0x0233, r1
 742:	10 92 32 02 	sts	0x0232, r1
		repeat_time = 0;
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <key_release>:
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
	}
}
 74e:	d8 2f       	mov	r29, r24
 750:	28 2f       	mov	r18, r24

void key_release(uint8_t key_id) {
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	d9 01       	movw	r26, r18
 756:	a6 5b       	subi	r26, 0xB6	; 182
 758:	bd 4f       	sbci	r27, 0xFD	; 253
 75a:	cc 91       	ld	r28, X
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 75c:	c1 30       	cpi	r28, 0x01	; 1
 75e:	21 f4       	brne	.+8      	; 0x768 <key_release+0x1e>
 760:	f9 01       	movw	r30, r18
 762:	e5 5b       	subi	r30, 0xB5	; 181
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	13 c0       	rjmp	.+38     	; 0x78e <key_release+0x44>
 768:	e0 91 0a 01 	lds	r30, 0x010A
 76c:	f0 91 0b 01 	lds	r31, 0x010B
 770:	e2 0f       	add	r30, r18
 772:	f3 1f       	adc	r31, r19
 774:	90 81       	ld	r25, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 776:	c6 30       	cpi	r28, 0x06	; 6
 778:	59 f4       	brne	.+22     	; 0x790 <key_release+0x46>
 77a:	40 91 3b 02 	lds	r20, 0x023B
 77e:	50 91 3c 02 	lds	r21, 0x023C
 782:	41 15       	cp	r20, r1
 784:	51 05       	cpc	r21, r1
 786:	21 f0       	breq	.+8      	; 0x790 <key_release+0x46>
		key_code = prev_layer[key_id];
 788:	fa 01       	movw	r30, r20
 78a:	e2 0f       	add	r30, r18
 78c:	f3 1f       	adc	r31, r19
 78e:	90 81       	ld	r25, Z
	}
	pressed[key_id] = 0;
 790:	1c 92       	st	X, r1
	if (locked) return;
 792:	80 91 3a 02 	lds	r24, 0x023A
 796:	81 11       	cpse	r24, r1
 798:	1c c1       	rjmp	.+568    	; 0x9d2 <key_release+0x288>
	if (key_code>=KEY_CB_START) { // Catboard keys release
 79a:	9d 36       	cpi	r25, 0x6D	; 109
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <key_release+0x56>
 79e:	a3 c0       	rjmp	.+326    	; 0x8e6 <key_release+0x19c>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 7a0:	9d 37       	cpi	r25, 0x7D	; 125
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <key_release+0x68>
 7a4:	c3 30       	cpi	r28, 0x03	; 3
 7a6:	09 f4       	brne	.+2      	; 0x7aa <key_release+0x60>
 7a8:	14 c1       	rjmp	.+552    	; 0x9d2 <key_release+0x288>
			mod_keys &= ~(KEY_ALT);
 7aa:	80 91 3d 02 	lds	r24, 0x023D
 7ae:	8b 7f       	andi	r24, 0xFB	; 251
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <key_release+0x78>
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 7b2:	9d 36       	cpi	r25, 0x6D	; 109
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <key_release+0x6e>
 7b6:	3f c0       	rjmp	.+126    	; 0x836 <key_release+0xec>
 7b8:	80 91 3d 02 	lds	r24, 0x023D
 7bc:	c5 30       	cpi	r28, 0x05	; 5
 7be:	31 f4       	brne	.+12     	; 0x7cc <key_release+0x82>
			mod_keys &= ~(KEY_CTRL);
 7c0:	8e 7f       	andi	r24, 0xFE	; 254
 7c2:	80 93 3d 02 	sts	0x023D, r24
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	}
}
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
			mod_keys &= ~(KEY_ALT);
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
			mod_keys &= ~(KEY_CTRL);
			send();
 7ca:	1b ce       	rjmp	.-970    	; 0x402 <send>
 7cc:	8d 7f       	andi	r24, 0xFD	; 253
		} else if (key_code==KEY_LAYER1) { // LAYER1
			mod_keys &= ~(KEY_SHIFT);
 7ce:	80 93 3d 02 	sts	0x023D, r24
 7d2:	17 de       	rcall	.-978    	; 0x402 <send>
			send();
 7d4:	80 91 00 01 	lds	r24, 0x0100
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 7d8:	8d 13       	cpse	r24, r29
 7da:	81 c0       	rjmp	.+258    	; 0x8de <key_release+0x194>
 7dc:	80 91 38 02 	lds	r24, 0x0238
 7e0:	90 91 39 02 	lds	r25, 0x0239
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	c1 97       	sbiw	r24, 0x31	; 49
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <key_release+0xa2>
 7ea:	79 c0       	rjmp	.+242    	; 0x8de <key_release+0x194>
 7ec:	c4 30       	cpi	r28, 0x04	; 4
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <key_release+0xa8>
 7f0:	76 c0       	rjmp	.+236    	; 0x8de <key_release+0x194>
 7f2:	80 91 0a 01 	lds	r24, 0x010A
				if (layout!=layer1) {
 7f6:	90 91 0b 01 	lds	r25, 0x010B
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	87 38       	cpi	r24, 0x87	; 135
 7fe:	92 07       	cpc	r25, r18
 800:	09 f4       	brne	.+2      	; 0x804 <key_release+0xba>
 802:	6d c0       	rjmp	.+218    	; 0x8de <key_release+0x194>
 804:	8b 54       	subi	r24, 0x4B	; 75
 806:	91 40       	sbci	r25, 0x01	; 1
					if (layout==layer_fn) {
 808:	39 f4       	brne	.+14     	; 0x818 <key_release+0xce>
 80a:	87 e8       	ldi	r24, 0x87	; 135
 80c:	91 e0       	ldi	r25, 0x01	; 1
						prev_layer = layer1;
 80e:	90 93 3c 02 	sts	0x023C, r25
 812:	80 93 3b 02 	sts	0x023B, r24
 816:	06 c0       	rjmp	.+12     	; 0x824 <key_release+0xda>
 818:	87 e8       	ldi	r24, 0x87	; 135
 81a:	91 e0       	ldi	r25, 0x01	; 1
					} else {
						layout = layer1;
 81c:	90 93 0b 01 	sts	0x010B, r25
 820:	80 93 0a 01 	sts	0x010A, r24
 824:	1b dd       	rcall	.-1482   	; 0x25c <change_layout>
 826:	46 9a       	sbi	0x08, 6	; 8
					}
					change_layout();
 828:	80 91 01 01 	lds	r24, 0x0101
					//LED_ON;
					LED_RED_OFF;
 82c:	88 23       	and	r24, r24
					if (led) LED_BLUE_ON;
 82e:	09 f4       	brne	.+2      	; 0x832 <key_release+0xe8>
 830:	56 c0       	rjmp	.+172    	; 0x8de <key_release+0x194>
 832:	59 9a       	sbi	0x0b, 1	; 11
 834:	54 c0       	rjmp	.+168    	; 0x8de <key_release+0x194>
 836:	9e 36       	cpi	r25, 0x6E	; 110
 838:	a9 f5       	brne	.+106    	; 0x8a4 <key_release+0x15a>
 83a:	80 91 3d 02 	lds	r24, 0x023D
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_LAYER2) { // LAYER2
 83e:	8f 7d       	andi	r24, 0xDF	; 223
			mod_keys &= ~(KEY_RIGHT_SHIFT);
 840:	80 93 3d 02 	sts	0x023D, r24
 844:	de dd       	rcall	.-1092   	; 0x402 <send>
 846:	80 91 00 01 	lds	r24, 0x0100
			send();
 84a:	8d 13       	cpse	r24, r29
 84c:	48 c0       	rjmp	.+144    	; 0x8de <key_release+0x194>
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 84e:	80 91 38 02 	lds	r24, 0x0238
 852:	90 91 39 02 	lds	r25, 0x0239
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	c1 97       	sbiw	r24, 0x31	; 49
 85a:	08 f0       	brcs	.+2      	; 0x85e <key_release+0x114>
 85c:	40 c0       	rjmp	.+128    	; 0x8de <key_release+0x194>
 85e:	c4 30       	cpi	r28, 0x04	; 4
 860:	09 f4       	brne	.+2      	; 0x864 <key_release+0x11a>
 862:	3d c0       	rjmp	.+122    	; 0x8de <key_release+0x194>
 864:	80 91 0a 01 	lds	r24, 0x010A
 868:	90 91 0b 01 	lds	r25, 0x010B
				if (layout!=layer2) {
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	86 3f       	cpi	r24, 0xF6	; 246
 870:	92 07       	cpc	r25, r18
 872:	a9 f1       	breq	.+106    	; 0x8de <key_release+0x194>
 874:	8b 54       	subi	r24, 0x4B	; 75
 876:	91 40       	sbci	r25, 0x01	; 1
 878:	39 f4       	brne	.+14     	; 0x888 <key_release+0x13e>
 87a:	86 ef       	ldi	r24, 0xF6	; 246
					if (layout==layer_fn) {
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	90 93 3c 02 	sts	0x023C, r25
						prev_layer = layer2;
 882:	80 93 3b 02 	sts	0x023B, r24
 886:	06 c0       	rjmp	.+12     	; 0x894 <key_release+0x14a>
 888:	86 ef       	ldi	r24, 0xF6	; 246
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	90 93 0b 01 	sts	0x010B, r25
					} else {
						layout = layer2;
 890:	80 93 0a 01 	sts	0x010A, r24
 894:	e3 dc       	rcall	.-1594   	; 0x25c <change_layout>
 896:	59 98       	cbi	0x0b, 1	; 11
 898:	80 91 01 01 	lds	r24, 0x0101
					}
					change_layout();
 89c:	88 23       	and	r24, r24
 89e:	f9 f0       	breq	.+62     	; 0x8de <key_release+0x194>
					//LED_OFF;
					LED_BLUE_OFF;
 8a0:	46 98       	cbi	0x08, 6	; 8
					if (led) LED_RED_ON;
 8a2:	1d c0       	rjmp	.+58     	; 0x8de <key_release+0x194>
 8a4:	97 37       	cpi	r25, 0x77	; 119
 8a6:	09 f0       	breq	.+2      	; 0x8aa <key_release+0x160>
 8a8:	94 c0       	rjmp	.+296    	; 0x9d2 <key_release+0x288>
 8aa:	80 91 3d 02 	lds	r24, 0x023D
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 8ae:	8d 7f       	andi	r24, 0xFD	; 253
 8b0:	80 93 3d 02 	sts	0x023D, r24
			mod_keys &= ~KEY_SHIFT;
 8b4:	a6 dd       	rcall	.-1204   	; 0x402 <send>
 8b6:	80 91 00 01 	lds	r24, 0x0100
 8ba:	8d 13       	cpse	r24, r29
 8bc:	10 c0       	rjmp	.+32     	; 0x8de <key_release+0x194>
			send();
 8be:	80 91 38 02 	lds	r24, 0x0238
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 8c2:	90 91 39 02 	lds	r25, 0x0239
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	c1 97       	sbiw	r24, 0x31	; 49
 8ca:	48 f4       	brcc	.+18     	; 0x8de <key_release+0x194>
 8cc:	c2 30       	cpi	r28, 0x02	; 2
 8ce:	39 f0       	breq	.+14     	; 0x8de <key_release+0x194>
 8d0:	80 91 3d 02 	lds	r24, 0x023D
 8d4:	81 11       	cpse	r24, r1
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <key_release+0x194>
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	8c e2       	ldi	r24, 0x2C	; 44
 8dc:	58 d1       	rcall	.+688    	; 0xb8e <usb_keyboard_press>
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	80 93 00 01 	sts	0x0100, r24
				usb_keyboard_press(KEY_SPACE, mod_keys);
 8e4:	66 c0       	rjmp	.+204    	; 0x9b2 <key_release+0x268>
 8e6:	95 36       	cpi	r25, 0x65	; 101
 8e8:	08 f4       	brcc	.+2      	; 0x8ec <key_release+0x1a2>
 8ea:	40 c0       	rjmp	.+128    	; 0x96c <key_release+0x222>
			}
			last_key = 0xFF;
 8ec:	20 91 0c 01 	lds	r18, 0x010C
 8f0:	80 91 3d 02 	lds	r24, 0x023D
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 8f4:	22 30       	cpi	r18, 0x02	; 2
 8f6:	39 f4       	brne	.+14     	; 0x906 <key_release+0x1bc>
 8f8:	95 36       	cpi	r25, 0x65	; 101
		if (os_mode==2 && key_code==KEY_LCTRL) {
 8fa:	11 f4       	brne	.+4      	; 0x900 <key_release+0x1b6>
 8fc:	87 7f       	andi	r24, 0xF7	; 247
 8fe:	20 c0       	rjmp	.+64     	; 0x940 <key_release+0x1f6>
 900:	99 36       	cpi	r25, 0x69	; 105
 902:	49 f4       	brne	.+18     	; 0x916 <key_release+0x1cc>
 904:	02 c0       	rjmp	.+4      	; 0x90a <key_release+0x1c0>
 906:	9c 36       	cpi	r25, 0x6C	; 108
 908:	11 f4       	brne	.+4      	; 0x90e <key_release+0x1c4>
			mod_keys &= ~KEY_GUI;
 90a:	8f 77       	andi	r24, 0x7F	; 127
 90c:	19 c0       	rjmp	.+50     	; 0x940 <key_release+0x1f6>
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 90e:	95 36       	cpi	r25, 0x65	; 101
 910:	21 f4       	brne	.+8      	; 0x91a <key_release+0x1d0>
 912:	8e 7f       	andi	r24, 0xFE	; 254
 914:	15 c0       	rjmp	.+42     	; 0x940 <key_release+0x1f6>
 916:	9c 36       	cpi	r25, 0x6C	; 108
			mod_keys &= ~KEY_RIGHT_GUI;
 918:	c1 f3       	breq	.-16     	; 0x90a <key_release+0x1c0>
 91a:	96 36       	cpi	r25, 0x66	; 102
		} else if (key_code==KEY_LCTRL) {
 91c:	11 f4       	brne	.+4      	; 0x922 <key_release+0x1d8>
 91e:	8d 7f       	andi	r24, 0xFD	; 253
			mod_keys &= ~KEY_CTRL;
 920:	0f c0       	rjmp	.+30     	; 0x940 <key_release+0x1f6>
 922:	97 36       	cpi	r25, 0x67	; 103
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
		if (os_mode==2 && key_code==KEY_LCTRL) {
			mod_keys &= ~KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 924:	11 f4       	brne	.+4      	; 0x92a <key_release+0x1e0>
 926:	8b 7f       	andi	r24, 0xFB	; 251
			mod_keys &= ~KEY_RIGHT_GUI;
		} else if (key_code==KEY_LCTRL) {
			mod_keys &= ~KEY_CTRL;
		} else if (key_code==KEY_LSHIFT) {
 928:	0b c0       	rjmp	.+22     	; 0x940 <key_release+0x1f6>
 92a:	98 36       	cpi	r25, 0x68	; 104
			mod_keys &= ~KEY_SHIFT;
 92c:	39 f3       	breq	.-50     	; 0x8fc <key_release+0x1b2>
 92e:	99 36       	cpi	r25, 0x69	; 105
		} else if (key_code==KEY_LALT) {
 930:	11 f4       	brne	.+4      	; 0x936 <key_release+0x1ec>
 932:	8f 7e       	andi	r24, 0xEF	; 239
			mod_keys &= ~KEY_ALT;
 934:	05 c0       	rjmp	.+10     	; 0x940 <key_release+0x1f6>
 936:	9a 36       	cpi	r25, 0x6A	; 106
		} else if (key_code==KEY_LGUI) {
 938:	11 f4       	brne	.+4      	; 0x93e <key_release+0x1f4>
 93a:	8f 7d       	andi	r24, 0xDF	; 223
			mod_keys &= ~KEY_GUI;
		} else if (key_code==KEY_RCTRL) {
 93c:	01 c0       	rjmp	.+2      	; 0x940 <key_release+0x1f6>
 93e:	8f 7b       	andi	r24, 0xBF	; 191
			mod_keys &= ~KEY_RIGHT_CTRL;
 940:	80 93 3d 02 	sts	0x023D, r24
		} else if (key_code==KEY_RSHIFT) {
 944:	5e dd       	rcall	.-1348   	; 0x402 <send>
 946:	10 92 39 02 	sts	0x0239, r1
			mod_keys &= ~KEY_RIGHT_SHIFT;
 94a:	10 92 38 02 	sts	0x0238, r1
		} else if (key_code==KEY_RALT) {
			mod_keys &= ~KEY_RIGHT_ALT;
 94e:	10 92 37 02 	sts	0x0237, r1
		} else if (key_code==KEY_RGUI) {
			mod_keys &= ~KEY_RIGHT_GUI;
		}
		send();
 952:	10 92 36 02 	sts	0x0236, r1
		press_time = 0;
 956:	10 92 35 02 	sts	0x0235, r1
 95a:	10 92 34 02 	sts	0x0234, r1
		press_time2 = 0;
 95e:	10 92 33 02 	sts	0x0233, r1
 962:	10 92 32 02 	sts	0x0232, r1
		release_time = 0;
 966:	10 92 00 01 	sts	0x0100, r1
 96a:	33 c0       	rjmp	.+102    	; 0x9d2 <key_release+0x288>
 96c:	e3 e0       	ldi	r30, 0x03	; 3
		repeat_time = 0;
 96e:	f1 e0       	ldi	r31, 0x01	; 1
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	91 91       	ld	r25, Z+
 974:	9d 17       	cp	r25, r29
		last_key = 0;
 976:	19 f0       	breq	.+6      	; 0x97e <key_release+0x234>
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	86 30       	cpi	r24, 0x06	; 6
 97c:	d1 f7       	brne	.-12     	; 0x972 <key_release+0x228>
 97e:	86 30       	cpi	r24, 0x06	; 6
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 980:	41 f0       	breq	.+16     	; 0x992 <key_release+0x248>
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 982:	e8 2f       	mov	r30, r24
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	ed 5f       	subi	r30, 0xFD	; 253
		press_time2 = 0;
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
 988:	fe 4f       	sbci	r31, 0xFE	; 254
 98a:	91 81       	ldd	r25, Z+1	; 0x01
 98c:	90 83       	st	Z, r25
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 98e:	8f 5f       	subi	r24, 0xFF	; 255
 990:	f6 cf       	rjmp	.-20     	; 0x97e <key_release+0x234>
			queue[i] = queue[i+1];
 992:	37 dd       	rcall	.-1426   	; 0x402 <send>
 994:	80 91 00 01 	lds	r24, 0x0100
 998:	8d 13       	cpse	r24, r29
 99a:	0b c0       	rjmp	.+22     	; 0x9b2 <key_release+0x268>
 99c:	10 92 37 02 	sts	0x0237, r1
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 9a0:	10 92 36 02 	sts	0x0236, r1
			queue[i] = queue[i+1];
		}
		send();
 9a4:	81 e0       	ldi	r24, 0x01	; 1
		// Autorepeat
		if (last_key==key_id) { // realise time
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	90 93 35 02 	sts	0x0235, r25
 9ac:	80 93 34 02 	sts	0x0234, r24
			press_time2 = 0;
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <key_release+0x280>
 9b2:	10 92 39 02 	sts	0x0239, r1
			release_time = 1;
 9b6:	10 92 38 02 	sts	0x0238, r1
 9ba:	10 92 37 02 	sts	0x0237, r1
 9be:	10 92 36 02 	sts	0x0236, r1
 9c2:	10 92 35 02 	sts	0x0235, r1
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 9c6:	10 92 34 02 	sts	0x0234, r1
 9ca:	10 92 33 02 	sts	0x0233, r1
			press_time2 = 0;
 9ce:	10 92 32 02 	sts	0x0232, r1
 9d2:	df 91       	pop	r29
			release_time = 0;
 9d4:	cf 91       	pop	r28
 9d6:	08 95       	ret

000009d8 <poll>:
 9d8:	7f 92       	push	r7
 9da:	8f 92       	push	r8
			repeat_time = 0;
 9dc:	9f 92       	push	r9
 9de:	af 92       	push	r10
 9e0:	bf 92       	push	r11
 9e2:	cf 92       	push	r12
		}
	}
}
 9e4:	df 92       	push	r13
 9e6:	ef 92       	push	r14
 9e8:	ff 92       	push	r15
	LED_OFF;
	if (led) LED_RED_ON;
	caps_lock_led = keyboard_leds;
}

void poll() {
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	7c ee       	ldi	r23, 0xEC	; 236
 9f4:	e7 2e       	mov	r14, r23
 9f6:	71 e0       	ldi	r23, 0x01	; 1
 9f8:	f7 2e       	mov	r15, r23
 9fa:	07 ee       	ldi	r16, 0xE7	; 231
 9fc:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 9fe:	81 2c       	mov	r8, r1
		*row_port[row] &= ~row_bit[row];
 a00:	d7 01       	movw	r26, r14
 a02:	cd 91       	ld	r28, X+
 a04:	dd 91       	ld	r29, X+
 a06:	7d 01       	movw	r14, r26
 a08:	f8 01       	movw	r30, r16
 a0a:	91 90       	ld	r9, Z+
 a0c:	8f 01       	movw	r16, r30
 a0e:	99 2d       	mov	r25, r9
 a10:	90 95       	com	r25
 a12:	88 81       	ld	r24, Y
 a14:	89 23       	and	r24, r25
 a16:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a18:	f5 e0       	ldi	r31, 0x05	; 5
 a1a:	fa 95       	dec	r31
 a1c:	f1 f7       	brne	.-4      	; 0xa1a <poll+0x42>
 a1e:	00 00       	nop
 a20:	5f ec       	ldi	r21, 0xCF	; 207
 a22:	a5 2e       	mov	r10, r21
 a24:	51 e0       	ldi	r21, 0x01	; 1
 a26:	b5 2e       	mov	r11, r21
 a28:	63 ec       	ldi	r22, 0xC3	; 195
 a2a:	c6 2e       	mov	r12, r22
 a2c:	61 e0       	ldi	r22, 0x01	; 1
 a2e:	d6 2e       	mov	r13, r22
 a30:	71 2c       	mov	r7, r1
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
 a32:	87 2d       	mov	r24, r7
 a34:	88 0d       	add	r24, r8
			if (! (*col_pin[col] & col_bit[col])) { // press key
 a36:	d5 01       	movw	r26, r10
 a38:	ed 91       	ld	r30, X+
 a3a:	fd 91       	ld	r31, X+
 a3c:	5d 01       	movw	r10, r26
 a3e:	d6 01       	movw	r26, r12
 a40:	9d 91       	ld	r25, X+
 a42:	6d 01       	movw	r12, r26
 a44:	20 81       	ld	r18, Z
 a46:	92 23       	and	r25, r18
 a48:	28 2f       	mov	r18, r24
 a4a:	30 e0       	ldi	r19, 0x00	; 0
				if (! pressed[key_id]) {
 a4c:	f9 01       	movw	r30, r18
 a4e:	e6 5b       	subi	r30, 0xB6	; 182
 a50:	fd 4f       	sbci	r31, 0xFD	; 253
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 a52:	91 11       	cpse	r25, r1
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <poll+0x88>
				if (! pressed[key_id]) {
 a56:	90 81       	ld	r25, Z
 a58:	91 11       	cpse	r25, r1
 a5a:	05 c0       	rjmp	.+10     	; 0xa66 <poll+0x8e>
					key_press(key_id);
 a5c:	ec dc       	rcall	.-1576   	; 0x436 <key_press>
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <poll+0x8e>
 a60:	90 81       	ld	r25, Z
				}
			} else if (pressed[key_id]) { // release key
 a62:	91 11       	cpse	r25, r1
 a64:	72 de       	rcall	.-796    	; 0x74a <key_release>
				key_release(key_id);
 a66:	b5 e0       	ldi	r27, 0x05	; 5
 a68:	7b 0e       	add	r7, r27
 a6a:	ec e3       	ldi	r30, 0x3C	; 60
 a6c:	7e 12       	cpse	r7, r30
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 a6e:	e1 cf       	rjmp	.-62     	; 0xa32 <poll+0x5a>
 a70:	88 81       	ld	r24, Y
 a72:	89 29       	or	r24, r9
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 a74:	88 83       	st	Y, r24
 a76:	83 94       	inc	r8
 a78:	8b 12       	cpse	r8, r27
	caps_lock_led = keyboard_leds;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 a7a:	c2 cf       	rjmp	.-124    	; 0xa00 <poll+0x28>
 a7c:	80 91 46 02 	lds	r24, 0x0246
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 a80:	82 70       	andi	r24, 0x02	; 2
 a82:	90 91 3e 02 	lds	r25, 0x023E
 a86:	98 13       	cpse	r25, r24
 a88:	a9 db       	rcall	.-2222   	; 0x1dc <caps_lock_change_layer>
 a8a:	35 dc       	rcall	.-1942   	; 0x2f6 <repeat_tick>
		caps_lock_change_layer();
 a8c:	8f e1       	ldi	r24, 0x1F	; 31
 a8e:	9e e4       	ldi	r25, 0x4E	; 78
	}
	//if (keyboard_leds) LED_ON; else LED_OFF;
	repeat_tick();
 a90:	01 97       	sbiw	r24, 0x01	; 1
 a92:	f1 f7       	brne	.-4      	; 0xa90 <poll+0xb8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a94:	00 c0       	rjmp	.+0      	; 0xa96 <poll+0xbe>
 a96:	00 00       	nop
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
	_delay_ms(5);
}
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	bf 90       	pop	r11
 aaa:	af 90       	pop	r10
 aac:	9f 90       	pop	r9
 aae:	8f 90       	pop	r8
 ab0:	7f 90       	pop	r7
 ab2:	08 95       	ret

00000ab4 <main>:
 ab4:	84 b7       	in	r24, 0x34	; 52
 ab6:	87 7f       	andi	r24, 0xF7	; 247
 ab8:	84 bf       	out	0x34, r24	; 52
 aba:	88 e1       	ldi	r24, 0x18	; 24


int main(void) {
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	f8 94       	cli
 ac0:	80 93 60 00 	sts	0x0060, r24
 ac4:	10 92 60 00 	sts	0x0060, r1
 ac8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	80 e8       	ldi	r24, 0x80	; 128
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	80 93 61 00 	sts	0x0061, r24
 ad6:	90 93 61 00 	sts	0x0061, r25
 ada:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 adc:	5b db       	rcall	.-2378   	; 0x194 <init>
 ade:	7c df       	rcall	.-264    	; 0x9d8 <poll>
	for (;;) {
		poll();
 ae0:	fe cf       	rjmp	.-4      	; 0xade <main+0x2a>

00000ae2 <usb_wait_in_ready>:
 ae2:	80 91 e8 00 	lds	r24, 0x00E8
 ae6:	80 ff       	sbrs	r24, 0
 ae8:	fc cf       	rjmp	.-8      	; 0xae2 <usb_wait_in_ready>
 aea:	08 95       	ret

00000aec <usb_init>:
 aec:	80 ea       	ldi	r24, 0xA0	; 160
 aee:	80 93 d8 00 	sts	0x00D8, r24
 af2:	86 e0       	ldi	r24, 0x06	; 6
 af4:	89 bd       	out	0x29, r24	; 41
 af6:	09 b4       	in	r0, 0x29	; 41
 af8:	00 fe       	sbrs	r0, 0
 afa:	fd cf       	rjmp	.-6      	; 0xaf6 <usb_init+0xa>
 afc:	80 e8       	ldi	r24, 0x80	; 128
 afe:	80 93 d8 00 	sts	0x00D8, r24
 b02:	10 92 e0 00 	sts	0x00E0, r1
 b06:	10 92 47 02 	sts	0x0247, r1
 b0a:	8c e0       	ldi	r24, 0x0C	; 12
 b0c:	80 93 e2 00 	sts	0x00E2, r24
 b10:	78 94       	sei
 b12:	08 95       	ret

00000b14 <usb_configured>:
 b14:	80 91 47 02 	lds	r24, 0x0247
 b18:	08 95       	ret

00000b1a <usb_keyboard_send>:
 b1a:	80 91 47 02 	lds	r24, 0x0247
 b1e:	88 23       	and	r24, r24
 b20:	91 f1       	breq	.+100    	; 0xb86 <usb_keyboard_send+0x6c>
 b22:	8f b7       	in	r24, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	93 e0       	ldi	r25, 0x03	; 3
 b28:	90 93 e9 00 	sts	0x00E9, r25
 b2c:	90 91 e4 00 	lds	r25, 0x00E4
 b30:	9e 5c       	subi	r25, 0xCE	; 206
 b32:	23 e0       	ldi	r18, 0x03	; 3
 b34:	30 91 e8 00 	lds	r19, 0x00E8
 b38:	35 fd       	sbrc	r19, 5
 b3a:	0e c0       	rjmp	.+28     	; 0xb58 <usb_keyboard_send+0x3e>
 b3c:	8f bf       	out	0x3f, r24	; 63
 b3e:	80 91 47 02 	lds	r24, 0x0247
 b42:	88 23       	and	r24, r24
 b44:	01 f1       	breq	.+64     	; 0xb86 <usb_keyboard_send+0x6c>
 b46:	80 91 e4 00 	lds	r24, 0x00E4
 b4a:	89 17       	cp	r24, r25
 b4c:	f1 f0       	breq	.+60     	; 0xb8a <usb_keyboard_send+0x70>
 b4e:	8f b7       	in	r24, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	20 93 e9 00 	sts	0x00E9, r18
 b56:	ee cf       	rjmp	.-36     	; 0xb34 <usb_keyboard_send+0x1a>
 b58:	90 91 3f 02 	lds	r25, 0x023F
 b5c:	90 93 f1 00 	sts	0x00F1, r25
 b60:	10 92 f1 00 	sts	0x00F1, r1
 b64:	e0 e4       	ldi	r30, 0x40	; 64
 b66:	f2 e0       	ldi	r31, 0x02	; 2
 b68:	91 91       	ld	r25, Z+
 b6a:	90 93 f1 00 	sts	0x00F1, r25
 b6e:	92 e0       	ldi	r25, 0x02	; 2
 b70:	e6 34       	cpi	r30, 0x46	; 70
 b72:	f9 07       	cpc	r31, r25
 b74:	c9 f7       	brne	.-14     	; 0xb68 <usb_keyboard_send+0x4e>
 b76:	9a e3       	ldi	r25, 0x3A	; 58
 b78:	90 93 e8 00 	sts	0x00E8, r25
 b7c:	10 92 48 02 	sts	0x0248, r1
 b80:	8f bf       	out	0x3f, r24	; 63
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	08 95       	ret
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	08 95       	ret
 b8a:	8f ef       	ldi	r24, 0xFF	; 255
 b8c:	08 95       	ret

00000b8e <usb_keyboard_press>:
 b8e:	60 93 3f 02 	sts	0x023F, r22
 b92:	80 93 40 02 	sts	0x0240, r24
 b96:	c1 df       	rcall	.-126    	; 0xb1a <usb_keyboard_send>
 b98:	88 23       	and	r24, r24
 b9a:	29 f4       	brne	.+10     	; 0xba6 <usb_keyboard_press+0x18>
 b9c:	10 92 3f 02 	sts	0x023F, r1
 ba0:	10 92 40 02 	sts	0x0240, r1
 ba4:	ba cf       	rjmp	.-140    	; 0xb1a <usb_keyboard_send>
 ba6:	08 95       	ret

00000ba8 <__vector_11>:
 ba8:	1f 92       	push	r1
 baa:	0f 92       	push	r0
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	0f 92       	push	r0
 bb0:	11 24       	eor	r1, r1
 bb2:	2f 93       	push	r18
 bb4:	8f 93       	push	r24
 bb6:	9f 93       	push	r25
 bb8:	ef 93       	push	r30
 bba:	ff 93       	push	r31
 bbc:	80 91 e1 00 	lds	r24, 0x00E1
 bc0:	10 92 e1 00 	sts	0x00E1, r1
 bc4:	83 ff       	sbrs	r24, 3
 bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <__vector_11+0x3e>
 bc8:	10 92 e9 00 	sts	0x00E9, r1
 bcc:	91 e0       	ldi	r25, 0x01	; 1
 bce:	90 93 eb 00 	sts	0x00EB, r25
 bd2:	10 92 ec 00 	sts	0x00EC, r1
 bd6:	92 e2       	ldi	r25, 0x22	; 34
 bd8:	90 93 ed 00 	sts	0x00ED, r25
 bdc:	98 e0       	ldi	r25, 0x08	; 8
 bde:	90 93 f0 00 	sts	0x00F0, r25
 be2:	10 92 47 02 	sts	0x0247, r1
 be6:	82 ff       	sbrs	r24, 2
 be8:	34 c0       	rjmp	.+104    	; 0xc52 <__vector_11+0xaa>
 bea:	80 91 47 02 	lds	r24, 0x0247
 bee:	88 23       	and	r24, r24
 bf0:	81 f1       	breq	.+96     	; 0xc52 <__vector_11+0xaa>
 bf2:	20 91 0d 01 	lds	r18, 0x010D
 bf6:	22 23       	and	r18, r18
 bf8:	61 f1       	breq	.+88     	; 0xc52 <__vector_11+0xaa>
 bfa:	80 91 49 02 	lds	r24, 0x0249
 bfe:	8f 5f       	subi	r24, 0xFF	; 255
 c00:	80 93 49 02 	sts	0x0249, r24
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	83 70       	andi	r24, 0x03	; 3
 c08:	90 70       	andi	r25, 0x00	; 0
 c0a:	00 97       	sbiw	r24, 0x00	; 0
 c0c:	11 f5       	brne	.+68     	; 0xc52 <__vector_11+0xaa>
 c0e:	83 e0       	ldi	r24, 0x03	; 3
 c10:	80 93 e9 00 	sts	0x00E9, r24
 c14:	80 91 e8 00 	lds	r24, 0x00E8
 c18:	85 ff       	sbrs	r24, 5
 c1a:	1b c0       	rjmp	.+54     	; 0xc52 <__vector_11+0xaa>
 c1c:	80 91 48 02 	lds	r24, 0x0248
 c20:	8f 5f       	subi	r24, 0xFF	; 255
 c22:	80 93 48 02 	sts	0x0248, r24
 c26:	82 17       	cp	r24, r18
 c28:	a1 f4       	brne	.+40     	; 0xc52 <__vector_11+0xaa>
 c2a:	10 92 48 02 	sts	0x0248, r1
 c2e:	80 91 3f 02 	lds	r24, 0x023F
 c32:	80 93 f1 00 	sts	0x00F1, r24
 c36:	10 92 f1 00 	sts	0x00F1, r1
 c3a:	e0 e4       	ldi	r30, 0x40	; 64
 c3c:	f2 e0       	ldi	r31, 0x02	; 2
 c3e:	81 91       	ld	r24, Z+
 c40:	80 93 f1 00 	sts	0x00F1, r24
 c44:	82 e0       	ldi	r24, 0x02	; 2
 c46:	e6 34       	cpi	r30, 0x46	; 70
 c48:	f8 07       	cpc	r31, r24
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__vector_11+0x96>
 c4c:	8a e3       	ldi	r24, 0x3A	; 58
 c4e:	80 93 e8 00 	sts	0x00E8, r24
 c52:	ff 91       	pop	r31
 c54:	ef 91       	pop	r30
 c56:	9f 91       	pop	r25
 c58:	8f 91       	pop	r24
 c5a:	2f 91       	pop	r18
 c5c:	0f 90       	pop	r0
 c5e:	0f be       	out	0x3f, r0	; 63
 c60:	0f 90       	pop	r0
 c62:	1f 90       	pop	r1
 c64:	18 95       	reti

00000c66 <__vector_12>:
 c66:	1f 92       	push	r1
 c68:	0f 92       	push	r0
 c6a:	0f b6       	in	r0, 0x3f	; 63
 c6c:	0f 92       	push	r0
 c6e:	11 24       	eor	r1, r1
 c70:	cf 92       	push	r12
 c72:	df 92       	push	r13
 c74:	ef 92       	push	r14
 c76:	ff 92       	push	r15
 c78:	0f 93       	push	r16
 c7a:	1f 93       	push	r17
 c7c:	2f 93       	push	r18
 c7e:	3f 93       	push	r19
 c80:	4f 93       	push	r20
 c82:	5f 93       	push	r21
 c84:	6f 93       	push	r22
 c86:	7f 93       	push	r23
 c88:	8f 93       	push	r24
 c8a:	9f 93       	push	r25
 c8c:	af 93       	push	r26
 c8e:	bf 93       	push	r27
 c90:	ef 93       	push	r30
 c92:	ff 93       	push	r31
 c94:	df 93       	push	r29
 c96:	cf 93       	push	r28
 c98:	0f 92       	push	r0
 c9a:	cd b7       	in	r28, 0x3d	; 61
 c9c:	de b7       	in	r29, 0x3e	; 62
 c9e:	10 92 e9 00 	sts	0x00E9, r1
 ca2:	80 91 e8 00 	lds	r24, 0x00E8
 ca6:	83 ff       	sbrs	r24, 3
 ca8:	39 c1       	rjmp	.+626    	; 0xf1c <__vector_12+0x2b6>
 caa:	20 91 f1 00 	lds	r18, 0x00F1
 cae:	30 91 f1 00 	lds	r19, 0x00F1
 cb2:	80 91 f1 00 	lds	r24, 0x00F1
 cb6:	c8 2e       	mov	r12, r24
 cb8:	dd 24       	eor	r13, r13
 cba:	40 91 f1 00 	lds	r20, 0x00F1
 cbe:	94 2f       	mov	r25, r20
 cc0:	80 e0       	ldi	r24, 0x00	; 0
 cc2:	c8 2a       	or	r12, r24
 cc4:	d9 2a       	or	r13, r25
 cc6:	00 91 f1 00 	lds	r16, 0x00F1
 cca:	10 e0       	ldi	r17, 0x00	; 0
 ccc:	40 91 f1 00 	lds	r20, 0x00F1
 cd0:	94 2f       	mov	r25, r20
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	08 2b       	or	r16, r24
 cd6:	19 2b       	or	r17, r25
 cd8:	60 91 f1 00 	lds	r22, 0x00F1
 cdc:	a0 91 f1 00 	lds	r26, 0x00F1
 ce0:	82 ef       	ldi	r24, 0xF2	; 242
 ce2:	80 93 e8 00 	sts	0x00E8, r24
 ce6:	36 30       	cpi	r19, 0x06	; 6
 ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_12+0x86>
 cea:	59 c0       	rjmp	.+178    	; 0xd9e <__vector_12+0x138>
 cec:	8b e7       	ldi	r24, 0x7B	; 123
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	9c 01       	movw	r18, r24
 cf2:	25 50       	subi	r18, 0x05	; 5
 cf4:	30 40       	sbci	r19, 0x00	; 0
 cf6:	fc 01       	movw	r30, r24
 cf8:	37 97       	sbiw	r30, 0x07	; 7
 cfa:	45 91       	lpm	r20, Z+
 cfc:	54 91       	lpm	r21, Z
 cfe:	4c 15       	cp	r20, r12
 d00:	5d 05       	cpc	r21, r13
 d02:	f9 f4       	brne	.+62     	; 0xd42 <__vector_12+0xdc>
 d04:	f9 01       	movw	r30, r18
 d06:	45 91       	lpm	r20, Z+
 d08:	54 91       	lpm	r21, Z
 d0a:	40 17       	cp	r20, r16
 d0c:	51 07       	cpc	r21, r17
 d0e:	c9 f4       	brne	.+50     	; 0xd42 <__vector_12+0xdc>
 d10:	2e 5f       	subi	r18, 0xFE	; 254
 d12:	3f 4f       	sbci	r19, 0xFF	; 255
 d14:	f9 01       	movw	r30, r18
 d16:	85 91       	lpm	r24, Z+
 d18:	94 91       	lpm	r25, Z
 d1a:	2e 5f       	subi	r18, 0xFE	; 254
 d1c:	3f 4f       	sbci	r19, 0xFF	; 255
 d1e:	f9 01       	movw	r30, r18
 d20:	24 91       	lpm	r18, Z
 d22:	46 2f       	mov	r20, r22
 d24:	50 e0       	ldi	r21, 0x00	; 0
 d26:	7a 2f       	mov	r23, r26
 d28:	60 e0       	ldi	r22, 0x00	; 0
 d2a:	46 2b       	or	r20, r22
 d2c:	57 2b       	or	r21, r23
 d2e:	4f 3f       	cpi	r20, 0xFF	; 255
 d30:	51 05       	cpc	r21, r1
 d32:	19 f0       	breq	.+6      	; 0xd3a <__vector_12+0xd4>
 d34:	10 f0       	brcs	.+4      	; 0xd3a <__vector_12+0xd4>
 d36:	4f ef       	ldi	r20, 0xFF	; 255
 d38:	50 e0       	ldi	r21, 0x00	; 0
 d3a:	42 17       	cp	r20, r18
 d3c:	50 f4       	brcc	.+20     	; 0xd52 <__vector_12+0xec>
 d3e:	24 2f       	mov	r18, r20
 d40:	08 c0       	rjmp	.+16     	; 0xd52 <__vector_12+0xec>
 d42:	07 96       	adiw	r24, 0x07	; 7
 d44:	29 5f       	subi	r18, 0xF9	; 249
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	f0 e0       	ldi	r31, 0x00	; 0
 d4a:	8c 3a       	cpi	r24, 0xAC	; 172
 d4c:	9f 07       	cpc	r25, r31
 d4e:	99 f6       	brne	.-90     	; 0xcf6 <__vector_12+0x90>
 d50:	e5 c0       	rjmp	.+458    	; 0xf1c <__vector_12+0x2b6>
 d52:	ae ef       	ldi	r26, 0xFE	; 254
 d54:	40 91 e8 00 	lds	r20, 0x00E8
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	ba 01       	movw	r22, r20
 d5c:	65 70       	andi	r22, 0x05	; 5
 d5e:	70 70       	andi	r23, 0x00	; 0
 d60:	61 15       	cp	r22, r1
 d62:	71 05       	cpc	r23, r1
 d64:	b9 f3       	breq	.-18     	; 0xd54 <__vector_12+0xee>
 d66:	42 fd       	sbrc	r20, 2
 d68:	dc c0       	rjmp	.+440    	; 0xf22 <__vector_12+0x2bc>
 d6a:	32 2f       	mov	r19, r18
 d6c:	21 32       	cpi	r18, 0x21	; 33
 d6e:	08 f0       	brcs	.+2      	; 0xd72 <__vector_12+0x10c>
 d70:	30 e2       	ldi	r19, 0x20	; 32
 d72:	ac 01       	movw	r20, r24
 d74:	63 2f       	mov	r22, r19
 d76:	07 c0       	rjmp	.+14     	; 0xd86 <__vector_12+0x120>
 d78:	fa 01       	movw	r30, r20
 d7a:	4f 5f       	subi	r20, 0xFF	; 255
 d7c:	5f 4f       	sbci	r21, 0xFF	; 255
 d7e:	e4 91       	lpm	r30, Z
 d80:	e0 93 f1 00 	sts	0x00F1, r30
 d84:	61 50       	subi	r22, 0x01	; 1
 d86:	66 23       	and	r22, r22
 d88:	b9 f7       	brne	.-18     	; 0xd78 <__vector_12+0x112>
 d8a:	83 0f       	add	r24, r19
 d8c:	91 1d       	adc	r25, r1
 d8e:	23 1b       	sub	r18, r19
 d90:	a0 93 e8 00 	sts	0x00E8, r26
 d94:	22 23       	and	r18, r18
 d96:	f1 f6       	brne	.-68     	; 0xd54 <__vector_12+0xee>
 d98:	30 32       	cpi	r19, 0x20	; 32
 d9a:	e1 f2       	breq	.-72     	; 0xd54 <__vector_12+0xee>
 d9c:	c2 c0       	rjmp	.+388    	; 0xf22 <__vector_12+0x2bc>
 d9e:	35 30       	cpi	r19, 0x05	; 5
 da0:	49 f4       	brne	.+18     	; 0xdb4 <__vector_12+0x14e>
 da2:	8e ef       	ldi	r24, 0xFE	; 254
 da4:	80 93 e8 00 	sts	0x00E8, r24
 da8:	9c de       	rcall	.-712    	; 0xae2 <usb_wait_in_ready>
 daa:	8c 2d       	mov	r24, r12
 dac:	80 68       	ori	r24, 0x80	; 128
 dae:	80 93 e3 00 	sts	0x00E3, r24
 db2:	b7 c0       	rjmp	.+366    	; 0xf22 <__vector_12+0x2bc>
 db4:	39 30       	cpi	r19, 0x09	; 9
 db6:	31 f5       	brne	.+76     	; 0xe04 <__vector_12+0x19e>
 db8:	22 23       	and	r18, r18
 dba:	09 f0       	breq	.+2      	; 0xdbe <__vector_12+0x158>
 dbc:	69 c0       	rjmp	.+210    	; 0xe90 <__vector_12+0x22a>
 dbe:	c0 92 47 02 	sts	0x0247, r12
 dc2:	8e ef       	ldi	r24, 0xFE	; 254
 dc4:	80 93 e8 00 	sts	0x00E8, r24
 dc8:	41 e0       	ldi	r20, 0x01	; 1
 dca:	85 ea       	ldi	r24, 0xA5	; 165
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	40 93 e9 00 	sts	0x00E9, r20
 dd2:	fc 01       	movw	r30, r24
 dd4:	01 96       	adiw	r24, 0x01	; 1
 dd6:	e4 91       	lpm	r30, Z
 dd8:	e0 93 eb 00 	sts	0x00EB, r30
 ddc:	ee 23       	and	r30, r30
 dde:	69 f0       	breq	.+26     	; 0xdfa <__vector_12+0x194>
 de0:	9c 01       	movw	r18, r24
 de2:	2f 5f       	subi	r18, 0xFF	; 255
 de4:	3f 4f       	sbci	r19, 0xFF	; 255
 de6:	fc 01       	movw	r30, r24
 de8:	84 91       	lpm	r24, Z
 dea:	80 93 ec 00 	sts	0x00EC, r24
 dee:	c9 01       	movw	r24, r18
 df0:	01 96       	adiw	r24, 0x01	; 1
 df2:	f9 01       	movw	r30, r18
 df4:	24 91       	lpm	r18, Z
 df6:	20 93 ed 00 	sts	0x00ED, r18
 dfa:	4f 5f       	subi	r20, 0xFF	; 255
 dfc:	45 30       	cpi	r20, 0x05	; 5
 dfe:	39 f7       	brne	.-50     	; 0xdce <__vector_12+0x168>
 e00:	8e e1       	ldi	r24, 0x1E	; 30
 e02:	41 c0       	rjmp	.+130    	; 0xe86 <__vector_12+0x220>
 e04:	38 30       	cpi	r19, 0x08	; 8
 e06:	39 f4       	brne	.+14     	; 0xe16 <__vector_12+0x1b0>
 e08:	20 38       	cpi	r18, 0x80	; 128
 e0a:	09 f0       	breq	.+2      	; 0xe0e <__vector_12+0x1a8>
 e0c:	41 c0       	rjmp	.+130    	; 0xe90 <__vector_12+0x22a>
 e0e:	69 de       	rcall	.-814    	; 0xae2 <usb_wait_in_ready>
 e10:	80 91 47 02 	lds	r24, 0x0247
 e14:	61 c0       	rjmp	.+194    	; 0xed8 <__vector_12+0x272>
 e16:	33 23       	and	r19, r19
 e18:	a9 f4       	brne	.+42     	; 0xe44 <__vector_12+0x1de>
 e1a:	29 83       	std	Y+1, r18	; 0x01
 e1c:	62 de       	rcall	.-828    	; 0xae2 <usb_wait_in_ready>
 e1e:	29 81       	ldd	r18, Y+1	; 0x01
 e20:	22 38       	cpi	r18, 0x82	; 130
 e22:	51 f4       	brne	.+20     	; 0xe38 <__vector_12+0x1d2>
 e24:	00 93 e9 00 	sts	0x00E9, r16
 e28:	90 91 eb 00 	lds	r25, 0x00EB
 e2c:	81 e0       	ldi	r24, 0x01	; 1
 e2e:	95 ff       	sbrs	r25, 5
 e30:	80 e0       	ldi	r24, 0x00	; 0
 e32:	10 92 e9 00 	sts	0x00E9, r1
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <__vector_12+0x1d4>
 e38:	80 e0       	ldi	r24, 0x00	; 0
 e3a:	80 93 f1 00 	sts	0x00F1, r24
 e3e:	10 92 f1 00 	sts	0x00F1, r1
 e42:	68 c0       	rjmp	.+208    	; 0xf14 <__vector_12+0x2ae>
 e44:	31 30       	cpi	r19, 0x01	; 1
 e46:	11 f0       	breq	.+4      	; 0xe4c <__vector_12+0x1e6>
 e48:	33 30       	cpi	r19, 0x03	; 3
 e4a:	11 f5       	brne	.+68     	; 0xe90 <__vector_12+0x22a>
 e4c:	22 30       	cpi	r18, 0x02	; 2
 e4e:	01 f5       	brne	.+64     	; 0xe90 <__vector_12+0x22a>
 e50:	c1 14       	cp	r12, r1
 e52:	d1 04       	cpc	r13, r1
 e54:	e9 f4       	brne	.+58     	; 0xe90 <__vector_12+0x22a>
 e56:	40 2f       	mov	r20, r16
 e58:	4f 77       	andi	r20, 0x7F	; 127
 e5a:	84 2f       	mov	r24, r20
 e5c:	81 50       	subi	r24, 0x01	; 1
 e5e:	84 30       	cpi	r24, 0x04	; 4
 e60:	b8 f4       	brcc	.+46     	; 0xe90 <__vector_12+0x22a>
 e62:	8e ef       	ldi	r24, 0xFE	; 254
 e64:	80 93 e8 00 	sts	0x00E8, r24
 e68:	40 93 e9 00 	sts	0x00E9, r20
 e6c:	33 30       	cpi	r19, 0x03	; 3
 e6e:	09 f4       	brne	.+2      	; 0xe72 <__vector_12+0x20c>
 e70:	55 c0       	rjmp	.+170    	; 0xf1c <__vector_12+0x2b6>
 e72:	89 e1       	ldi	r24, 0x19	; 25
 e74:	80 93 eb 00 	sts	0x00EB, r24
 e78:	81 e0       	ldi	r24, 0x01	; 1
 e7a:	90 e0       	ldi	r25, 0x00	; 0
 e7c:	02 c0       	rjmp	.+4      	; 0xe82 <__vector_12+0x21c>
 e7e:	88 0f       	add	r24, r24
 e80:	99 1f       	adc	r25, r25
 e82:	4a 95       	dec	r20
 e84:	e2 f7       	brpl	.-8      	; 0xe7e <__vector_12+0x218>
 e86:	80 93 ea 00 	sts	0x00EA, r24
 e8a:	10 92 ea 00 	sts	0x00EA, r1
 e8e:	49 c0       	rjmp	.+146    	; 0xf22 <__vector_12+0x2bc>
 e90:	01 15       	cp	r16, r1
 e92:	11 05       	cpc	r17, r1
 e94:	09 f0       	breq	.+2      	; 0xe98 <__vector_12+0x232>
 e96:	42 c0       	rjmp	.+132    	; 0xf1c <__vector_12+0x2b6>
 e98:	21 3a       	cpi	r18, 0xA1	; 161
 e9a:	09 f5       	brne	.+66     	; 0xede <__vector_12+0x278>
 e9c:	31 30       	cpi	r19, 0x01	; 1
 e9e:	89 f4       	brne	.+34     	; 0xec2 <__vector_12+0x25c>
 ea0:	20 de       	rcall	.-960    	; 0xae2 <usb_wait_in_ready>
 ea2:	80 91 3f 02 	lds	r24, 0x023F
 ea6:	80 93 f1 00 	sts	0x00F1, r24
 eaa:	10 92 f1 00 	sts	0x00F1, r1
 eae:	e0 e4       	ldi	r30, 0x40	; 64
 eb0:	f2 e0       	ldi	r31, 0x02	; 2
 eb2:	81 91       	ld	r24, Z+
 eb4:	80 93 f1 00 	sts	0x00F1, r24
 eb8:	22 e0       	ldi	r18, 0x02	; 2
 eba:	e6 34       	cpi	r30, 0x46	; 70
 ebc:	f2 07       	cpc	r31, r18
 ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__vector_12+0x24c>
 ec0:	29 c0       	rjmp	.+82     	; 0xf14 <__vector_12+0x2ae>
 ec2:	32 30       	cpi	r19, 0x02	; 2
 ec4:	21 f4       	brne	.+8      	; 0xece <__vector_12+0x268>
 ec6:	0d de       	rcall	.-998    	; 0xae2 <usb_wait_in_ready>
 ec8:	80 91 0d 01 	lds	r24, 0x010D
 ecc:	05 c0       	rjmp	.+10     	; 0xed8 <__vector_12+0x272>
 ece:	33 30       	cpi	r19, 0x03	; 3
 ed0:	29 f5       	brne	.+74     	; 0xf1c <__vector_12+0x2b6>
 ed2:	07 de       	rcall	.-1010   	; 0xae2 <usb_wait_in_ready>
 ed4:	80 91 0e 01 	lds	r24, 0x010E
 ed8:	80 93 f1 00 	sts	0x00F1, r24
 edc:	1b c0       	rjmp	.+54     	; 0xf14 <__vector_12+0x2ae>
 ede:	21 32       	cpi	r18, 0x21	; 33
 ee0:	e9 f4       	brne	.+58     	; 0xf1c <__vector_12+0x2b6>
 ee2:	39 30       	cpi	r19, 0x09	; 9
 ee4:	61 f4       	brne	.+24     	; 0xefe <__vector_12+0x298>
 ee6:	80 91 e8 00 	lds	r24, 0x00E8
 eea:	82 ff       	sbrs	r24, 2
 eec:	fc cf       	rjmp	.-8      	; 0xee6 <__vector_12+0x280>
 eee:	80 91 f1 00 	lds	r24, 0x00F1
 ef2:	80 93 46 02 	sts	0x0246, r24
 ef6:	8b ef       	ldi	r24, 0xFB	; 251
 ef8:	80 93 e8 00 	sts	0x00E8, r24
 efc:	0b c0       	rjmp	.+22     	; 0xf14 <__vector_12+0x2ae>
 efe:	3a 30       	cpi	r19, 0x0A	; 10
 f00:	29 f4       	brne	.+10     	; 0xf0c <__vector_12+0x2a6>
 f02:	d0 92 0d 01 	sts	0x010D, r13
 f06:	10 92 48 02 	sts	0x0248, r1
 f0a:	04 c0       	rjmp	.+8      	; 0xf14 <__vector_12+0x2ae>
 f0c:	3b 30       	cpi	r19, 0x0B	; 11
 f0e:	31 f4       	brne	.+12     	; 0xf1c <__vector_12+0x2b6>
 f10:	c0 92 0e 01 	sts	0x010E, r12
 f14:	8e ef       	ldi	r24, 0xFE	; 254
 f16:	80 93 e8 00 	sts	0x00E8, r24
 f1a:	03 c0       	rjmp	.+6      	; 0xf22 <__vector_12+0x2bc>
 f1c:	81 e2       	ldi	r24, 0x21	; 33
 f1e:	80 93 eb 00 	sts	0x00EB, r24
 f22:	0f 90       	pop	r0
 f24:	cf 91       	pop	r28
 f26:	df 91       	pop	r29
 f28:	ff 91       	pop	r31
 f2a:	ef 91       	pop	r30
 f2c:	bf 91       	pop	r27
 f2e:	af 91       	pop	r26
 f30:	9f 91       	pop	r25
 f32:	8f 91       	pop	r24
 f34:	7f 91       	pop	r23
 f36:	6f 91       	pop	r22
 f38:	5f 91       	pop	r21
 f3a:	4f 91       	pop	r20
 f3c:	3f 91       	pop	r19
 f3e:	2f 91       	pop	r18
 f40:	1f 91       	pop	r17
 f42:	0f 91       	pop	r16
 f44:	ff 90       	pop	r15
 f46:	ef 90       	pop	r14
 f48:	df 90       	pop	r13
 f4a:	cf 90       	pop	r12
 f4c:	0f 90       	pop	r0
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	0f 90       	pop	r0
 f52:	1f 90       	pop	r1
 f54:	18 95       	reti

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
