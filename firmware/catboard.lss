
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  0000106a  000010fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800232  00800232  00001230  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000029c  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001053  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a9  00000000  00000000  00002cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001378  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000553  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bc8  00000000  00000000  00004bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000d1  00000000  00000000  0000577b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  0000584c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	45 c6       	rjmp	.+3210   	; 0xcb8 <__vector_11>
      2e:	00 00       	nop
      30:	a2 c6       	rjmp	.+3396   	; 0xd76 <__vector_12>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop

00000074 <descriptor_list>:
      74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
      84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
      94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
      a4:	12                                                  .

000000a5 <endpoint_config_table>:
      a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
      ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
      bb:	00 01                                               ..

000000bd <config1_descriptor>:
      bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
      dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
      df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
      ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
      ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
     10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
     11e:	04 03 09 04                                         ....

00000122 <string1>:
     122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
     132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
     142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
     146:	11 24       	eor	r1, r1
     148:	1f be       	out	0x3f, r1	; 63
     14a:	cf ef       	ldi	r28, 0xFF	; 255
     14c:	d2 e0       	ldi	r29, 0x02	; 2
     14e:	de bf       	out	0x3e, r29	; 62
     150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
     152:	12 e0       	ldi	r17, 0x02	; 2
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	ea e6       	ldi	r30, 0x6A	; 106
     15a:	f0 e1       	ldi	r31, 0x10	; 16
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
     15e:	05 90       	lpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	a2 33       	cpi	r26, 0x32	; 50
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
     168:	12 e0       	ldi	r17, 0x02	; 2
     16a:	a2 e3       	ldi	r26, 0x32	; 50
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a6 38       	cpi	r26, 0x86	; 134
     174:	b1 07       	cpc	r27, r17
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	25 d5       	rcall	.+2634   	; 0xbc4 <main>
     17a:	75 c7       	rjmp	.+3818   	; 0x1066 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <caps_lock_change_layer>:
	repeat_tick();
	_delay_ms(5);
}

void caps_lock_change_layer() {
	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
     17e:	20 91 46 02 	lds	r18, 0x0246
     182:	22 70       	andi	r18, 0x02	; 2
     184:	20 93 32 02 	sts	0x0232, r18
     188:	80 91 24 02 	lds	r24, 0x0224
     18c:	90 91 25 02 	lds	r25, 0x0225
	if ((caps_lock_led) && (layout != layer1)) {
     190:	22 23       	and	r18, r18
     192:	c9 f0       	breq	.+50     	; 0x1c6 <caps_lock_change_layer+0x48>
     194:	2f e6       	ldi	r18, 0x6F	; 111
     196:	31 e0       	ldi	r19, 0x01	; 1
     198:	82 17       	cp	r24, r18
     19a:	93 07       	cpc	r25, r19
     19c:	59 f1       	breq	.+86     	; 0x1f4 <caps_lock_change_layer+0x76>
		if (layout==layer_fn) {
     19e:	41 e0       	ldi	r20, 0x01	; 1
     1a0:	8b 3a       	cpi	r24, 0xAB	; 171
     1a2:	94 07       	cpc	r25, r20
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <caps_lock_change_layer+0x32>
			prev_layer = layer1;
     1a6:	30 93 35 02 	sts	0x0235, r19
     1aa:	20 93 34 02 	sts	0x0234, r18
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <caps_lock_change_layer+0x3a>
		} else {
			layout = layer1;
     1b0:	30 93 25 02 	sts	0x0225, r19
     1b4:	20 93 24 02 	sts	0x0224, r18
		}
		LED_RED_OFF;
     1b8:	46 9a       	sbi	0x08, 6	; 8
		if (led) LED_BLUE_ON;
     1ba:	80 91 2e 02 	lds	r24, 0x022E
     1be:	88 23       	and	r24, r24
     1c0:	c9 f0       	breq	.+50     	; 0x1f4 <caps_lock_change_layer+0x76>
     1c2:	59 9a       	sbi	0x0b, 1	; 11
     1c4:	08 95       	ret
	} else if ((! caps_lock_led) && (layout != layer2)) {
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	31 e0       	ldi	r19, 0x01	; 1
     1ca:	82 17       	cp	r24, r18
     1cc:	93 07       	cpc	r25, r19
     1ce:	91 f0       	breq	.+36     	; 0x1f4 <caps_lock_change_layer+0x76>
		if (layout==layer_fn) {
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	8b 3a       	cpi	r24, 0xAB	; 171
     1d4:	94 07       	cpc	r25, r20
     1d6:	29 f4       	brne	.+10     	; 0x1e2 <caps_lock_change_layer+0x64>
			prev_layer = layer2;
     1d8:	30 93 35 02 	sts	0x0235, r19
     1dc:	20 93 34 02 	sts	0x0234, r18
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <caps_lock_change_layer+0x6c>
		} else {
			layout = layer2;
     1e2:	30 93 25 02 	sts	0x0225, r19
     1e6:	20 93 24 02 	sts	0x0224, r18
		}
		LED_BLUE_OFF;
     1ea:	59 98       	cbi	0x0b, 1	; 11
		if (led) LED_RED_ON;
     1ec:	80 91 2e 02 	lds	r24, 0x022E
     1f0:	81 11       	cpse	r24, r1
     1f2:	46 98       	cbi	0x08, 6	; 8
     1f4:	08 95       	ret

000001f6 <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
     1f6:	80 91 23 02 	lds	r24, 0x0223
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	91 f4       	brne	.+36     	; 0x222 <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	80 93 3f 02 	sts	0x023F, r24
		keyboard_keys[0] = 0;
     204:	10 92 40 02 	sts	0x0240, r1
		usb_keyboard_send();
     208:	10 d5       	rcall	.+2592   	; 0xc2a <usb_keyboard_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	90 e7       	ldi	r25, 0x70	; 112
     20e:	a2 e0       	ldi	r26, 0x02	; 2
     210:	81 50       	subi	r24, 0x01	; 1
     212:	90 40       	sbci	r25, 0x00	; 0
     214:	a0 40       	sbci	r26, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <change_layout+0x1a>
     218:	00 c0       	rjmp	.+0      	; 0x21a <change_layout+0x24>
     21a:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
     21c:	8c e2       	ldi	r24, 0x2C	; 44
     21e:	68 e0       	ldi	r22, 0x08	; 8
     220:	11 c0       	rjmp	.+34     	; 0x244 <change_layout+0x4e>
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	80 93 3f 02 	sts	0x023F, r24
		keyboard_keys[0] = 0;
     228:	10 92 40 02 	sts	0x0240, r1
		usb_keyboard_send();
     22c:	fe d4       	rcall	.+2556   	; 0xc2a <usb_keyboard_send>
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	90 e7       	ldi	r25, 0x70	; 112
     232:	a2 e0       	ldi	r26, 0x02	; 2
     234:	81 50       	subi	r24, 0x01	; 1
     236:	90 40       	sbci	r25, 0x00	; 0
     238:	a0 40       	sbci	r26, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <change_layout+0x3e>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <change_layout+0x48>
     23e:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	66 e0       	ldi	r22, 0x06	; 6
     244:	2c c5       	rjmp	.+2648   	; 0xc9e <usb_keyboard_press>

00000246 <init_ports>:

#define FN_KEY_ID			7*5+4

// Init ports
void init_ports(void) {
	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
     246:	8a e4       	ldi	r24, 0x4A	; 74
     248:	84 b9       	out	0x04, r24	; 4
     24a:	80 e2       	ldi	r24, 0x20	; 32
     24c:	87 b9       	out	0x07, r24	; 7
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	85 b9       	out	0x05, r24	; 5
     256:	88 b9       	out	0x08, r24	; 8
     258:	8b b9       	out	0x0b, r24	; 11
}
     25a:	08 95       	ret

0000025c <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	80 93 61 00 	sts	0x0061, r24
     262:	10 92 61 00 	sts	0x0061, r1

	init_ports();
     266:	ef df       	rcall	.-34     	; 0x246 <init_ports>

	LED_CONFIG;
     268:	56 9a       	sbi	0x0a, 6	; 10
	LED_RED_CONFIG;
     26a:	3e 9a       	sbi	0x07, 6	; 7
	LED_BLUE_CONFIG;
     26c:	51 9a       	sbi	0x0a, 1	; 10

	LED_RED_OFF;
     26e:	46 9a       	sbi	0x08, 6	; 8
	LED_BLUE_OFF;
     270:	59 98       	cbi	0x0b, 1	; 11
	if (led) LED_ON;
     272:	80 91 2e 02 	lds	r24, 0x022E
     276:	81 11       	cpse	r24, r1
     278:	5e 98       	cbi	0x0b, 6	; 11
     27a:	ea e4       	ldi	r30, 0x4A	; 74
     27c:	f2 e0       	ldi	r31, 0x02	; 2

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
     27e:	11 92       	st	Z+, r1

	LED_RED_OFF;
	LED_BLUE_OFF;
	if (led) LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	e6 38       	cpi	r30, 0x86	; 134
     284:	f8 07       	cpc	r31, r24
     286:	d9 f7       	brne	.-10     	; 0x27e <init+0x22>
		pressed[i] = 0;
	}

	usb_init();
     288:	b9 d4       	rcall	.+2418   	; 0xbfc <usb_init>
	while(!usb_configured());
     28a:	cc d4       	rcall	.+2456   	; 0xc24 <usb_configured>
     28c:	88 23       	and	r24, r24
     28e:	e9 f3       	breq	.-6      	; 0x28a <init+0x2e>
	LED_OFF;
     290:	5e 9a       	sbi	0x0b, 6	; 11
	if (led) LED_RED_ON;
     292:	80 91 2e 02 	lds	r24, 0x022E
     296:	81 11       	cpse	r24, r1
     298:	46 98       	cbi	0x08, 6	; 8
	caps_lock_led = keyboard_leds;
     29a:	80 91 46 02 	lds	r24, 0x0246
     29e:	80 93 32 02 	sts	0x0232, r24
}
     2a2:	08 95       	ret

000002a4 <get_code>:
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
     2a4:	8c 33       	cpi	r24, 0x3C	; 60
     2a6:	18 f5       	brcc	.+70     	; 0x2ee <get_code+0x4a>
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
     2a8:	28 2f       	mov	r18, r24
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	e6 5b       	subi	r30, 0xB6	; 182
     2b0:	fd 4f       	sbci	r31, 0xFD	; 253
     2b2:	90 81       	ld	r25, Z
     2b4:	91 30       	cpi	r25, 0x01	; 1
     2b6:	41 f4       	brne	.+16     	; 0x2c8 <get_code+0x24>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
     2b8:	25 55       	subi	r18, 0x55	; 85
     2ba:	3e 4f       	sbci	r19, 0xFE	; 254
     2bc:	f9 01       	movw	r30, r18
     2be:	80 81       	ld	r24, Z
     2c0:	18 16       	cp	r1, r24
     2c2:	b4 f0       	brlt	.+44     	; 0x2f0 <get_code+0x4c>
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	08 95       	ret
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
     2c8:	40 91 24 02 	lds	r20, 0x0224
     2cc:	50 91 25 02 	lds	r21, 0x0225
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	4b 3a       	cpi	r20, 0xAB	; 171
     2d4:	5f 07       	cpc	r21, r31
     2d6:	31 f0       	breq	.+12     	; 0x2e4 <get_code+0x40>
     2d8:	92 30       	cpi	r25, 0x02	; 2
     2da:	21 f4       	brne	.+8      	; 0x2e4 <get_code+0x40>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
     2dc:	21 59       	subi	r18, 0x91	; 145
     2de:	3e 4f       	sbci	r19, 0xFE	; 254
     2e0:	f9 01       	movw	r30, r18
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <get_code+0x46>
		} else {
			key_code = layout[key_id];
     2e4:	48 0f       	add	r20, r24
     2e6:	51 1d       	adc	r21, r1
     2e8:	fa 01       	movw	r30, r20
     2ea:	80 81       	ld	r24, Z
     2ec:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
     2f0:	08 95       	ret

000002f2 <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	c6 e2       	ldi	r28, 0x26	; 38
     2fc:	d2 e0       	ldi	r29, 0x02	; 2
     2fe:	00 e4       	ldi	r16, 0x40	; 64
     300:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
     302:	89 91       	ld	r24, Y+
     304:	cf df       	rcall	.-98     	; 0x2a4 <get_code>
     306:	f8 01       	movw	r30, r16
     308:	81 93       	st	Z+, r24
     30a:	8f 01       	movw	r16, r30
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	cc 32       	cpi	r28, 0x2C	; 44
     310:	df 07       	cpc	r29, r31
     312:	b9 f7       	brne	.-18     	; 0x302 <__stack+0x3>
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
     314:	80 91 33 02 	lds	r24, 0x0233
     318:	80 93 3f 02 	sts	0x023F, r24
	usb_keyboard_send();
     31c:	86 d4       	rcall	.+2316   	; 0xc2a <usb_keyboard_send>
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <key_release>:
		release_time = 0;
		repeat_time = 0;
	}
}

void key_release(uint8_t key_id) {
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	08 2f       	mov	r16, r24
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	e6 5b       	subi	r30, 0xB6	; 182
     336:	fd 4f       	sbci	r31, 0xFD	; 253
     338:	10 81       	ld	r17, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
     33a:	11 30       	cpi	r17, 0x01	; 1
     33c:	21 f4       	brne	.+8      	; 0x346 <key_release+0x1e>
     33e:	f9 01       	movw	r30, r18
     340:	e5 55       	subi	r30, 0x55	; 85
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	13 c0       	rjmp	.+38     	; 0x36c <key_release+0x44>
     346:	e0 91 24 02 	lds	r30, 0x0224
     34a:	f0 91 25 02 	lds	r31, 0x0225
     34e:	e2 0f       	add	r30, r18
     350:	f3 1f       	adc	r31, r19
     352:	80 81       	ld	r24, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
     354:	16 30       	cpi	r17, 0x06	; 6
     356:	59 f4       	brne	.+22     	; 0x36e <key_release+0x46>
     358:	40 91 34 02 	lds	r20, 0x0234
     35c:	50 91 35 02 	lds	r21, 0x0235
     360:	41 15       	cp	r20, r1
     362:	51 05       	cpc	r21, r1
     364:	21 f0       	breq	.+8      	; 0x36e <key_release+0x46>
		key_code = prev_layer[key_id];
     366:	42 0f       	add	r20, r18
     368:	53 1f       	adc	r21, r19
     36a:	fa 01       	movw	r30, r20
     36c:	80 81       	ld	r24, Z
	}
	pressed[key_id] = 0;
     36e:	26 5b       	subi	r18, 0xB6	; 182
     370:	3d 4f       	sbci	r19, 0xFD	; 253
     372:	f9 01       	movw	r30, r18
     374:	10 82       	st	Z, r1
	if (locked) return;
     376:	90 91 36 02 	lds	r25, 0x0236
     37a:	99 23       	and	r25, r25
     37c:	09 f0       	breq	.+2      	; 0x380 <key_release+0x58>
     37e:	30 c1       	rjmp	.+608    	; 0x5e0 <key_release+0x2b8>
	if (key_code>=KEY_CB_START) { // Catboard keys release
     380:	8d 36       	cpi	r24, 0x6D	; 109
     382:	08 f4       	brcc	.+2      	; 0x386 <key_release+0x5e>
     384:	ac c0       	rjmp	.+344    	; 0x4de <key_release+0x1b6>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
     386:	8d 37       	cpi	r24, 0x7D	; 125
     388:	49 f4       	brne	.+18     	; 0x39c <key_release+0x74>
     38a:	13 30       	cpi	r17, 0x03	; 3
     38c:	09 f4       	brne	.+2      	; 0x390 <key_release+0x68>
     38e:	28 c1       	rjmp	.+592    	; 0x5e0 <key_release+0x2b8>
			mod_keys &= ~(KEY_ALT);
     390:	80 91 33 02 	lds	r24, 0x0233
     394:	8b 7f       	andi	r24, 0xFB	; 251
     396:	80 93 33 02 	sts	0x0233, r24
     39a:	0a c0       	rjmp	.+20     	; 0x3b0 <key_release+0x88>
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
     39c:	8d 36       	cpi	r24, 0x6D	; 109
     39e:	09 f0       	breq	.+2      	; 0x3a2 <key_release+0x7a>
     3a0:	41 c0       	rjmp	.+130    	; 0x424 <key_release+0xfc>
     3a2:	90 91 33 02 	lds	r25, 0x0233
     3a6:	15 30       	cpi	r17, 0x05	; 5
     3a8:	29 f4       	brne	.+10     	; 0x3b4 <key_release+0x8c>
			mod_keys &= ~(KEY_CTRL);
     3aa:	9e 7f       	andi	r25, 0xFE	; 254
     3ac:	90 93 33 02 	sts	0x0233, r25
			send();
     3b0:	a0 df       	rcall	.-192    	; 0x2f2 <send>
     3b2:	16 c1       	rjmp	.+556    	; 0x5e0 <key_release+0x2b8>
		} else if (key_code==KEY_LAYER1) { // LAYER1
			mod_keys &= ~(KEY_SHIFT);
     3b4:	9d 7f       	andi	r25, 0xFD	; 253
     3b6:	90 93 33 02 	sts	0x0233, r25
			send();
     3ba:	9b df       	rcall	.-202    	; 0x2f2 <send>
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
     3bc:	80 91 2f 02 	lds	r24, 0x022F
     3c0:	80 17       	cp	r24, r16
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <key_release+0x9e>
     3c4:	88 c0       	rjmp	.+272    	; 0x4d6 <key_release+0x1ae>
     3c6:	80 91 37 02 	lds	r24, 0x0237
     3ca:	90 91 38 02 	lds	r25, 0x0238
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <key_release+0xac>
     3d2:	81 c0       	rjmp	.+258    	; 0x4d6 <key_release+0x1ae>
     3d4:	82 33       	cpi	r24, 0x32	; 50
     3d6:	91 05       	cpc	r25, r1
     3d8:	08 f0       	brcs	.+2      	; 0x3dc <key_release+0xb4>
     3da:	7d c0       	rjmp	.+250    	; 0x4d6 <key_release+0x1ae>
     3dc:	14 30       	cpi	r17, 0x04	; 4
     3de:	09 f4       	brne	.+2      	; 0x3e2 <key_release+0xba>
     3e0:	7a c0       	rjmp	.+244    	; 0x4d6 <key_release+0x1ae>
				if (layout!=layer1) {
     3e2:	20 91 24 02 	lds	r18, 0x0224
     3e6:	30 91 25 02 	lds	r19, 0x0225
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	2f 36       	cpi	r18, 0x6F	; 111
     3ee:	3f 07       	cpc	r19, r31
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <key_release+0xcc>
     3f2:	71 c0       	rjmp	.+226    	; 0x4d6 <key_release+0x1ae>
     3f4:	8f e6       	ldi	r24, 0x6F	; 111
     3f6:	91 e0       	ldi	r25, 0x01	; 1
					if (layout==layer_fn) {
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	2b 3a       	cpi	r18, 0xAB	; 171
     3fc:	34 07       	cpc	r19, r20
     3fe:	29 f4       	brne	.+10     	; 0x40a <key_release+0xe2>
						prev_layer = layer1;
     400:	90 93 35 02 	sts	0x0235, r25
     404:	80 93 34 02 	sts	0x0234, r24
     408:	04 c0       	rjmp	.+8      	; 0x412 <key_release+0xea>
					} else {
						layout = layer1;
     40a:	90 93 25 02 	sts	0x0225, r25
     40e:	80 93 24 02 	sts	0x0224, r24
					}
					change_layout();
     412:	f1 de       	rcall	.-542    	; 0x1f6 <change_layout>
					//LED_ON;
					LED_RED_OFF;
     414:	46 9a       	sbi	0x08, 6	; 8
					if (led) LED_BLUE_ON;
     416:	80 91 2e 02 	lds	r24, 0x022E
     41a:	88 23       	and	r24, r24
     41c:	09 f4       	brne	.+2      	; 0x420 <key_release+0xf8>
     41e:	5b c0       	rjmp	.+182    	; 0x4d6 <key_release+0x1ae>
     420:	59 9a       	sbi	0x0b, 1	; 11
     422:	59 c0       	rjmp	.+178    	; 0x4d6 <key_release+0x1ae>
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_LAYER2) { // LAYER2
     424:	8e 36       	cpi	r24, 0x6E	; 110
     426:	c1 f5       	brne	.+112    	; 0x498 <key_release+0x170>
			mod_keys &= ~(KEY_RIGHT_SHIFT);
     428:	80 91 33 02 	lds	r24, 0x0233
     42c:	8f 7d       	andi	r24, 0xDF	; 223
     42e:	80 93 33 02 	sts	0x0233, r24
			send();
     432:	5f df       	rcall	.-322    	; 0x2f2 <send>
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
     434:	80 91 2f 02 	lds	r24, 0x022F
     438:	80 17       	cp	r24, r16
     43a:	09 f0       	breq	.+2      	; 0x43e <key_release+0x116>
     43c:	4c c0       	rjmp	.+152    	; 0x4d6 <key_release+0x1ae>
     43e:	80 91 37 02 	lds	r24, 0x0237
     442:	90 91 38 02 	lds	r25, 0x0238
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	09 f4       	brne	.+2      	; 0x44c <key_release+0x124>
     44a:	45 c0       	rjmp	.+138    	; 0x4d6 <key_release+0x1ae>
     44c:	82 33       	cpi	r24, 0x32	; 50
     44e:	91 05       	cpc	r25, r1
     450:	08 f0       	brcs	.+2      	; 0x454 <key_release+0x12c>
     452:	41 c0       	rjmp	.+130    	; 0x4d6 <key_release+0x1ae>
     454:	14 30       	cpi	r17, 0x04	; 4
     456:	09 f4       	brne	.+2      	; 0x45a <key_release+0x132>
     458:	3e c0       	rjmp	.+124    	; 0x4d6 <key_release+0x1ae>
				if (layout!=layer2) {
     45a:	20 91 24 02 	lds	r18, 0x0224
     45e:	30 91 25 02 	lds	r19, 0x0225
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	20 30       	cpi	r18, 0x00	; 0
     466:	38 07       	cpc	r19, r24
     468:	b1 f1       	breq	.+108    	; 0x4d6 <key_release+0x1ae>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
					if (layout==layer_fn) {
     46e:	e1 e0       	ldi	r30, 0x01	; 1
     470:	2b 3a       	cpi	r18, 0xAB	; 171
     472:	3e 07       	cpc	r19, r30
     474:	29 f4       	brne	.+10     	; 0x480 <key_release+0x158>
						prev_layer = layer2;
     476:	90 93 35 02 	sts	0x0235, r25
     47a:	80 93 34 02 	sts	0x0234, r24
     47e:	04 c0       	rjmp	.+8      	; 0x488 <key_release+0x160>
					} else {
						layout = layer2;
     480:	90 93 25 02 	sts	0x0225, r25
     484:	80 93 24 02 	sts	0x0224, r24
					}
					change_layout();
     488:	b6 de       	rcall	.-660    	; 0x1f6 <change_layout>
					//LED_OFF;
					LED_BLUE_OFF;
     48a:	59 98       	cbi	0x0b, 1	; 11
					if (led) LED_RED_ON;
     48c:	80 91 2e 02 	lds	r24, 0x022E
     490:	88 23       	and	r24, r24
     492:	09 f1       	breq	.+66     	; 0x4d6 <key_release+0x1ae>
     494:	46 98       	cbi	0x08, 6	; 8
     496:	1f c0       	rjmp	.+62     	; 0x4d6 <key_release+0x1ae>
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
     498:	87 37       	cpi	r24, 0x77	; 119
     49a:	09 f0       	breq	.+2      	; 0x49e <key_release+0x176>
     49c:	a1 c0       	rjmp	.+322    	; 0x5e0 <key_release+0x2b8>
			mod_keys &= ~KEY_SHIFT;
     49e:	80 91 33 02 	lds	r24, 0x0233
     4a2:	8d 7f       	andi	r24, 0xFD	; 253
     4a4:	80 93 33 02 	sts	0x0233, r24
			send();
     4a8:	24 df       	rcall	.-440    	; 0x2f2 <send>
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
     4aa:	80 91 2f 02 	lds	r24, 0x022F
     4ae:	80 17       	cp	r24, r16
     4b0:	91 f4       	brne	.+36     	; 0x4d6 <key_release+0x1ae>
     4b2:	80 91 37 02 	lds	r24, 0x0237
     4b6:	90 91 38 02 	lds	r25, 0x0238
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	61 f0       	breq	.+24     	; 0x4d6 <key_release+0x1ae>
     4be:	82 33       	cpi	r24, 0x32	; 50
     4c0:	91 05       	cpc	r25, r1
     4c2:	48 f4       	brcc	.+18     	; 0x4d6 <key_release+0x1ae>
     4c4:	12 30       	cpi	r17, 0x02	; 2
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <key_release+0x1ae>
     4c8:	80 91 33 02 	lds	r24, 0x0233
     4cc:	88 23       	and	r24, r24
     4ce:	19 f4       	brne	.+6      	; 0x4d6 <key_release+0x1ae>
				usb_keyboard_press(KEY_SPACE, mod_keys);
     4d0:	8c e2       	ldi	r24, 0x2C	; 44
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	e4 d3       	rcall	.+1992   	; 0xc9e <usb_keyboard_press>
			}
			last_key = 0xFF;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	80 93 2f 02 	sts	0x022F, r24
     4dc:	71 c0       	rjmp	.+226    	; 0x5c0 <key_release+0x298>
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
     4de:	85 36       	cpi	r24, 0x65	; 101
     4e0:	08 f4       	brcc	.+2      	; 0x4e4 <key_release+0x1bc>
     4e2:	4b c0       	rjmp	.+150    	; 0x57a <key_release+0x252>
		if (os_mode==2 && key_code==KEY_LCTRL) {
     4e4:	90 91 23 02 	lds	r25, 0x0223
     4e8:	92 30       	cpi	r25, 0x02	; 2
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <key_release+0x1cc>
     4ec:	85 36       	cpi	r24, 0x65	; 101
     4ee:	f1 f0       	breq	.+60     	; 0x52c <key_release+0x204>
			mod_keys &= ~KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
     4f0:	89 36       	cpi	r24, 0x69	; 105
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <key_release+0x1d0>
     4f4:	8c 36       	cpi	r24, 0x6C	; 108
     4f6:	31 f4       	brne	.+12     	; 0x504 <key_release+0x1dc>
			mod_keys &= ~KEY_RIGHT_GUI;
     4f8:	80 91 33 02 	lds	r24, 0x0233
     4fc:	8f 77       	andi	r24, 0x7F	; 127
     4fe:	80 93 33 02 	sts	0x0233, r24
     502:	27 c0       	rjmp	.+78     	; 0x552 <key_release+0x22a>
		} else if (key_code==KEY_LCTRL) {
     504:	85 36       	cpi	r24, 0x65	; 101
     506:	21 f4       	brne	.+8      	; 0x510 <key_release+0x1e8>
			mod_keys &= ~KEY_CTRL;
     508:	80 91 33 02 	lds	r24, 0x0233
     50c:	8e 7f       	andi	r24, 0xFE	; 254
     50e:	f7 cf       	rjmp	.-18     	; 0x4fe <key_release+0x1d6>
		} else if (key_code==KEY_LSHIFT) {
     510:	86 36       	cpi	r24, 0x66	; 102
     512:	21 f4       	brne	.+8      	; 0x51c <key_release+0x1f4>
			mod_keys &= ~KEY_SHIFT;
     514:	80 91 33 02 	lds	r24, 0x0233
     518:	8d 7f       	andi	r24, 0xFD	; 253
     51a:	f1 cf       	rjmp	.-30     	; 0x4fe <key_release+0x1d6>
		} else if (key_code==KEY_LALT) {
     51c:	87 36       	cpi	r24, 0x67	; 103
     51e:	21 f4       	brne	.+8      	; 0x528 <key_release+0x200>
			mod_keys &= ~KEY_ALT;
     520:	80 91 33 02 	lds	r24, 0x0233
     524:	8b 7f       	andi	r24, 0xFB	; 251
     526:	eb cf       	rjmp	.-42     	; 0x4fe <key_release+0x1d6>
		} else if (key_code==KEY_LGUI) {
     528:	88 36       	cpi	r24, 0x68	; 104
     52a:	21 f4       	brne	.+8      	; 0x534 <key_release+0x20c>
			mod_keys &= ~KEY_GUI;
     52c:	80 91 33 02 	lds	r24, 0x0233
     530:	87 7f       	andi	r24, 0xF7	; 247
     532:	e5 cf       	rjmp	.-54     	; 0x4fe <key_release+0x1d6>
		} else if (key_code==KEY_RCTRL) {
     534:	89 36       	cpi	r24, 0x69	; 105
     536:	21 f4       	brne	.+8      	; 0x540 <key_release+0x218>
			mod_keys &= ~KEY_RIGHT_CTRL;
     538:	80 91 33 02 	lds	r24, 0x0233
     53c:	8f 7e       	andi	r24, 0xEF	; 239
     53e:	df cf       	rjmp	.-66     	; 0x4fe <key_release+0x1d6>
     540:	90 91 33 02 	lds	r25, 0x0233
		} else if (key_code==KEY_RSHIFT) {
     544:	8a 36       	cpi	r24, 0x6A	; 106
     546:	11 f4       	brne	.+4      	; 0x54c <key_release+0x224>
			mod_keys &= ~KEY_RIGHT_SHIFT;
     548:	9f 7d       	andi	r25, 0xDF	; 223
     54a:	01 c0       	rjmp	.+2      	; 0x54e <key_release+0x226>
		} else if (key_code==KEY_RALT) {
			mod_keys &= ~KEY_RIGHT_ALT;
     54c:	9f 7b       	andi	r25, 0xBF	; 191
     54e:	90 93 33 02 	sts	0x0233, r25
		} else if (key_code==KEY_RGUI) {
			mod_keys &= ~KEY_RIGHT_GUI;
		}
		send();
     552:	cf de       	rcall	.-610    	; 0x2f2 <send>
		press_time = 0;
     554:	10 92 38 02 	sts	0x0238, r1
     558:	10 92 37 02 	sts	0x0237, r1
		press_time2 = 0;
     55c:	10 92 3a 02 	sts	0x023A, r1
     560:	10 92 39 02 	sts	0x0239, r1
		release_time = 0;
     564:	10 92 3c 02 	sts	0x023C, r1
     568:	10 92 3b 02 	sts	0x023B, r1
		repeat_time = 0;
     56c:	10 92 3e 02 	sts	0x023E, r1
     570:	10 92 3d 02 	sts	0x023D, r1
		last_key = 0;
     574:	10 92 2f 02 	sts	0x022F, r1
     578:	33 c0       	rjmp	.+102    	; 0x5e0 <key_release+0x2b8>
     57a:	e6 e2       	ldi	r30, 0x26	; 38
     57c:	f2 e0       	ldi	r31, 0x02	; 2
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
     57e:	80 e0       	ldi	r24, 0x00	; 0
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
     580:	91 91       	ld	r25, Z+
     582:	90 17       	cp	r25, r16
     584:	59 f0       	breq	.+22     	; 0x59c <key_release+0x274>
		press_time2 = 0;
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	86 30       	cpi	r24, 0x06	; 6
     58a:	d1 f7       	brne	.-12     	; 0x580 <key_release+0x258>
     58c:	07 c0       	rjmp	.+14     	; 0x59c <key_release+0x274>
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
     58e:	e8 2f       	mov	r30, r24
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ea 5d       	subi	r30, 0xDA	; 218
     594:	fd 4f       	sbci	r31, 0xFD	; 253
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	90 83       	st	Z, r25
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	86 30       	cpi	r24, 0x06	; 6
     59e:	b8 f3       	brcs	.-18     	; 0x58e <key_release+0x266>
			queue[i] = queue[i+1];
		}
		send();
     5a0:	a8 de       	rcall	.-688    	; 0x2f2 <send>
		// Autorepeat
		if (last_key==key_id) { // realise time
     5a2:	80 91 2f 02 	lds	r24, 0x022F
     5a6:	80 17       	cp	r24, r16
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <key_release+0x298>
			press_time2 = 0;
     5aa:	10 92 3a 02 	sts	0x023A, r1
     5ae:	10 92 39 02 	sts	0x0239, r1
			release_time = 1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	90 93 3c 02 	sts	0x023C, r25
     5ba:	80 93 3b 02 	sts	0x023B, r24
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <key_release+0x2b0>
			repeat_time = 0;
		} else { // reset
			press_time = 0;
     5c0:	10 92 38 02 	sts	0x0238, r1
     5c4:	10 92 37 02 	sts	0x0237, r1
			press_time2 = 0;
     5c8:	10 92 3a 02 	sts	0x023A, r1
     5cc:	10 92 39 02 	sts	0x0239, r1
			release_time = 0;
     5d0:	10 92 3c 02 	sts	0x023C, r1
     5d4:	10 92 3b 02 	sts	0x023B, r1
			repeat_time = 0;
     5d8:	10 92 3e 02 	sts	0x023E, r1
     5dc:	10 92 3d 02 	sts	0x023D, r1
		}
	}
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
     5e6:	1f 93       	push	r17
     5e8:	18 2f       	mov	r17, r24
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
     5ea:	70 91 33 02 	lds	r23, 0x0233
     5ee:	97 2f       	mov	r25, r23
     5f0:	9d 7d       	andi	r25, 0xDD	; 221
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
     5f2:	28 2f       	mov	r18, r24
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	80 91 71 02 	lds	r24, 0x0271
     5fa:	88 23       	and	r24, r24
     5fc:	21 f4       	brne	.+8      	; 0x606 <key_press+0x20>
     5fe:	99 23       	and	r25, r25
     600:	21 f0       	breq	.+8      	; 0x60a <key_press+0x24>
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	03 c0       	rjmp	.+6      	; 0x60c <key_press+0x26>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	01 c0       	rjmp	.+2      	; 0x60c <key_press+0x26>
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	f9 01       	movw	r30, r18
     60e:	e6 5b       	subi	r30, 0xB6	; 182
     610:	fd 4f       	sbci	r31, 0xFD	; 253
     612:	80 83       	st	Z, r24
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	21 f4       	brne	.+8      	; 0x620 <key_press+0x3a>
     618:	f9 01       	movw	r30, r18
     61a:	e5 55       	subi	r30, 0x55	; 85
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	06 c0       	rjmp	.+12     	; 0x62c <key_press+0x46>
     620:	e0 91 24 02 	lds	r30, 0x0224
     624:	f0 91 25 02 	lds	r31, 0x0225
     628:	e1 0f       	add	r30, r17
     62a:	f1 1d       	adc	r31, r1
     62c:	60 81       	ld	r22, Z
	if (key_code==NULL) {
     62e:	66 23       	and	r22, r22
     630:	11 f5       	brne	.+68     	; 0x676 <key_press+0x90>
		key_code = layout[key_id];
     632:	41 2f       	mov	r20, r17
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	e0 91 24 02 	lds	r30, 0x0224
     63a:	f0 91 25 02 	lds	r31, 0x0225
     63e:	e4 0f       	add	r30, r20
     640:	f5 1f       	adc	r31, r21
     642:	60 81       	ld	r22, Z
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
     644:	99 23       	and	r25, r25
     646:	11 f0       	breq	.+4      	; 0x64c <key_press+0x66>
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	01 c0       	rjmp	.+2      	; 0x64e <key_press+0x68>
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	f9 01       	movw	r30, r18
     650:	e6 5b       	subi	r30, 0xB6	; 182
     652:	fd 4f       	sbci	r31, 0xFD	; 253
     654:	80 83       	st	Z, r24
		if (key_code==NULL && prev_layer && ! mod_keys) {
     656:	66 23       	and	r22, r22
     658:	71 f4       	brne	.+28     	; 0x676 <key_press+0x90>
     65a:	80 91 34 02 	lds	r24, 0x0234
     65e:	90 91 35 02 	lds	r25, 0x0235
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	41 f0       	breq	.+16     	; 0x676 <key_press+0x90>
     666:	77 23       	and	r23, r23
     668:	31 f4       	brne	.+12     	; 0x676 <key_press+0x90>
			key_code = prev_layer[key_id];
     66a:	48 0f       	add	r20, r24
     66c:	59 1f       	adc	r21, r25
     66e:	da 01       	movw	r26, r20
     670:	6c 91       	ld	r22, X
			pressed[key_id] = KEY_PRESSED_PREV;
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	80 83       	st	Z, r24
		}
	}

	if (locked && key_code!=KEY_LOCK) return;
     676:	80 91 36 02 	lds	r24, 0x0236
     67a:	88 23       	and	r24, r24
     67c:	21 f0       	breq	.+8      	; 0x686 <key_press+0xa0>
     67e:	6a 37       	cpi	r22, 0x7A	; 122
     680:	09 f0       	breq	.+2      	; 0x684 <key_press+0x9e>
     682:	9b c1       	rjmp	.+822    	; 0x9ba <key_press+0x3d4>
     684:	73 c0       	rjmp	.+230    	; 0x76c <key_press+0x186>
	
	if (key_code>=KEY_CB_START) { // Catboard keys
     686:	6d 36       	cpi	r22, 0x6D	; 109
     688:	08 f4       	brcc	.+2      	; 0x68c <key_press+0xa6>
     68a:	12 c1       	rjmp	.+548    	; 0x8b0 <key_press+0x2ca>
		if (key_code==KEY_ALT_TAB) { // AltTab press
     68c:	6d 37       	cpi	r22, 0x7D	; 125
     68e:	29 f5       	brne	.+74     	; 0x6da <key_press+0xf4>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
     690:	f9 01       	movw	r30, r18
     692:	e6 5b       	subi	r30, 0xB6	; 182
     694:	fd 4f       	sbci	r31, 0xFD	; 253
     696:	80 81       	ld	r24, Z
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	19 f4       	brne	.+6      	; 0x6a2 <key_press+0xbc>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
     69c:	8b e2       	ldi	r24, 0x2B	; 43
     69e:	64 e0       	ldi	r22, 0x04	; 4
     6a0:	63 c0       	rjmp	.+198    	; 0x768 <key_press+0x182>
			} else { // Alt press, Tab press and release
				if (! mod_keys) {
     6a2:	80 91 33 02 	lds	r24, 0x0233
     6a6:	88 23       	and	r24, r24
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <key_press+0xcc>
					mod_keys |= (KEY_ALT);
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	80 93 33 02 	sts	0x0233, r24
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <key_press+0xd0>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
     6b6:	80 91 33 02 	lds	r24, 0x0233
     6ba:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = KEY_TAB;
     6be:	8b e2       	ldi	r24, 0x2B	; 43
     6c0:	80 93 40 02 	sts	0x0240, r24
				usb_keyboard_send();
     6c4:	b2 d2       	rcall	.+1380   	; 0xc2a <usb_keyboard_send>
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	90 e7       	ldi	r25, 0x70	; 112
     6ca:	a2 e0       	ldi	r26, 0x02	; 2
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	90 40       	sbci	r25, 0x00	; 0
     6d0:	a0 40       	sbci	r26, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <key_press+0xe6>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <key_press+0xf0>
     6d6:	00 00       	nop
     6d8:	50 c1       	rjmp	.+672    	; 0x97a <key_press+0x394>
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
     6da:	6e 37       	cpi	r22, 0x7E	; 126
     6dc:	59 f5       	brne	.+86     	; 0x734 <key_press+0x14e>
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
     6de:	26 5b       	subi	r18, 0xB6	; 182
     6e0:	3d 4f       	sbci	r19, 0xFD	; 253
     6e2:	d9 01       	movw	r26, r18
     6e4:	8c 91       	ld	r24, X
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	09 f0       	breq	.+2      	; 0x6ec <key_press+0x106>
     6ea:	48 c1       	rjmp	.+656    	; 0x97c <key_press+0x396>
     6ec:	80 91 33 02 	lds	r24, 0x0233
     6f0:	82 72       	andi	r24, 0x22	; 34
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <key_press+0x110>
     6f4:	43 c1       	rjmp	.+646    	; 0x97c <key_press+0x396>
				if (prev_layer) { // FnLock Off
     6f6:	20 91 34 02 	lds	r18, 0x0234
     6fa:	30 91 35 02 	lds	r19, 0x0235
     6fe:	21 15       	cp	r18, r1
     700:	31 05       	cpc	r19, r1
     702:	49 f0       	breq	.+18     	; 0x716 <key_press+0x130>
					layout = prev_layer;
     704:	30 93 25 02 	sts	0x0225, r19
     708:	20 93 24 02 	sts	0x0224, r18
					prev_layer = 0;
     70c:	10 92 35 02 	sts	0x0235, r1
     710:	10 92 34 02 	sts	0x0234, r1
     714:	33 c1       	rjmp	.+614    	; 0x97c <key_press+0x396>
				} else { // FnLock On
					prev_layer = layout;
     716:	80 91 24 02 	lds	r24, 0x0224
     71a:	90 91 25 02 	lds	r25, 0x0225
     71e:	90 93 35 02 	sts	0x0235, r25
     722:	80 93 34 02 	sts	0x0234, r24
					layout = layer_fnlock;
     726:	87 ee       	ldi	r24, 0xE7	; 231
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	90 93 25 02 	sts	0x0225, r25
     72e:	80 93 24 02 	sts	0x0224, r24
     732:	24 c1       	rjmp	.+584    	; 0x97c <key_press+0x396>
				}
			}
		} else if (key_code==KEY_OS_MODE) { // Mac mode
     734:	6c 37       	cpi	r22, 0x7C	; 124
     736:	d1 f4       	brne	.+52     	; 0x76c <key_press+0x186>
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
     738:	26 5b       	subi	r18, 0xB6	; 182
     73a:	3d 4f       	sbci	r19, 0xFD	; 253
     73c:	f9 01       	movw	r30, r18
     73e:	80 81       	ld	r24, Z
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	79 f4       	brne	.+30     	; 0x762 <key_press+0x17c>
     744:	80 91 33 02 	lds	r24, 0x0233
     748:	82 72       	andi	r24, 0x22	; 34
     74a:	59 f0       	breq	.+22     	; 0x762 <key_press+0x17c>
				os_mode++;
     74c:	80 91 23 02 	lds	r24, 0x0223
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 93 23 02 	sts	0x0223, r24
				if (os_mode>2) os_mode = 0;
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	08 f4       	brcc	.+2      	; 0x75c <key_press+0x176>
     75a:	10 c1       	rjmp	.+544    	; 0x97c <key_press+0x396>
     75c:	10 92 23 02 	sts	0x0223, r1
     760:	0d c1       	rjmp	.+538    	; 0x97c <key_press+0x396>
			} else { // Press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
     762:	8c e2       	ldi	r24, 0x2C	; 44
     764:	60 91 33 02 	lds	r22, 0x0233
     768:	9a d2       	rcall	.+1332   	; 0xc9e <usb_keyboard_press>
     76a:	08 c1       	rjmp	.+528    	; 0x97c <key_press+0x396>
			}
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
     76c:	6d 36       	cpi	r22, 0x6D	; 109
     76e:	a1 f4       	brne	.+40     	; 0x798 <key_press+0x1b2>
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
     770:	80 91 33 02 	lds	r24, 0x0233
     774:	98 2f       	mov	r25, r24
     776:	92 72       	andi	r25, 0x22	; 34
     778:	39 f0       	breq	.+14     	; 0x788 <key_press+0x1a2>
				pressed[key_id] = KEY_PRESSED_CTRL;
     77a:	26 5b       	subi	r18, 0xB6	; 182
     77c:	3d 4f       	sbci	r19, 0xFD	; 253
     77e:	95 e0       	ldi	r25, 0x05	; 5
     780:	d9 01       	movw	r26, r18
     782:	9c 93       	st	X, r25
				mod_keys |= KEY_CTRL;
     784:	81 60       	ori	r24, 0x01	; 1
     786:	1d c0       	rjmp	.+58     	; 0x7c2 <key_press+0x1dc>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
     788:	88 23       	and	r24, r24
     78a:	d1 f0       	breq	.+52     	; 0x7c0 <key_press+0x1da>
     78c:	26 5b       	subi	r18, 0xB6	; 182
     78e:	3d 4f       	sbci	r19, 0xFD	; 253
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	f9 01       	movw	r30, r18
     794:	90 83       	st	Z, r25
     796:	14 c0       	rjmp	.+40     	; 0x7c0 <key_press+0x1da>
				mod_keys |= KEY_SHIFT;
				send();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
     798:	6e 36       	cpi	r22, 0x6E	; 110
     79a:	21 f4       	brne	.+8      	; 0x7a4 <key_press+0x1be>
			mod_keys |= KEY_RIGHT_SHIFT;
     79c:	80 91 33 02 	lds	r24, 0x0233
     7a0:	80 62       	ori	r24, 0x20	; 32
     7a2:	0f c0       	rjmp	.+30     	; 0x7c2 <key_press+0x1dc>
			send();
		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
     7a4:	6b 37       	cpi	r22, 0x7B	; 123
     7a6:	41 f4       	brne	.+16     	; 0x7b8 <key_press+0x1d2>
			turbo_repeat = ! turbo_repeat;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 91 2d 02 	lds	r25, 0x022D
     7ae:	91 11       	cpse	r25, r1
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	80 93 2d 02 	sts	0x022D, r24
     7b6:	e2 c0       	rjmp	.+452    	; 0x97c <key_press+0x396>
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
     7b8:	67 37       	cpi	r22, 0x77	; 119
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <key_press+0x1e2>
			mod_keys |= KEY_SHIFT;
     7bc:	80 91 33 02 	lds	r24, 0x0233
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 93 33 02 	sts	0x0233, r24
     7c6:	d9 c0       	rjmp	.+434    	; 0x97a <key_press+0x394>
			send();
		} else if (key_code==KEY_MACRO) { // TODO: My Macro
     7c8:	6f 36       	cpi	r22, 0x6F	; 111
     7ca:	09 f4       	brne	.+2      	; 0x7ce <key_press+0x1e8>
     7cc:	d7 c0       	rjmp	.+430    	; 0x97c <key_press+0x396>
			uint16_t *macros;
			uint16_t *macros = macros_press[macros_pos_index];
			for (i==0; i<sizeof(macros); i=i+2) {
				usb_keyboard_press(macros[i], macros[i+1]);
			}*/
		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
     7ce:	6a 37       	cpi	r22, 0x7A	; 122
     7d0:	b1 f5       	brne	.+108    	; 0x83e <key_press+0x258>
			if (locked) {
     7d2:	88 23       	and	r24, r24
     7d4:	59 f1       	breq	.+86     	; 0x82c <key_press+0x246>
				locked = 0;
     7d6:	10 92 36 02 	sts	0x0236, r1
				if (led) {
     7da:	80 91 2e 02 	lds	r24, 0x022E
     7de:	88 23       	and	r24, r24
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <key_press+0x1fe>
     7e2:	cc c0       	rjmp	.+408    	; 0x97c <key_press+0x396>
					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
     7e4:	80 91 24 02 	lds	r24, 0x0224
     7e8:	90 91 25 02 	lds	r25, 0x0225
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	8f 36       	cpi	r24, 0x6F	; 111
     7f0:	9f 07       	cpc	r25, r31
     7f2:	41 f0       	breq	.+16     	; 0x804 <key_press+0x21e>
     7f4:	80 91 34 02 	lds	r24, 0x0234
     7f8:	90 91 35 02 	lds	r25, 0x0235
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	8f 36       	cpi	r24, 0x6F	; 111
     800:	92 07       	cpc	r25, r18
     802:	09 f4       	brne	.+2      	; 0x806 <key_press+0x220>
     804:	59 9a       	sbi	0x0b, 1	; 11
					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
     806:	80 91 24 02 	lds	r24, 0x0224
     80a:	90 91 25 02 	lds	r25, 0x0225
     80e:	a1 e0       	ldi	r26, 0x01	; 1
     810:	80 30       	cpi	r24, 0x00	; 0
     812:	9a 07       	cpc	r25, r26
     814:	09 f4       	brne	.+2      	; 0x818 <key_press+0x232>
     816:	4a c0       	rjmp	.+148    	; 0x8ac <key_press+0x2c6>
     818:	80 91 34 02 	lds	r24, 0x0234
     81c:	90 91 35 02 	lds	r25, 0x0235
     820:	b1 e0       	ldi	r27, 0x01	; 1
     822:	80 30       	cpi	r24, 0x00	; 0
     824:	9b 07       	cpc	r25, r27
     826:	09 f0       	breq	.+2      	; 0x82a <key_press+0x244>
     828:	a9 c0       	rjmp	.+338    	; 0x97c <key_press+0x396>
     82a:	40 c0       	rjmp	.+128    	; 0x8ac <key_press+0x2c6>
				}
			} else {
				locked = 1;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 36 02 	sts	0x0236, r24
				LED_OFF;
     832:	5e 9a       	sbi	0x0b, 6	; 11
				LED_RED_OFF;
     834:	46 9a       	sbi	0x08, 6	; 8
				LED_BLUE_OFF;
     836:	59 98       	cbi	0x0b, 1	; 11
				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
     838:	8f e0       	ldi	r24, 0x0F	; 15
     83a:	68 e0       	ldi	r22, 0x08	; 8
     83c:	95 cf       	rjmp	.-214    	; 0x768 <key_press+0x182>
			}
		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
     83e:	69 37       	cpi	r22, 0x79	; 121
     840:	09 f0       	breq	.+2      	; 0x844 <key_press+0x25e>
     842:	9c c0       	rjmp	.+312    	; 0x97c <key_press+0x396>
     844:	80 91 33 02 	lds	r24, 0x0233
     848:	82 72       	andi	r24, 0x22	; 34
     84a:	09 f4       	brne	.+2      	; 0x84e <key_press+0x268>
     84c:	97 c0       	rjmp	.+302    	; 0x97c <key_press+0x396>
			if (led) {
     84e:	80 91 2e 02 	lds	r24, 0x022E
     852:	88 23       	and	r24, r24
     854:	31 f0       	breq	.+12     	; 0x862 <key_press+0x27c>
				led = 0;
     856:	10 92 2e 02 	sts	0x022E, r1
				LED_OFF;
     85a:	5e 9a       	sbi	0x0b, 6	; 11
				LED_RED_OFF;
     85c:	46 9a       	sbi	0x08, 6	; 8
				LED_BLUE_OFF;
     85e:	59 98       	cbi	0x0b, 1	; 11
     860:	8d c0       	rjmp	.+282    	; 0x97c <key_press+0x396>
			} else {
				led = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 2e 02 	sts	0x022E, r24
				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
     868:	80 91 24 02 	lds	r24, 0x0224
     86c:	90 91 25 02 	lds	r25, 0x0225
     870:	e1 e0       	ldi	r30, 0x01	; 1
     872:	8f 36       	cpi	r24, 0x6F	; 111
     874:	9e 07       	cpc	r25, r30
     876:	41 f0       	breq	.+16     	; 0x888 <key_press+0x2a2>
     878:	80 91 34 02 	lds	r24, 0x0234
     87c:	90 91 35 02 	lds	r25, 0x0235
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	8f 36       	cpi	r24, 0x6F	; 111
     884:	9f 07       	cpc	r25, r31
     886:	09 f4       	brne	.+2      	; 0x88a <key_press+0x2a4>
     888:	59 9a       	sbi	0x0b, 1	; 11
				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
     88a:	80 91 24 02 	lds	r24, 0x0224
     88e:	90 91 25 02 	lds	r25, 0x0225
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	80 30       	cpi	r24, 0x00	; 0
     896:	92 07       	cpc	r25, r18
     898:	49 f0       	breq	.+18     	; 0x8ac <key_press+0x2c6>
     89a:	80 91 34 02 	lds	r24, 0x0234
     89e:	90 91 35 02 	lds	r25, 0x0235
     8a2:	a1 e0       	ldi	r26, 0x01	; 1
     8a4:	80 30       	cpi	r24, 0x00	; 0
     8a6:	9a 07       	cpc	r25, r26
     8a8:	09 f0       	breq	.+2      	; 0x8ac <key_press+0x2c6>
     8aa:	68 c0       	rjmp	.+208    	; 0x97c <key_press+0x396>
     8ac:	46 98       	cbi	0x08, 6	; 8
     8ae:	66 c0       	rjmp	.+204    	; 0x97c <key_press+0x396>
			}
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys
     8b0:	65 36       	cpi	r22, 0x65	; 101
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <key_press+0x2d0>
     8b4:	41 c0       	rjmp	.+130    	; 0x938 <key_press+0x352>
		if (os_mode==2 && key_code==KEY_LCTRL) {
     8b6:	80 91 23 02 	lds	r24, 0x0223
     8ba:	82 30       	cpi	r24, 0x02	; 2
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <key_press+0x2e0>
     8be:	65 36       	cpi	r22, 0x65	; 101
     8c0:	e1 f0       	breq	.+56     	; 0x8fa <key_press+0x314>
			mod_keys |= KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
     8c2:	69 36       	cpi	r22, 0x69	; 105
     8c4:	11 f0       	breq	.+4      	; 0x8ca <key_press+0x2e4>
     8c6:	6c 36       	cpi	r22, 0x6C	; 108
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <key_press+0x2ec>
			mod_keys |= KEY_RIGHT_GUI;
     8ca:	80 91 33 02 	lds	r24, 0x0233
     8ce:	80 68       	ori	r24, 0x80	; 128
     8d0:	25 c0       	rjmp	.+74     	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_LCTRL) {
     8d2:	65 36       	cpi	r22, 0x65	; 101
     8d4:	21 f4       	brne	.+8      	; 0x8de <key_press+0x2f8>
			mod_keys |= KEY_CTRL;
     8d6:	80 91 33 02 	lds	r24, 0x0233
     8da:	81 60       	ori	r24, 0x01	; 1
     8dc:	1f c0       	rjmp	.+62     	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_LSHIFT) {
     8de:	66 36       	cpi	r22, 0x66	; 102
     8e0:	21 f4       	brne	.+8      	; 0x8ea <key_press+0x304>
			mod_keys |= KEY_SHIFT;
     8e2:	80 91 33 02 	lds	r24, 0x0233
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	19 c0       	rjmp	.+50     	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_LALT) {
     8ea:	67 36       	cpi	r22, 0x67	; 103
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <key_press+0x310>
			mod_keys |= KEY_ALT;
     8ee:	80 91 33 02 	lds	r24, 0x0233
     8f2:	84 60       	ori	r24, 0x04	; 4
     8f4:	13 c0       	rjmp	.+38     	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_LGUI) {
     8f6:	68 36       	cpi	r22, 0x68	; 104
     8f8:	21 f4       	brne	.+8      	; 0x902 <key_press+0x31c>
			mod_keys |= KEY_GUI;
     8fa:	80 91 33 02 	lds	r24, 0x0233
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	0d c0       	rjmp	.+26     	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_RCTRL) {
     902:	69 36       	cpi	r22, 0x69	; 105
     904:	21 f4       	brne	.+8      	; 0x90e <key_press+0x328>
			mod_keys |= KEY_RIGHT_CTRL;
     906:	80 91 33 02 	lds	r24, 0x0233
     90a:	80 61       	ori	r24, 0x10	; 16
     90c:	07 c0       	rjmp	.+14     	; 0x91c <key_press+0x336>
     90e:	80 91 33 02 	lds	r24, 0x0233
		} else if (key_code==KEY_RSHIFT) {
     912:	6a 36       	cpi	r22, 0x6A	; 106
     914:	11 f4       	brne	.+4      	; 0x91a <key_press+0x334>
			mod_keys |= KEY_RIGHT_SHIFT;
     916:	80 62       	ori	r24, 0x20	; 32
     918:	01 c0       	rjmp	.+2      	; 0x91c <key_press+0x336>
		} else if (key_code==KEY_RALT) {
			mod_keys |= KEY_RIGHT_ALT;
     91a:	80 64       	ori	r24, 0x40	; 64
     91c:	80 93 33 02 	sts	0x0233, r24
		} else if (key_code==KEY_RGUI) {
			mod_keys |= KEY_RIGHT_GUI;
		}
		send();
     920:	e8 dc       	rcall	.-1584   	; 0x2f2 <send>
		press_time = 0;
     922:	10 92 38 02 	sts	0x0238, r1
     926:	10 92 37 02 	sts	0x0237, r1
		press_time2 = 0;
		release_time = 0;
     92a:	10 92 3c 02 	sts	0x023C, r1
     92e:	10 92 3b 02 	sts	0x023B, r1
		repeat_time = 0;
		last_key = 0;
     932:	10 92 2f 02 	sts	0x022F, r1
     936:	22 c0       	rjmp	.+68     	; 0x97c <key_press+0x396>
		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
			uint16_t num = layer2_typo[0];
			char str[4];
			itoa(num, &str, 16);
		}*/
		if (! (last_key==key_id && release_time<10)) { // debounce
     938:	80 91 2f 02 	lds	r24, 0x022F
     93c:	81 17       	cp	r24, r17
     93e:	39 f4       	brne	.+14     	; 0x94e <key_press+0x368>
     940:	80 91 3b 02 	lds	r24, 0x023B
     944:	90 91 3c 02 	lds	r25, 0x023C
     948:	8a 30       	cpi	r24, 0x0A	; 10
     94a:	91 05       	cpc	r25, r1
     94c:	b8 f0       	brcs	.+46     	; 0x97c <key_press+0x396>
			for (i=5; i>0; i--) queue[i] = queue[i-1];
     94e:	80 91 2a 02 	lds	r24, 0x022A
     952:	80 93 2b 02 	sts	0x022B, r24
     956:	80 91 29 02 	lds	r24, 0x0229
     95a:	80 93 2a 02 	sts	0x022A, r24
     95e:	80 91 28 02 	lds	r24, 0x0228
     962:	80 93 29 02 	sts	0x0229, r24
     966:	80 91 27 02 	lds	r24, 0x0227
     96a:	80 93 28 02 	sts	0x0228, r24
     96e:	80 91 26 02 	lds	r24, 0x0226
     972:	80 93 27 02 	sts	0x0227, r24
			queue[0] = key_id;
     976:	10 93 26 02 	sts	0x0226, r17
			send();
     97a:	bb dc       	rcall	.-1674   	; 0x2f2 <send>
		}
	}
	// Autorepeat
	if (last_key==key_id) { // calc press2
     97c:	80 91 2f 02 	lds	r24, 0x022F
     980:	81 17       	cp	r24, r17
     982:	39 f4       	brne	.+14     	; 0x992 <key_press+0x3ac>
		press_time2 = 1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	90 93 3a 02 	sts	0x023A, r25
     98c:	80 93 39 02 	sts	0x0239, r24
     990:	10 c0       	rjmp	.+32     	; 0x9b2 <key_press+0x3cc>
		repeat_time = 0;
	} else { // calc press1
		last_key = key_id;
     992:	10 93 2f 02 	sts	0x022F, r17
		press_time = 1;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 38 02 	sts	0x0238, r25
     99e:	80 93 37 02 	sts	0x0237, r24
		press_time2 = 0;
     9a2:	10 92 3a 02 	sts	0x023A, r1
     9a6:	10 92 39 02 	sts	0x0239, r1
		release_time = 0;
     9aa:	10 92 3c 02 	sts	0x023C, r1
     9ae:	10 92 3b 02 	sts	0x023B, r1
		repeat_time = 0;
     9b2:	10 92 3e 02 	sts	0x023E, r1
     9b6:	10 92 3d 02 	sts	0x023D, r1
	}
}
     9ba:	1f 91       	pop	r17
     9bc:	08 95       	ret

000009be <repeat_tick>:
		if (led) LED_RED_ON;
	}
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
     9be:	80 91 3d 02 	lds	r24, 0x023D
     9c2:	90 91 3e 02 	lds	r25, 0x023E
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	41 f1       	breq	.+80     	; 0xa1a <repeat_tick+0x5c>
		if (repeat_time<(release_time>>2)) {
     9ca:	20 91 3b 02 	lds	r18, 0x023B
     9ce:	30 91 3c 02 	lds	r19, 0x023C
     9d2:	36 95       	lsr	r19
     9d4:	27 95       	ror	r18
     9d6:	36 95       	lsr	r19
     9d8:	27 95       	ror	r18
     9da:	82 17       	cp	r24, r18
     9dc:	93 07       	cpc	r25, r19
     9de:	10 f4       	brcc	.+4      	; 0x9e4 <repeat_tick+0x26>
			repeat_time++;
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	3b c0       	rjmp	.+118    	; 0xa5a <repeat_tick+0x9c>
		} else { // repeat press
			repeat_time = 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 3e 02 	sts	0x023E, r25
     9ec:	80 93 3d 02 	sts	0x023D, r24
			if (turbo_repeat) {
     9f0:	80 91 2d 02 	lds	r24, 0x022D
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <repeat_tick+0x3c>
     9f8:	6a c0       	rjmp	.+212    	; 0xace <repeat_tick+0x110>
				keyboard_modifier_keys = mod_keys;
     9fa:	80 91 33 02 	lds	r24, 0x0233
     9fe:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = get_code(last_key);
     a02:	80 91 2f 02 	lds	r24, 0x022F
     a06:	4e dc       	rcall	.-1892   	; 0x2a4 <get_code>
     a08:	80 93 40 02 	sts	0x0240, r24
				if (! usb_keyboard_send()) { // repeat release
     a0c:	0e d1       	rcall	.+540    	; 0xc2a <usb_keyboard_send>
     a0e:	88 23       	and	r24, r24
     a10:	09 f0       	breq	.+2      	; 0xa14 <repeat_tick+0x56>
     a12:	5d c0       	rjmp	.+186    	; 0xace <repeat_tick+0x110>
					keyboard_keys[0] = 0;
     a14:	10 92 40 02 	sts	0x0240, r1
					usb_keyboard_send();
     a18:	08 c1       	rjmp	.+528    	; 0xc2a <usb_keyboard_send>
				}
			}
		}
	} else if (press_time2) { // press2 pause
     a1a:	80 91 39 02 	lds	r24, 0x0239
     a1e:	90 91 3a 02 	lds	r25, 0x023A
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	f9 f0       	breq	.+62     	; 0xa64 <repeat_tick+0xa6>
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
     a26:	40 91 37 02 	lds	r20, 0x0237
     a2a:	50 91 38 02 	lds	r21, 0x0238
     a2e:	20 91 71 02 	lds	r18, 0x0271
     a32:	22 23       	and	r18, r18
     a34:	19 f0       	breq	.+6      	; 0xa3c <repeat_tick+0x7e>
     a36:	25 e0       	ldi	r18, 0x05	; 5
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <repeat_tick+0x82>
     a3c:	2e e1       	ldi	r18, 0x1E	; 30
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	24 0f       	add	r18, r20
     a42:	35 1f       	adc	r19, r21
     a44:	82 17       	cp	r24, r18
     a46:	93 07       	cpc	r25, r19
     a48:	30 f4       	brcc	.+12     	; 0xa56 <repeat_tick+0x98>
			press_time2++;
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	90 93 3a 02 	sts	0x023A, r25
     a50:	80 93 39 02 	sts	0x0239, r24
     a54:	08 95       	ret
		} else {
			repeat_time = 1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 3e 02 	sts	0x023E, r25
     a5e:	80 93 3d 02 	sts	0x023D, r24
     a62:	08 95       	ret
		}
	} else if (release_time) { // release pause
     a64:	20 91 3b 02 	lds	r18, 0x023B
     a68:	30 91 3c 02 	lds	r19, 0x023C
     a6c:	80 91 37 02 	lds	r24, 0x0237
     a70:	90 91 38 02 	lds	r25, 0x0238
     a74:	21 15       	cp	r18, r1
     a76:	31 05       	cpc	r19, r1
     a78:	d9 f0       	breq	.+54     	; 0xab0 <repeat_tick+0xf2>
		if (release_time<(press_time+50)) {
     a7a:	c2 96       	adiw	r24, 0x32	; 50
     a7c:	28 17       	cp	r18, r24
     a7e:	39 07       	cpc	r19, r25
     a80:	38 f4       	brcc	.+14     	; 0xa90 <repeat_tick+0xd2>
			release_time++;
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	30 93 3c 02 	sts	0x023C, r19
     a8a:	20 93 3b 02 	sts	0x023B, r18
     a8e:	08 95       	ret
		} else {
			last_key = 0xFF;
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	80 93 2f 02 	sts	0x022F, r24
			release_time = 0;
     a96:	10 92 3c 02 	sts	0x023C, r1
     a9a:	10 92 3b 02 	sts	0x023B, r1
			press_time = 0;
     a9e:	10 92 38 02 	sts	0x0238, r1
     aa2:	10 92 37 02 	sts	0x0237, r1
			press_time2 = 0;
     aa6:	10 92 3a 02 	sts	0x023A, r1
     aaa:	10 92 39 02 	sts	0x0239, r1
     aae:	08 95       	ret
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	69 f0       	breq	.+26     	; 0xace <repeat_tick+0x110>
		if (press_time<250) {
     ab4:	8a 3f       	cpi	r24, 0xFA	; 250
     ab6:	91 05       	cpc	r25, r1
     ab8:	30 f4       	brcc	.+12     	; 0xac6 <repeat_tick+0x108>
			press_time++;
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	90 93 38 02 	sts	0x0238, r25
     ac0:	80 93 37 02 	sts	0x0237, r24
     ac4:	08 95       	ret
		} else {
			press_time = 0;
     ac6:	10 92 38 02 	sts	0x0238, r1
     aca:	10 92 37 02 	sts	0x0237, r1
     ace:	08 95       	ret

00000ad0 <poll>:
	LED_OFF;
	if (led) LED_RED_ON;
	caps_lock_led = keyboard_leds;
}

void poll() {
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	0c e3       	ldi	r16, 0x3C	; 60
     aea:	11 e0       	ldi	r17, 0x01	; 1
     aec:	c6 e4       	ldi	r28, 0x46	; 70
     aee:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
     af0:	99 24       	eor	r9, r9
		*row_port[row] &= ~row_bit[row];
     af2:	d8 01       	movw	r26, r16
     af4:	ed 91       	ld	r30, X+
     af6:	fc 91       	ld	r31, X
	LED_OFF;
	if (led) LED_RED_ON;
	caps_lock_led = keyboard_leds;
}

void poll() {
     af8:	5e 01       	movw	r10, r28
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
     afa:	98 81       	ld	r25, Y
     afc:	90 95       	com	r25
     afe:	80 81       	ld	r24, Z
     b00:	89 23       	and	r24, r25
     b02:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b04:	b5 e0       	ldi	r27, 0x05	; 5
     b06:	ba 95       	dec	r27
     b08:	f1 f7       	brne	.-4      	; 0xb06 <poll+0x36>
     b0a:	00 00       	nop
     b0c:	6b e4       	ldi	r22, 0x4B	; 75
     b0e:	e6 2e       	mov	r14, r22
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	f6 2e       	mov	r15, r22
     b14:	53 e6       	ldi	r21, 0x63	; 99
     b16:	c5 2e       	mov	r12, r21
     b18:	51 e0       	ldi	r21, 0x01	; 1
     b1a:	d5 2e       	mov	r13, r21
	LED_OFF;
	if (led) LED_RED_ON;
	caps_lock_led = keyboard_leds;
}

void poll() {
     b1c:	89 2c       	mov	r8, r9
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
     b1e:	d7 01       	movw	r26, r14
     b20:	ed 91       	ld	r30, X+
     b22:	fd 91       	ld	r31, X+
     b24:	7d 01       	movw	r14, r26
     b26:	d6 01       	movw	r26, r12
     b28:	8d 91       	ld	r24, X+
     b2a:	6d 01       	movw	r12, r26
     b2c:	90 81       	ld	r25, Z
     b2e:	89 23       	and	r24, r25
     b30:	28 2d       	mov	r18, r8
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	49 f4       	brne	.+18     	; 0xb48 <poll+0x78>
				if (! pressed[key_id]) {
     b36:	26 5b       	subi	r18, 0xB6	; 182
     b38:	3d 4f       	sbci	r19, 0xFD	; 253
     b3a:	f9 01       	movw	r30, r18
     b3c:	80 81       	ld	r24, Z
     b3e:	88 23       	and	r24, r24
     b40:	59 f4       	brne	.+22     	; 0xb58 <poll+0x88>
					key_press(key_id);
     b42:	88 2d       	mov	r24, r8
     b44:	50 dd       	rcall	.-1376   	; 0x5e6 <key_press>
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <poll+0x88>
				}
			} else if (pressed[key_id]) { // release key
     b48:	26 5b       	subi	r18, 0xB6	; 182
     b4a:	3d 4f       	sbci	r19, 0xFD	; 253
     b4c:	d9 01       	movw	r26, r18
     b4e:	8c 91       	ld	r24, X
     b50:	88 23       	and	r24, r24
     b52:	11 f0       	breq	.+4      	; 0xb58 <poll+0x88>
				key_release(key_id);
     b54:	88 2d       	mov	r24, r8
     b56:	e8 db       	rcall	.-2096   	; 0x328 <key_release>
     b58:	b5 e0       	ldi	r27, 0x05	; 5
     b5a:	8b 0e       	add	r8, r27
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
     b5c:	e3 e6       	ldi	r30, 0x63	; 99
     b5e:	ee 16       	cp	r14, r30
     b60:	e1 e0       	ldi	r30, 0x01	; 1
     b62:	fe 06       	cpc	r15, r30
     b64:	e1 f6       	brne	.-72     	; 0xb1e <poll+0x4e>
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
     b66:	d8 01       	movw	r26, r16
     b68:	ed 91       	ld	r30, X+
     b6a:	fd 91       	ld	r31, X+
     b6c:	8d 01       	movw	r16, r26
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	80 81       	ld	r24, Z
     b72:	d5 01       	movw	r26, r10
     b74:	9c 91       	ld	r25, X
     b76:	89 2b       	or	r24, r25
     b78:	80 83       	st	Z, r24
	caps_lock_led = keyboard_leds;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
     b7a:	93 94       	inc	r9
     b7c:	b9 2d       	mov	r27, r9
     b7e:	b5 30       	cpi	r27, 0x05	; 5
     b80:	09 f0       	breq	.+2      	; 0xb84 <poll+0xb4>
     b82:	b7 cf       	rjmp	.-146    	; 0xaf2 <poll+0x22>
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
     b84:	80 91 46 02 	lds	r24, 0x0246
     b88:	20 91 32 02 	lds	r18, 0x0232
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	82 70       	andi	r24, 0x02	; 2
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	09 f0       	breq	.+2      	; 0xb9c <poll+0xcc>
		caps_lock_change_layer();
     b9a:	f1 da       	rcall	.-2590   	; 0x17e <caps_lock_change_layer>
	}
	//if (keyboard_leds) LED_ON; else LED_OFF;
	repeat_tick();
     b9c:	10 df       	rcall	.-480    	; 0x9be <repeat_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b9e:	ef e1       	ldi	r30, 0x1F	; 31
     ba0:	fe e4       	ldi	r31, 0x4E	; 78
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <poll+0xd2>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <poll+0xd8>
     ba8:	00 00       	nop
	_delay_ms(5);
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	08 95       	ret

00000bc4 <main>:
*/


int main(void) {
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
     bc4:	84 b7       	in	r24, 0x34	; 52
     bc6:	87 7f       	andi	r24, 0xF7	; 247
     bc8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     bca:	88 e1       	ldi	r24, 0x18	; 24
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	80 93 60 00 	sts	0x0060, r24
     bd4:	10 92 60 00 	sts	0x0060, r1
     bd8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	80 93 61 00 	sts	0x0061, r24
     be6:	90 93 61 00 	sts	0x0061, r25
     bea:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
     bec:	37 db       	rcall	.-2450   	; 0x25c <init>
	for (;;) {
		poll();
     bee:	70 df       	rcall	.-288    	; 0xad0 <poll>
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <main+0x2a>

00000bf2 <usb_wait_in_ready>:
     bf2:	80 91 e8 00 	lds	r24, 0x00E8
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	fc cf       	rjmp	.-8      	; 0xbf2 <usb_wait_in_ready>
     bfa:	08 95       	ret

00000bfc <usb_init>:
     bfc:	80 ea       	ldi	r24, 0xA0	; 160
     bfe:	80 93 d8 00 	sts	0x00D8, r24
     c02:	86 e0       	ldi	r24, 0x06	; 6
     c04:	89 bd       	out	0x29, r24	; 41
     c06:	09 b4       	in	r0, 0x29	; 41
     c08:	00 fe       	sbrs	r0, 0
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <usb_init+0xa>
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	80 93 d8 00 	sts	0x00D8, r24
     c12:	10 92 e0 00 	sts	0x00E0, r1
     c16:	10 92 47 02 	sts	0x0247, r1
     c1a:	8c e0       	ldi	r24, 0x0C	; 12
     c1c:	80 93 e2 00 	sts	0x00E2, r24
     c20:	78 94       	sei
     c22:	08 95       	ret

00000c24 <usb_configured>:
     c24:	80 91 47 02 	lds	r24, 0x0247
     c28:	08 95       	ret

00000c2a <usb_keyboard_send>:
     c2a:	80 91 47 02 	lds	r24, 0x0247
     c2e:	88 23       	and	r24, r24
     c30:	91 f1       	breq	.+100    	; 0xc96 <usb_keyboard_send+0x6c>
     c32:	8f b7       	in	r24, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	90 93 e9 00 	sts	0x00E9, r25
     c3c:	90 91 e4 00 	lds	r25, 0x00E4
     c40:	9e 5c       	subi	r25, 0xCE	; 206
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	30 91 e8 00 	lds	r19, 0x00E8
     c48:	35 fd       	sbrc	r19, 5
     c4a:	0e c0       	rjmp	.+28     	; 0xc68 <usb_keyboard_send+0x3e>
     c4c:	8f bf       	out	0x3f, r24	; 63
     c4e:	80 91 47 02 	lds	r24, 0x0247
     c52:	88 23       	and	r24, r24
     c54:	01 f1       	breq	.+64     	; 0xc96 <usb_keyboard_send+0x6c>
     c56:	80 91 e4 00 	lds	r24, 0x00E4
     c5a:	89 17       	cp	r24, r25
     c5c:	f1 f0       	breq	.+60     	; 0xc9a <usb_keyboard_send+0x70>
     c5e:	8f b7       	in	r24, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	20 93 e9 00 	sts	0x00E9, r18
     c66:	ee cf       	rjmp	.-36     	; 0xc44 <usb_keyboard_send+0x1a>
     c68:	90 91 3f 02 	lds	r25, 0x023F
     c6c:	90 93 f1 00 	sts	0x00F1, r25
     c70:	10 92 f1 00 	sts	0x00F1, r1
     c74:	e0 e4       	ldi	r30, 0x40	; 64
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	91 91       	ld	r25, Z+
     c7a:	90 93 f1 00 	sts	0x00F1, r25
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	e6 34       	cpi	r30, 0x46	; 70
     c82:	f9 07       	cpc	r31, r25
     c84:	c9 f7       	brne	.-14     	; 0xc78 <usb_keyboard_send+0x4e>
     c86:	9a e3       	ldi	r25, 0x3A	; 58
     c88:	90 93 e8 00 	sts	0x00E8, r25
     c8c:	10 92 48 02 	sts	0x0248, r1
     c90:	8f bf       	out	0x3f, r24	; 63
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	08 95       	ret
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	08 95       	ret
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	08 95       	ret

00000c9e <usb_keyboard_press>:
     c9e:	60 93 3f 02 	sts	0x023F, r22
     ca2:	80 93 40 02 	sts	0x0240, r24
     ca6:	c1 df       	rcall	.-126    	; 0xc2a <usb_keyboard_send>
     ca8:	88 23       	and	r24, r24
     caa:	29 f4       	brne	.+10     	; 0xcb6 <usb_keyboard_press+0x18>
     cac:	10 92 3f 02 	sts	0x023F, r1
     cb0:	10 92 40 02 	sts	0x0240, r1
     cb4:	ba cf       	rjmp	.-140    	; 0xc2a <usb_keyboard_send>
     cb6:	08 95       	ret

00000cb8 <__vector_11>:
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	2f 93       	push	r18
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	80 91 e1 00 	lds	r24, 0x00E1
     cd0:	10 92 e1 00 	sts	0x00E1, r1
     cd4:	83 ff       	sbrs	r24, 3
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <__vector_11+0x3e>
     cd8:	10 92 e9 00 	sts	0x00E9, r1
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	90 93 eb 00 	sts	0x00EB, r25
     ce2:	10 92 ec 00 	sts	0x00EC, r1
     ce6:	92 e2       	ldi	r25, 0x22	; 34
     ce8:	90 93 ed 00 	sts	0x00ED, r25
     cec:	98 e0       	ldi	r25, 0x08	; 8
     cee:	90 93 f0 00 	sts	0x00F0, r25
     cf2:	10 92 47 02 	sts	0x0247, r1
     cf6:	82 ff       	sbrs	r24, 2
     cf8:	34 c0       	rjmp	.+104    	; 0xd62 <__vector_11+0xaa>
     cfa:	80 91 47 02 	lds	r24, 0x0247
     cfe:	88 23       	and	r24, r24
     d00:	81 f1       	breq	.+96     	; 0xd62 <__vector_11+0xaa>
     d02:	20 91 30 02 	lds	r18, 0x0230
     d06:	22 23       	and	r18, r18
     d08:	61 f1       	breq	.+88     	; 0xd62 <__vector_11+0xaa>
     d0a:	80 91 49 02 	lds	r24, 0x0249
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 93 49 02 	sts	0x0249, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	83 70       	andi	r24, 0x03	; 3
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	11 f5       	brne	.+68     	; 0xd62 <__vector_11+0xaa>
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 e9 00 	sts	0x00E9, r24
     d24:	80 91 e8 00 	lds	r24, 0x00E8
     d28:	85 ff       	sbrs	r24, 5
     d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__vector_11+0xaa>
     d2c:	80 91 48 02 	lds	r24, 0x0248
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 48 02 	sts	0x0248, r24
     d36:	82 17       	cp	r24, r18
     d38:	a1 f4       	brne	.+40     	; 0xd62 <__vector_11+0xaa>
     d3a:	10 92 48 02 	sts	0x0248, r1
     d3e:	80 91 3f 02 	lds	r24, 0x023F
     d42:	80 93 f1 00 	sts	0x00F1, r24
     d46:	10 92 f1 00 	sts	0x00F1, r1
     d4a:	e0 e4       	ldi	r30, 0x40	; 64
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	81 91       	ld	r24, Z+
     d50:	80 93 f1 00 	sts	0x00F1, r24
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	e6 34       	cpi	r30, 0x46	; 70
     d58:	f8 07       	cpc	r31, r24
     d5a:	c9 f7       	brne	.-14     	; 0xd4e <__vector_11+0x96>
     d5c:	8a e3       	ldi	r24, 0x3A	; 58
     d5e:	80 93 e8 00 	sts	0x00E8, r24
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_12>:
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	10 92 e9 00 	sts	0x00E9, r1
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	83 ff       	sbrs	r24, 3
     db8:	39 c1       	rjmp	.+626    	; 0x102c <__vector_12+0x2b6>
     dba:	20 91 f1 00 	lds	r18, 0x00F1
     dbe:	30 91 f1 00 	lds	r19, 0x00F1
     dc2:	80 91 f1 00 	lds	r24, 0x00F1
     dc6:	c8 2e       	mov	r12, r24
     dc8:	dd 24       	eor	r13, r13
     dca:	40 91 f1 00 	lds	r20, 0x00F1
     dce:	94 2f       	mov	r25, r20
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	c8 2a       	or	r12, r24
     dd4:	d9 2a       	or	r13, r25
     dd6:	00 91 f1 00 	lds	r16, 0x00F1
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	40 91 f1 00 	lds	r20, 0x00F1
     de0:	94 2f       	mov	r25, r20
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 2b       	or	r16, r24
     de6:	19 2b       	or	r17, r25
     de8:	60 91 f1 00 	lds	r22, 0x00F1
     dec:	a0 91 f1 00 	lds	r26, 0x00F1
     df0:	82 ef       	ldi	r24, 0xF2	; 242
     df2:	80 93 e8 00 	sts	0x00E8, r24
     df6:	36 30       	cpi	r19, 0x06	; 6
     df8:	09 f0       	breq	.+2      	; 0xdfc <__vector_12+0x86>
     dfa:	59 c0       	rjmp	.+178    	; 0xeae <__vector_12+0x138>
     dfc:	8b e7       	ldi	r24, 0x7B	; 123
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 01       	movw	r18, r24
     e02:	25 50       	subi	r18, 0x05	; 5
     e04:	30 40       	sbci	r19, 0x00	; 0
     e06:	fc 01       	movw	r30, r24
     e08:	37 97       	sbiw	r30, 0x07	; 7
     e0a:	45 91       	lpm	r20, Z+
     e0c:	54 91       	lpm	r21, Z+
     e0e:	4c 15       	cp	r20, r12
     e10:	5d 05       	cpc	r21, r13
     e12:	f9 f4       	brne	.+62     	; 0xe52 <__vector_12+0xdc>
     e14:	f9 01       	movw	r30, r18
     e16:	45 91       	lpm	r20, Z+
     e18:	54 91       	lpm	r21, Z+
     e1a:	40 17       	cp	r20, r16
     e1c:	51 07       	cpc	r21, r17
     e1e:	c9 f4       	brne	.+50     	; 0xe52 <__vector_12+0xdc>
     e20:	2e 5f       	subi	r18, 0xFE	; 254
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	f9 01       	movw	r30, r18
     e26:	85 91       	lpm	r24, Z+
     e28:	94 91       	lpm	r25, Z+
     e2a:	2e 5f       	subi	r18, 0xFE	; 254
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	f9 01       	movw	r30, r18
     e30:	24 91       	lpm	r18, Z+
     e32:	46 2f       	mov	r20, r22
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	7a 2f       	mov	r23, r26
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	46 2b       	or	r20, r22
     e3c:	57 2b       	or	r21, r23
     e3e:	4f 3f       	cpi	r20, 0xFF	; 255
     e40:	51 05       	cpc	r21, r1
     e42:	19 f0       	breq	.+6      	; 0xe4a <__vector_12+0xd4>
     e44:	10 f0       	brcs	.+4      	; 0xe4a <__vector_12+0xd4>
     e46:	4f ef       	ldi	r20, 0xFF	; 255
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	42 17       	cp	r20, r18
     e4c:	50 f4       	brcc	.+20     	; 0xe62 <__vector_12+0xec>
     e4e:	24 2f       	mov	r18, r20
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <__vector_12+0xec>
     e52:	07 96       	adiw	r24, 0x07	; 7
     e54:	29 5f       	subi	r18, 0xF9	; 249
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	8c 3a       	cpi	r24, 0xAC	; 172
     e5c:	9f 07       	cpc	r25, r31
     e5e:	99 f6       	brne	.-90     	; 0xe06 <__vector_12+0x90>
     e60:	e5 c0       	rjmp	.+458    	; 0x102c <__vector_12+0x2b6>
     e62:	ae ef       	ldi	r26, 0xFE	; 254
     e64:	40 91 e8 00 	lds	r20, 0x00E8
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	ba 01       	movw	r22, r20
     e6c:	65 70       	andi	r22, 0x05	; 5
     e6e:	70 70       	andi	r23, 0x00	; 0
     e70:	61 15       	cp	r22, r1
     e72:	71 05       	cpc	r23, r1
     e74:	b9 f3       	breq	.-18     	; 0xe64 <__vector_12+0xee>
     e76:	42 fd       	sbrc	r20, 2
     e78:	dc c0       	rjmp	.+440    	; 0x1032 <__vector_12+0x2bc>
     e7a:	32 2f       	mov	r19, r18
     e7c:	21 32       	cpi	r18, 0x21	; 33
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <__vector_12+0x10c>
     e80:	30 e2       	ldi	r19, 0x20	; 32
     e82:	ac 01       	movw	r20, r24
     e84:	63 2f       	mov	r22, r19
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <__vector_12+0x120>
     e88:	fa 01       	movw	r30, r20
     e8a:	4f 5f       	subi	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	e4 91       	lpm	r30, Z+
     e90:	e0 93 f1 00 	sts	0x00F1, r30
     e94:	61 50       	subi	r22, 0x01	; 1
     e96:	66 23       	and	r22, r22
     e98:	b9 f7       	brne	.-18     	; 0xe88 <__vector_12+0x112>
     e9a:	83 0f       	add	r24, r19
     e9c:	91 1d       	adc	r25, r1
     e9e:	23 1b       	sub	r18, r19
     ea0:	a0 93 e8 00 	sts	0x00E8, r26
     ea4:	22 23       	and	r18, r18
     ea6:	f1 f6       	brne	.-68     	; 0xe64 <__vector_12+0xee>
     ea8:	30 32       	cpi	r19, 0x20	; 32
     eaa:	e1 f2       	breq	.-72     	; 0xe64 <__vector_12+0xee>
     eac:	c2 c0       	rjmp	.+388    	; 0x1032 <__vector_12+0x2bc>
     eae:	35 30       	cpi	r19, 0x05	; 5
     eb0:	49 f4       	brne	.+18     	; 0xec4 <__vector_12+0x14e>
     eb2:	8e ef       	ldi	r24, 0xFE	; 254
     eb4:	80 93 e8 00 	sts	0x00E8, r24
     eb8:	9c de       	rcall	.-712    	; 0xbf2 <usb_wait_in_ready>
     eba:	8c 2d       	mov	r24, r12
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	80 93 e3 00 	sts	0x00E3, r24
     ec2:	b7 c0       	rjmp	.+366    	; 0x1032 <__vector_12+0x2bc>
     ec4:	39 30       	cpi	r19, 0x09	; 9
     ec6:	31 f5       	brne	.+76     	; 0xf14 <__vector_12+0x19e>
     ec8:	22 23       	and	r18, r18
     eca:	09 f0       	breq	.+2      	; 0xece <__vector_12+0x158>
     ecc:	69 c0       	rjmp	.+210    	; 0xfa0 <__vector_12+0x22a>
     ece:	c0 92 47 02 	sts	0x0247, r12
     ed2:	8e ef       	ldi	r24, 0xFE	; 254
     ed4:	80 93 e8 00 	sts	0x00E8, r24
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	85 ea       	ldi	r24, 0xA5	; 165
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	40 93 e9 00 	sts	0x00E9, r20
     ee2:	fc 01       	movw	r30, r24
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	e4 91       	lpm	r30, Z+
     ee8:	e0 93 eb 00 	sts	0x00EB, r30
     eec:	ee 23       	and	r30, r30
     eee:	69 f0       	breq	.+26     	; 0xf0a <__vector_12+0x194>
     ef0:	9c 01       	movw	r18, r24
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	fc 01       	movw	r30, r24
     ef8:	84 91       	lpm	r24, Z+
     efa:	80 93 ec 00 	sts	0x00EC, r24
     efe:	c9 01       	movw	r24, r18
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	f9 01       	movw	r30, r18
     f04:	24 91       	lpm	r18, Z+
     f06:	20 93 ed 00 	sts	0x00ED, r18
     f0a:	4f 5f       	subi	r20, 0xFF	; 255
     f0c:	45 30       	cpi	r20, 0x05	; 5
     f0e:	39 f7       	brne	.-50     	; 0xede <__vector_12+0x168>
     f10:	8e e1       	ldi	r24, 0x1E	; 30
     f12:	41 c0       	rjmp	.+130    	; 0xf96 <__vector_12+0x220>
     f14:	38 30       	cpi	r19, 0x08	; 8
     f16:	39 f4       	brne	.+14     	; 0xf26 <__vector_12+0x1b0>
     f18:	20 38       	cpi	r18, 0x80	; 128
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_12+0x1a8>
     f1c:	41 c0       	rjmp	.+130    	; 0xfa0 <__vector_12+0x22a>
     f1e:	69 de       	rcall	.-814    	; 0xbf2 <usb_wait_in_ready>
     f20:	80 91 47 02 	lds	r24, 0x0247
     f24:	61 c0       	rjmp	.+194    	; 0xfe8 <__vector_12+0x272>
     f26:	33 23       	and	r19, r19
     f28:	a9 f4       	brne	.+42     	; 0xf54 <__vector_12+0x1de>
     f2a:	29 83       	std	Y+1, r18	; 0x01
     f2c:	62 de       	rcall	.-828    	; 0xbf2 <usb_wait_in_ready>
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	22 38       	cpi	r18, 0x82	; 130
     f32:	51 f4       	brne	.+20     	; 0xf48 <__vector_12+0x1d2>
     f34:	00 93 e9 00 	sts	0x00E9, r16
     f38:	90 91 eb 00 	lds	r25, 0x00EB
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	95 ff       	sbrs	r25, 5
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	10 92 e9 00 	sts	0x00E9, r1
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <__vector_12+0x1d4>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	80 93 f1 00 	sts	0x00F1, r24
     f4e:	10 92 f1 00 	sts	0x00F1, r1
     f52:	68 c0       	rjmp	.+208    	; 0x1024 <__vector_12+0x2ae>
     f54:	31 30       	cpi	r19, 0x01	; 1
     f56:	11 f0       	breq	.+4      	; 0xf5c <__vector_12+0x1e6>
     f58:	33 30       	cpi	r19, 0x03	; 3
     f5a:	11 f5       	brne	.+68     	; 0xfa0 <__vector_12+0x22a>
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	01 f5       	brne	.+64     	; 0xfa0 <__vector_12+0x22a>
     f60:	c1 14       	cp	r12, r1
     f62:	d1 04       	cpc	r13, r1
     f64:	e9 f4       	brne	.+58     	; 0xfa0 <__vector_12+0x22a>
     f66:	40 2f       	mov	r20, r16
     f68:	4f 77       	andi	r20, 0x7F	; 127
     f6a:	84 2f       	mov	r24, r20
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	b8 f4       	brcc	.+46     	; 0xfa0 <__vector_12+0x22a>
     f72:	8e ef       	ldi	r24, 0xFE	; 254
     f74:	80 93 e8 00 	sts	0x00E8, r24
     f78:	40 93 e9 00 	sts	0x00E9, r20
     f7c:	33 30       	cpi	r19, 0x03	; 3
     f7e:	09 f4       	brne	.+2      	; 0xf82 <__vector_12+0x20c>
     f80:	55 c0       	rjmp	.+170    	; 0x102c <__vector_12+0x2b6>
     f82:	89 e1       	ldi	r24, 0x19	; 25
     f84:	80 93 eb 00 	sts	0x00EB, r24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <__vector_12+0x21c>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	4a 95       	dec	r20
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <__vector_12+0x218>
     f96:	80 93 ea 00 	sts	0x00EA, r24
     f9a:	10 92 ea 00 	sts	0x00EA, r1
     f9e:	49 c0       	rjmp	.+146    	; 0x1032 <__vector_12+0x2bc>
     fa0:	01 15       	cp	r16, r1
     fa2:	11 05       	cpc	r17, r1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__vector_12+0x232>
     fa6:	42 c0       	rjmp	.+132    	; 0x102c <__vector_12+0x2b6>
     fa8:	21 3a       	cpi	r18, 0xA1	; 161
     faa:	09 f5       	brne	.+66     	; 0xfee <__vector_12+0x278>
     fac:	31 30       	cpi	r19, 0x01	; 1
     fae:	89 f4       	brne	.+34     	; 0xfd2 <__vector_12+0x25c>
     fb0:	20 de       	rcall	.-960    	; 0xbf2 <usb_wait_in_ready>
     fb2:	80 91 3f 02 	lds	r24, 0x023F
     fb6:	80 93 f1 00 	sts	0x00F1, r24
     fba:	10 92 f1 00 	sts	0x00F1, r1
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	81 91       	ld	r24, Z+
     fc4:	80 93 f1 00 	sts	0x00F1, r24
     fc8:	22 e0       	ldi	r18, 0x02	; 2
     fca:	e6 34       	cpi	r30, 0x46	; 70
     fcc:	f2 07       	cpc	r31, r18
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__vector_12+0x24c>
     fd0:	29 c0       	rjmp	.+82     	; 0x1024 <__vector_12+0x2ae>
     fd2:	32 30       	cpi	r19, 0x02	; 2
     fd4:	21 f4       	brne	.+8      	; 0xfde <__vector_12+0x268>
     fd6:	0d de       	rcall	.-998    	; 0xbf2 <usb_wait_in_ready>
     fd8:	80 91 30 02 	lds	r24, 0x0230
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <__vector_12+0x272>
     fde:	33 30       	cpi	r19, 0x03	; 3
     fe0:	29 f5       	brne	.+74     	; 0x102c <__vector_12+0x2b6>
     fe2:	07 de       	rcall	.-1010   	; 0xbf2 <usb_wait_in_ready>
     fe4:	80 91 31 02 	lds	r24, 0x0231
     fe8:	80 93 f1 00 	sts	0x00F1, r24
     fec:	1b c0       	rjmp	.+54     	; 0x1024 <__vector_12+0x2ae>
     fee:	21 32       	cpi	r18, 0x21	; 33
     ff0:	e9 f4       	brne	.+58     	; 0x102c <__vector_12+0x2b6>
     ff2:	39 30       	cpi	r19, 0x09	; 9
     ff4:	61 f4       	brne	.+24     	; 0x100e <__vector_12+0x298>
     ff6:	80 91 e8 00 	lds	r24, 0x00E8
     ffa:	82 ff       	sbrs	r24, 2
     ffc:	fc cf       	rjmp	.-8      	; 0xff6 <__vector_12+0x280>
     ffe:	80 91 f1 00 	lds	r24, 0x00F1
    1002:	80 93 46 02 	sts	0x0246, r24
    1006:	8b ef       	ldi	r24, 0xFB	; 251
    1008:	80 93 e8 00 	sts	0x00E8, r24
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <__vector_12+0x2ae>
    100e:	3a 30       	cpi	r19, 0x0A	; 10
    1010:	29 f4       	brne	.+10     	; 0x101c <__vector_12+0x2a6>
    1012:	d0 92 30 02 	sts	0x0230, r13
    1016:	10 92 48 02 	sts	0x0248, r1
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <__vector_12+0x2ae>
    101c:	3b 30       	cpi	r19, 0x0B	; 11
    101e:	31 f4       	brne	.+12     	; 0x102c <__vector_12+0x2b6>
    1020:	c0 92 31 02 	sts	0x0231, r12
    1024:	8e ef       	ldi	r24, 0xFE	; 254
    1026:	80 93 e8 00 	sts	0x00E8, r24
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <__vector_12+0x2bc>
    102c:	81 e2       	ldi	r24, 0x21	; 33
    102e:	80 93 eb 00 	sts	0x00EB, r24
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <_exit>:
    1066:	f8 94       	cli

00001068 <__stop_program>:
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <__stop_program>
