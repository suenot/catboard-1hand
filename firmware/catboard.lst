   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.init_ports,"ax",@progbits
  11               	.global	init_ports
  13               	init_ports:
  14               	.LFB8:
  15               		.file 1 "at90usb162mu.h"
   1:at90usb162mu.h **** #define LED_CONFIG		(DDRD	|= (1<<6))
   2:at90usb162mu.h **** #define LED_OFF			(PORTD	|= (1<<6))
   3:at90usb162mu.h **** #define LED_ON			(PORTD	&= ~(1<<6))
   4:at90usb162mu.h **** 
   5:at90usb162mu.h **** #define LED_BLUE_CONFIG	(DDRD	|= (1<<1))
   6:at90usb162mu.h **** #define LED_BLUE_OFF		(PORTD	&= ~(1<<1))
   7:at90usb162mu.h **** #define LED_BLUE_ON		(PORTD	|= (1<<1))
   8:at90usb162mu.h **** 
   9:at90usb162mu.h **** #define LED_RED_CONFIG	(DDRC	|= (1<<6))
  10:at90usb162mu.h **** #define LED_RED_OFF	(PORTC	|= (1<<6))
  11:at90usb162mu.h **** #define LED_RED_ON		(PORTC	&= ~(1<<6))
  12:at90usb162mu.h **** 
  13:at90usb162mu.h **** #define FN_KEY_ID			7*5+4
  14:at90usb162mu.h **** 
  15:at90usb162mu.h **** // Init ports
  16:at90usb162mu.h **** void init_ports(void) {
  16               		.loc 1 16 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  17:at90usb162mu.h **** 	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
  22               		.loc 1 17 0
  23 0000 8AE4      		ldi r24,lo8(74)
  24 0002 84B9      		out 0x4,r24
  25 0004 80E2      		ldi r24,lo8(32)
  26 0006 87B9      		out 0x7,r24
  27 0008 84E0      		ldi r24,lo8(4)
  28 000a 8AB9      		out 0xa,r24
  18:at90usb162mu.h **** 	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
  29               		.loc 1 18 0
  30 000c 8FEF      		ldi r24,lo8(-1)
  31 000e 85B9      		out 0x5,r24
  32 0010 88B9      		out 0x8,r24
  33 0012 8BB9      		out 0xb,r24
  34 0014 0895      		ret
  35               		.cfi_endproc
  36               	.LFE8:
  38               		.section	.text.init,"ax",@progbits
  39               	.global	init
  41               	init:
  42               	.LFB10:
  43               		.file 2 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard ][
   3:catboard.c    **** * Version: 3.2 beta
   4:catboard.c    **** * Date: 2013-09-07
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * Blog: http://ibnteo.klava.org/tag/catboard
   8:catboard.c    **** * Site: http://catboard.klava.org/
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162MU (http://microsin.net/programming/AVR/avr-usb162mu.html) analogue Teensy 1.0
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"CatBoard"
  23:catboard.c    **** 
  24:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  25:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  26:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  27:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  28:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  29:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  30:catboard.c    **** 
  31:catboard.c    **** #define ROWS	5
  32:catboard.c    **** #define COLS	12
  33:catboard.c    **** #define KEYS	COLS*ROWS
  34:catboard.c    **** 
  35:catboard.c    **** //1=num lock, 2=caps lock, 4=scroll lock, 8=compose, 16=kana
  36:catboard.c    **** #define LED_NUM_LOCK		1
  37:catboard.c    **** #define LED_CAPS_LOCK		2
  38:catboard.c    **** #define LED_SCROLL_LOCK		4
  39:catboard.c    **** #define LED_COMPOSE			8
  40:catboard.c    **** #define LED_KANA			16
  41:catboard.c    **** 
  42:catboard.c    **** #define NULL				0
  43:catboard.c    **** #define NA					0
  44:catboard.c    **** // 109-127 - catboard
  45:catboard.c    **** #define KEY_CB_START		109
  46:catboard.c    **** #define KEY_LAYER1			109
  47:catboard.c    **** #define KEY_LAYER2			110
  48:catboard.c    **** #define KEY_MACRO			111
  49:catboard.c    **** // ...
  50:catboard.c    **** #define KEY_MY_SHIFT		119
  51:catboard.c    **** #define KEY_TYPO_MODE		120
  52:catboard.c    **** #define KEY_LED				121 // (+Shift)
  53:catboard.c    **** #define KEY_LOCK			122
  54:catboard.c    **** #define KEY_TURBO_REPEAT	123
  55:catboard.c    **** #define KEY_OS_MODE			124 // (+Shift)
  56:catboard.c    **** #define KEY_ALT_TAB			125
  57:catboard.c    **** #define KEY_FN_LOCK			126 // (+Shift)
  58:catboard.c    **** #define KEY_FN				127 // 127
  59:catboard.c    **** #define KEY_NULL			0
  60:catboard.c    **** 
  61:catboard.c    **** #define KEY_LCTRL	101
  62:catboard.c    **** #define KEY_LSHIFT	102
  63:catboard.c    **** #define KEY_LALT	103
  64:catboard.c    **** #define KEY_LGUI	104
  65:catboard.c    **** #define KEY_RCTRL	105
  66:catboard.c    **** #define KEY_RSHIFT	106
  67:catboard.c    **** #define KEY_RALT	107
  68:catboard.c    **** #define KEY_RGUI	108
  69:catboard.c    **** 
  70:catboard.c    **** 
  71:catboard.c    **** #define KEY_PRESSED_FN		1
  72:catboard.c    **** #define KEY_PRESSED_MODS	2
  73:catboard.c    **** #define KEY_PRESSED_ALT		3
  74:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  75:catboard.c    **** #define KEY_PRESSED_CTRL	5
  76:catboard.c    **** #define KEY_PRESSED_PREV	6
  77:catboard.c    **** 
  78:catboard.c    **** #include "qwerty.h"
  79:catboard.c    **** //#include "dvorak.h"
  80:catboard.c    **** // #include "jcuken.h"m
  81:catboard.c    **** //#include "at90usb162.h"
  82:catboard.c    **** #include "at90usb162mu.h"
  83:catboard.c    **** 
  84:catboard.c    **** //#include "my_macros.h"
  85:catboard.c    **** 
  86:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  87:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  88:catboard.c    **** 
  89:catboard.c    **** // Nonstandart hardware layout
  90:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
  91:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
  92:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
  93:catboard.c    **** 
  94:catboard.c    **** //#define KEY_LAYOUT		0
  95:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
  96:catboard.c    **** 
  97:catboard.c    **** // OS mode: 0 - Windows, 1 - Linux, 2 - Mac
  98:catboard.c    **** uint8_t os_mode = 1;
  99:catboard.c    **** 
 100:catboard.c    **** uint8_t caps_lock_led = 0;
 101:catboard.c    **** 
 102:catboard.c    **** // 0x00-0x7F - normal keys
 103:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
 104:catboard.c    **** // 0xF1-0xFF - catboard keys
 105:catboard.c    **** 
 106:catboard.c    **** // TODO: think...
 107:catboard.c    **** // 4-99 - Normal keys (96 keys)
 108:catboard.c    **** // 101-108|KEY_MOD - Mod keys (8 keys)
 109:catboard.c    **** // 109-127|KEY_MOD - CatBoard keys (19 keys)
 110:catboard.c    **** // n|0x80 - Shift inverse keys
 111:catboard.c    **** 
 112:catboard.c    **** 
 113:catboard.c    **** // Start layout
 114:catboard.c    **** uint8_t *layout = &layer2;
 115:catboard.c    **** 
 116:catboard.c    **** int8_t pressed[KEYS];
 117:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 118:catboard.c    **** uint8_t mod_keys = 0;
 119:catboard.c    **** uint8_t *prev_layer = 0;
 120:catboard.c    **** 
 121:catboard.c    **** uint8_t turbo_repeat = 1;
 122:catboard.c    **** uint8_t locked = 0;
 123:catboard.c    **** uint8_t led = 1; // LED light
 124:catboard.c    **** 
 125:catboard.c    **** uint8_t last_key = 0xFF;
 126:catboard.c    **** uint16_t press_time = 0;
 127:catboard.c    **** uint16_t press_time2 = 0;
 128:catboard.c    **** uint16_t release_time = 0;
 129:catboard.c    **** uint16_t repeat_time = 0;
 130:catboard.c    **** 
 131:catboard.c    **** void init(void);
 132:catboard.c    **** void send(void);
 133:catboard.c    **** void poll(void);
 134:catboard.c    **** void repeat_tick(void);
 135:catboard.c    **** void key_press(uint8_t key_id);
 136:catboard.c    **** void key_release(uint8_t key_id);
 137:catboard.c    **** uint8_t get_code(uint8_t key_id);
 138:catboard.c    **** 
 139:catboard.c    **** /*
 140:catboard.c    **** rus
 141:catboard.c    **** §!@#$%^&*()–»
 142:catboard.c    **** јџќ®†њѓѕў‘“ъ
 143:catboard.c    **** ƒыћ÷©}°љ∆…эё
 144:catboard.c    **** ]ђ≈≠µи™~≤≥“
 145:catboard.c    **** 
 146:catboard.c    **** rus shift
 147:catboard.c    **** ±|"£€∞¬¶√'`—«
 148:catboard.c    **** ЈЏЌ®†ЊЃЅЎ’”Ъ
 149:catboard.c    **** ƒЫЋ÷©{•Љ∆…ЭЁ
 150:catboard.c    **** [Ђ≈≠µИ™~<>„
 151:catboard.c    **** 
 152:catboard.c    **** lat
 153:catboard.c    **** §¡™£¢∞§¶•ªº–≠
 154:catboard.c    **** œ∑´®†¥¨ˆøπ“‘
 155:catboard.c    **** åß∂ƒ©˙∆˚¬…æ«
 156:catboard.c    **** `Ω≈ç√∫˜µ≤≥÷
 157:catboard.c    **** 
 158:catboard.c    **** lat shift
 159:catboard.c    **** ±⁄€‹›ﬁﬂ‡°·‚—±
 160:catboard.c    **** Œ„´‰ˇÁ¨ˆØ∏”’
 161:catboard.c    **** ÅÍÎÏ˝ÓÔÒÚÆ»
 162:catboard.c    **** `¸˛Ç◊ı˜Â¯˘¿
 163:catboard.c    **** */
 164:catboard.c    **** 
 165:catboard.c    **** 
 166:catboard.c    **** int main(void) {
 167:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 168:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 169:catboard.c    **** 	wdt_disable();
 170:catboard.c    **** 
 171:catboard.c    **** 	// Disable clock division
 172:catboard.c    **** 	clock_prescale_set(clock_div_1);
 173:catboard.c    **** 
 174:catboard.c    **** 	init();
 175:catboard.c    **** 	for (;;) {
 176:catboard.c    **** 		poll();
 177:catboard.c    **** 	}
 178:catboard.c    **** }
 179:catboard.c    **** 
 180:catboard.c    **** void init(void) {
  44               		.loc 2 180 0
  45               		.cfi_startproc
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 0 */
  49               	.L__stack_usage = 0
 181:catboard.c    **** 	// Set for 16 MHz clock
 182:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  50               		.loc 2 182 0
  51 0000 80E8      		ldi r24,lo8(-128)
  52 0002 8093 6100 		sts 97,r24
  53 0006 1092 6100 		sts 97,__zero_reg__
 183:catboard.c    **** 
 184:catboard.c    **** 	init_ports();
  54               		.loc 2 184 0
  55 000a 0E94 0000 		call init_ports
  56               	.LVL0:
 185:catboard.c    **** 
 186:catboard.c    **** 	LED_CONFIG;
  57               		.loc 2 186 0
  58 000e 569A      		sbi 0xa,6
 187:catboard.c    **** 	LED_RED_CONFIG;
  59               		.loc 2 187 0
  60 0010 3E9A      		sbi 0x7,6
 188:catboard.c    **** 	LED_BLUE_CONFIG;
  61               		.loc 2 188 0
  62 0012 519A      		sbi 0xa,1
 189:catboard.c    **** 
 190:catboard.c    **** 	LED_RED_OFF;
  63               		.loc 2 190 0
  64 0014 469A      		sbi 0x8,6
 191:catboard.c    **** 	LED_BLUE_OFF;
  65               		.loc 2 191 0
  66 0016 5998      		cbi 0xb,1
 192:catboard.c    **** 	if (led) LED_ON;
  67               		.loc 2 192 0
  68 0018 8091 0000 		lds r24,led
  69 001c 8111      		cpse r24,__zero_reg__
  70               		.loc 2 192 0 is_stmt 0 discriminator 1
  71 001e 5E98      		cbi 0xb,6
  72               	.L3:
  73               	.LVL1:
  74 0020 E0E0      		ldi r30,lo8(pressed)
  75 0022 F0E0      		ldi r31,hi8(pressed)
  76               	.LVL2:
  77               	.L5:
  78               	.LBB19:
 193:catboard.c    **** 
 194:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 195:catboard.c    **** 		pressed[i] = 0;
  79               		.loc 2 195 0 is_stmt 1 discriminator 2
  80 0024 1192      		st Z+,__zero_reg__
  81               	.LVL3:
 194:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  82               		.loc 2 194 0 discriminator 2
  83 0026 80E0      		ldi r24,hi8(pressed+60)
  84 0028 E030      		cpi r30,lo8(pressed+60)
  85 002a F807      		cpc r31,r24
  86 002c 01F4      		brne .L5
  87               	.LBE19:
 196:catboard.c    **** 	}
 197:catboard.c    **** 
 198:catboard.c    **** 	usb_init();
  88               		.loc 2 198 0
  89 002e 0E94 0000 		call usb_init
  90               	.LVL4:
  91               	.L7:
 199:catboard.c    **** 	while(!usb_configured());
  92               		.loc 2 199 0 discriminator 1
  93 0032 0E94 0000 		call usb_configured
  94               	.LVL5:
  95 0036 8823      		tst r24
  96 0038 01F0      		breq .L7
 200:catboard.c    **** 	LED_OFF;
  97               		.loc 2 200 0
  98 003a 5E9A      		sbi 0xb,6
 201:catboard.c    **** 	if (led) LED_RED_ON;
  99               		.loc 2 201 0
 100 003c 8091 0000 		lds r24,led
 101 0040 8111      		cpse r24,__zero_reg__
 102               		.loc 2 201 0 is_stmt 0 discriminator 1
 103 0042 4698      		cbi 0x8,6
 104               	.L8:
 202:catboard.c    **** 	caps_lock_led = keyboard_leds;
 105               		.loc 2 202 0 is_stmt 1
 106 0044 8091 0000 		lds r24,keyboard_leds
 107 0048 8093 0000 		sts caps_lock_led,r24
 108 004c 0895      		ret
 109               		.cfi_endproc
 110               	.LFE10:
 112               		.section	.text.caps_lock_change_layer,"ax",@progbits
 113               	.global	caps_lock_change_layer
 115               	caps_lock_change_layer:
 116               	.LFB12:
 203:catboard.c    **** }
 204:catboard.c    **** 
 205:catboard.c    **** void poll() {
 206:catboard.c    **** 	uint8_t row, col, key_id;
 207:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 208:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 209:catboard.c    **** 		_delay_us(1);
 210:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 211:catboard.c    **** 			key_id = col*ROWS+row;
 212:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 213:catboard.c    **** 				if (! pressed[key_id]) {
 214:catboard.c    **** 					key_press(key_id);
 215:catboard.c    **** 				}
 216:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 217:catboard.c    **** 				key_release(key_id);
 218:catboard.c    **** 			}
 219:catboard.c    **** 		}
 220:catboard.c    **** 		*row_port[row] |= row_bit[row];
 221:catboard.c    **** 	}
 222:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 223:catboard.c    **** 		caps_lock_change_layer();
 224:catboard.c    **** 	}
 225:catboard.c    **** 	//if (keyboard_leds) LED_ON; else LED_OFF;
 226:catboard.c    **** 	repeat_tick();
 227:catboard.c    **** 	_delay_ms(5);
 228:catboard.c    **** }
 229:catboard.c    **** 
 230:catboard.c    **** void caps_lock_change_layer() {
 117               		.loc 2 230 0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 231:catboard.c    **** 	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
 123               		.loc 2 231 0
 124 0000 2091 0000 		lds r18,keyboard_leds
 125 0004 2270      		andi r18,lo8(2)
 126 0006 2093 0000 		sts caps_lock_led,r18
 127 000a 8091 0000 		lds r24,layout
 128 000e 9091 0000 		lds r25,layout+1
 232:catboard.c    **** 	if ((caps_lock_led) && (layout != layer1)) {
 129               		.loc 2 232 0
 130 0012 2223      		tst r18
 131 0014 01F0      		breq .L17
 132               		.loc 2 232 0 is_stmt 0 discriminator 1
 133 0016 20E0      		ldi r18,hi8(layer1)
 134 0018 8030      		cpi r24,lo8(layer1)
 135 001a 9207      		cpc r25,r18
 136 001c 01F0      		breq .L16
 233:catboard.c    **** 		if (layout==layer_fn) {
 137               		.loc 2 233 0 is_stmt 1
 138 001e 8050      		subi r24,lo8(layer_fn)
 139 0020 9040      		sbci r25,hi8(layer_fn)
 140 0022 01F4      		brne .L20
 234:catboard.c    **** 			prev_layer = layer1;
 141               		.loc 2 234 0
 142 0024 80E0      		ldi r24,lo8(layer1)
 143 0026 90E0      		ldi r25,hi8(layer1)
 144 0028 9093 0000 		sts prev_layer+1,r25
 145 002c 8093 0000 		sts prev_layer,r24
 146 0030 00C0      		rjmp .L21
 147               	.L20:
 235:catboard.c    **** 		} else {
 236:catboard.c    **** 			layout = layer1;
 148               		.loc 2 236 0
 149 0032 80E0      		ldi r24,lo8(layer1)
 150 0034 90E0      		ldi r25,hi8(layer1)
 151 0036 9093 0000 		sts layout+1,r25
 152 003a 8093 0000 		sts layout,r24
 153               	.L21:
 237:catboard.c    **** 		}
 238:catboard.c    **** 		LED_RED_OFF;
 154               		.loc 2 238 0
 155 003e 469A      		sbi 0x8,6
 239:catboard.c    **** 		if (led) LED_BLUE_ON;
 156               		.loc 2 239 0
 157 0040 8091 0000 		lds r24,led
 158 0044 8823      		tst r24
 159 0046 01F0      		breq .L16
 160               		.loc 2 239 0 is_stmt 0 discriminator 1
 161 0048 599A      		sbi 0xb,1
 162 004a 0895      		ret
 163               	.L17:
 240:catboard.c    **** 	} else if ((! caps_lock_led) && (layout != layer2)) {
 164               		.loc 2 240 0 is_stmt 1 discriminator 1
 165 004c 20E0      		ldi r18,hi8(layer2)
 166 004e 8030      		cpi r24,lo8(layer2)
 167 0050 9207      		cpc r25,r18
 168 0052 01F0      		breq .L16
 241:catboard.c    **** 		if (layout==layer_fn) {
 169               		.loc 2 241 0
 170 0054 8050      		subi r24,lo8(layer_fn)
 171 0056 9040      		sbci r25,hi8(layer_fn)
 172 0058 01F4      		brne .L23
 242:catboard.c    **** 			prev_layer = layer2;
 173               		.loc 2 242 0
 174 005a 80E0      		ldi r24,lo8(layer2)
 175 005c 90E0      		ldi r25,hi8(layer2)
 176 005e 9093 0000 		sts prev_layer+1,r25
 177 0062 8093 0000 		sts prev_layer,r24
 178 0066 00C0      		rjmp .L24
 179               	.L23:
 243:catboard.c    **** 		} else {
 244:catboard.c    **** 			layout = layer2;
 180               		.loc 2 244 0
 181 0068 80E0      		ldi r24,lo8(layer2)
 182 006a 90E0      		ldi r25,hi8(layer2)
 183 006c 9093 0000 		sts layout+1,r25
 184 0070 8093 0000 		sts layout,r24
 185               	.L24:
 245:catboard.c    **** 		}
 246:catboard.c    **** 		LED_BLUE_OFF;
 186               		.loc 2 246 0
 187 0074 5998      		cbi 0xb,1
 247:catboard.c    **** 		if (led) LED_RED_ON;
 188               		.loc 2 247 0
 189 0076 8091 0000 		lds r24,led
 190 007a 8111      		cpse r24,__zero_reg__
 191               		.loc 2 247 0 is_stmt 0 discriminator 1
 192 007c 4698      		cbi 0x8,6
 193               	.L16:
 194 007e 0895      		ret
 195               		.cfi_endproc
 196               	.LFE12:
 198               		.section	.text.change_layout,"ax",@progbits
 199               	.global	change_layout
 201               	change_layout:
 202               	.LFB16:
 248:catboard.c    **** 	}
 249:catboard.c    **** }
 250:catboard.c    **** 
 251:catboard.c    **** void repeat_tick(void) {
 252:catboard.c    **** 	if (repeat_time) { // repeat pause
 253:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 254:catboard.c    **** 			repeat_time++;
 255:catboard.c    **** 		} else { // repeat press
 256:catboard.c    **** 			repeat_time = 1;
 257:catboard.c    **** 			if (turbo_repeat) {
 258:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 259:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 260:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 261:catboard.c    **** 					keyboard_keys[0] = 0;
 262:catboard.c    **** 					usb_keyboard_send();
 263:catboard.c    **** 				}
 264:catboard.c    **** 			}
 265:catboard.c    **** 		}
 266:catboard.c    **** 	} else if (press_time2) { // press2 pause
 267:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 268:catboard.c    **** 			press_time2++;
 269:catboard.c    **** 		} else {
 270:catboard.c    **** 			repeat_time = 1;
 271:catboard.c    **** 		}
 272:catboard.c    **** 	} else if (release_time) { // release pause
 273:catboard.c    **** 		if (release_time<(press_time+50)) {
 274:catboard.c    **** 			release_time++;
 275:catboard.c    **** 		} else {
 276:catboard.c    **** 			last_key = 0xFF;
 277:catboard.c    **** 			release_time = 0;
 278:catboard.c    **** 			press_time = 0;
 279:catboard.c    **** 			press_time2 = 0;
 280:catboard.c    **** 			release_time = 0;
 281:catboard.c    **** 		}
 282:catboard.c    **** 	} else if (press_time) { // press1 pause
 283:catboard.c    **** 		if (press_time<250) {
 284:catboard.c    **** 			press_time++;
 285:catboard.c    **** 		} else {
 286:catboard.c    **** 			press_time = 0;
 287:catboard.c    **** 		}
 288:catboard.c    **** 	}	
 289:catboard.c    **** }
 290:catboard.c    **** 
 291:catboard.c    **** void key_press(uint8_t key_id) {
 292:catboard.c    **** 	uint8_t i;
 293:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 294:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 295:catboard.c    **** 	
 296:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 297:catboard.c    **** 	if (key_code==NULL) {
 298:catboard.c    **** 		key_code = layout[key_id];
 299:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 300:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 301:catboard.c    **** 			key_code = prev_layer[key_id];
 302:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 303:catboard.c    **** 		}
 304:catboard.c    **** 	}
 305:catboard.c    **** 
 306:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 307:catboard.c    **** 	
 308:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 309:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 310:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 311:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 312:catboard.c    **** 			} else { // Alt press, Tab press and release
 313:catboard.c    **** 				if (! mod_keys) {
 314:catboard.c    **** 					mod_keys |= (KEY_ALT);
 315:catboard.c    **** 				} else {
 316:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 317:catboard.c    **** 				}
 318:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 319:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 320:catboard.c    **** 				usb_keyboard_send();
 321:catboard.c    **** 				_delay_ms(50);
 322:catboard.c    **** 				send();
 323:catboard.c    **** 			}
 324:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 325:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 326:catboard.c    **** 				if (prev_layer) { // FnLock Off
 327:catboard.c    **** 					layout = prev_layer;
 328:catboard.c    **** 					prev_layer = 0;
 329:catboard.c    **** 				} else { // FnLock On
 330:catboard.c    **** 					prev_layer = layout;
 331:catboard.c    **** 					layout = layer_fnlock;
 332:catboard.c    **** 				}
 333:catboard.c    **** 			}
 334:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 335:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 336:catboard.c    **** 				os_mode++;
 337:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 338:catboard.c    **** 			} else { // Press Space
 339:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 340:catboard.c    **** 			}
 341:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 342:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 343:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 344:catboard.c    **** 				mod_keys |= KEY_CTRL;
 345:catboard.c    **** 				send();
 346:catboard.c    **** 			} else {
 347:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 348:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 349:catboard.c    **** 				send();
 350:catboard.c    **** 			}
 351:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 352:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 353:catboard.c    **** 			send();
 354:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 355:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 356:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 357:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 358:catboard.c    **** 			send();
 359:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 360:catboard.c    **** 			/*uint8_t macros_pos_index = 0;
 361:catboard.c    **** 			for (i==0; i<sizeof(macros_pos); i++) {
 362:catboard.c    **** 				if (key_id==macros_pos[i]) {
 363:catboard.c    **** 					macros_pos_index = i;
 364:catboard.c    **** 					break;
 365:catboard.c    **** 				}
 366:catboard.c    **** 			}
 367:catboard.c    **** 			uint16_t *macros;
 368:catboard.c    **** 			uint16_t *macros = macros_press[macros_pos_index];
 369:catboard.c    **** 			for (i==0; i<sizeof(macros); i=i+2) {
 370:catboard.c    **** 				usb_keyboard_press(macros[i], macros[i+1]);
 371:catboard.c    **** 			}*/
 372:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 373:catboard.c    **** 			if (locked) {
 374:catboard.c    **** 				locked = 0;
 375:catboard.c    **** 				if (led) {
 376:catboard.c    **** 					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 377:catboard.c    **** 					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 378:catboard.c    **** 				}
 379:catboard.c    **** 			} else {
 380:catboard.c    **** 				locked = 1;
 381:catboard.c    **** 				LED_OFF;
 382:catboard.c    **** 				LED_RED_OFF;
 383:catboard.c    **** 				LED_BLUE_OFF;
 384:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 385:catboard.c    **** 			}
 386:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 387:catboard.c    **** 			if (led) {
 388:catboard.c    **** 				led = 0;
 389:catboard.c    **** 				LED_OFF;
 390:catboard.c    **** 				LED_RED_OFF;
 391:catboard.c    **** 				LED_BLUE_OFF;
 392:catboard.c    **** 			} else {
 393:catboard.c    **** 				led = 1;
 394:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 395:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 396:catboard.c    **** 			}
 397:catboard.c    **** 		}
 398:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 399:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 400:catboard.c    **** 			mod_keys |= KEY_GUI;
 401:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 402:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 403:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 404:catboard.c    **** 			mod_keys |= KEY_CTRL;
 405:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 406:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 407:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 408:catboard.c    **** 			mod_keys |= KEY_ALT;
 409:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 410:catboard.c    **** 			mod_keys |= KEY_GUI;
 411:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 412:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 413:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 414:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 415:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 416:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 417:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 418:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 419:catboard.c    **** 		}
 420:catboard.c    **** 		send();
 421:catboard.c    **** 		press_time = 0;
 422:catboard.c    **** 		press_time2 = 0;
 423:catboard.c    **** 		release_time = 0;
 424:catboard.c    **** 		repeat_time = 0;
 425:catboard.c    **** 		last_key = 0;
 426:catboard.c    **** 	} else {
 427:catboard.c    **** 		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
 428:catboard.c    **** 			uint16_t num = layer2_typo[0];
 429:catboard.c    **** 			char str[4];
 430:catboard.c    **** 			itoa(num, &str, 16);
 431:catboard.c    **** 		}*/
 432:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 433:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 434:catboard.c    **** 			queue[0] = key_id;
 435:catboard.c    **** 			send();
 436:catboard.c    **** 		}
 437:catboard.c    **** 	}
 438:catboard.c    **** 	// Autorepeat
 439:catboard.c    **** 	if (last_key==key_id) { // calc press2
 440:catboard.c    **** 		press_time2 = 1;
 441:catboard.c    **** 		repeat_time = 0;
 442:catboard.c    **** 	} else { // calc press1
 443:catboard.c    **** 		last_key = key_id;
 444:catboard.c    **** 		press_time = 1;
 445:catboard.c    **** 		press_time2 = 0;
 446:catboard.c    **** 		release_time = 0;
 447:catboard.c    **** 		repeat_time = 0;
 448:catboard.c    **** 	}
 449:catboard.c    **** }
 450:catboard.c    **** 
 451:catboard.c    **** void key_release(uint8_t key_id) {
 452:catboard.c    **** 	uint8_t i;
 453:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 454:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 455:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 456:catboard.c    **** 		key_code = prev_layer[key_id];
 457:catboard.c    **** 	}
 458:catboard.c    **** 	pressed[key_id] = 0;
 459:catboard.c    **** 	if (locked) return;
 460:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 461:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 462:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 463:catboard.c    **** 			send();
 464:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 465:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 466:catboard.c    **** 			send();
 467:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // LAYER1
 468:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 469:catboard.c    **** 			send();
 470:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 471:catboard.c    **** 				if (layout!=layer1) {
 472:catboard.c    **** 					if (layout==layer_fn) {
 473:catboard.c    **** 						prev_layer = layer1;
 474:catboard.c    **** 					} else {
 475:catboard.c    **** 						layout = layer1;
 476:catboard.c    **** 					}
 477:catboard.c    **** 					change_layout();
 478:catboard.c    **** 					//LED_ON;
 479:catboard.c    **** 					LED_RED_OFF;
 480:catboard.c    **** 					if (led) LED_BLUE_ON;
 481:catboard.c    **** 				}
 482:catboard.c    **** 			}
 483:catboard.c    **** 			last_key = 0xFF;
 484:catboard.c    **** 			press_time = 0;
 485:catboard.c    **** 			press_time2 = 0;
 486:catboard.c    **** 			release_time = 0;
 487:catboard.c    **** 			repeat_time = 0;
 488:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 489:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 490:catboard.c    **** 			send();
 491:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 492:catboard.c    **** 				if (layout!=layer2) {
 493:catboard.c    **** 					if (layout==layer_fn) {
 494:catboard.c    **** 						prev_layer = layer2;
 495:catboard.c    **** 					} else {
 496:catboard.c    **** 						layout = layer2;
 497:catboard.c    **** 					}
 498:catboard.c    **** 					change_layout();
 499:catboard.c    **** 					//LED_OFF;
 500:catboard.c    **** 					LED_BLUE_OFF;
 501:catboard.c    **** 					if (led) LED_RED_ON;
 502:catboard.c    **** 				}
 503:catboard.c    **** 			}
 504:catboard.c    **** 			last_key = 0xFF;
 505:catboard.c    **** 			press_time = 0;
 506:catboard.c    **** 			press_time2 = 0;
 507:catboard.c    **** 			release_time = 0;
 508:catboard.c    **** 			repeat_time = 0;
 509:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 510:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 511:catboard.c    **** 			send();
 512:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 513:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 514:catboard.c    **** 			}
 515:catboard.c    **** 			last_key = 0xFF;
 516:catboard.c    **** 			press_time = 0;
 517:catboard.c    **** 			press_time2 = 0;
 518:catboard.c    **** 			release_time = 0;
 519:catboard.c    **** 			repeat_time = 0;
 520:catboard.c    **** 		}
 521:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 522:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 523:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 524:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 525:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 526:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 527:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 528:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 529:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 530:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 531:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 532:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 533:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 534:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 535:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 536:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 537:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_SHIFT;
 538:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 539:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 540:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 541:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 542:catboard.c    **** 		}
 543:catboard.c    **** 		send();
 544:catboard.c    **** 		press_time = 0;
 545:catboard.c    **** 		press_time2 = 0;
 546:catboard.c    **** 		release_time = 0;
 547:catboard.c    **** 		repeat_time = 0;
 548:catboard.c    **** 		last_key = 0;
 549:catboard.c    **** 	} else {
 550:catboard.c    **** 		for (i=0; i<6; i++) {
 551:catboard.c    **** 			if (queue[i]==key_id) {
 552:catboard.c    **** 				break;
 553:catboard.c    **** 			}
 554:catboard.c    **** 		}
 555:catboard.c    **** 		for (; i<6; i++) {
 556:catboard.c    **** 			queue[i] = queue[i+1];
 557:catboard.c    **** 		}
 558:catboard.c    **** 		send();
 559:catboard.c    **** 		// Autorepeat
 560:catboard.c    **** 		if (last_key==key_id) { // realise time
 561:catboard.c    **** 			press_time2 = 0;
 562:catboard.c    **** 			release_time = 1;
 563:catboard.c    **** 			repeat_time = 0;
 564:catboard.c    **** 		} else { // reset
 565:catboard.c    **** 			press_time = 0;
 566:catboard.c    **** 			press_time2 = 0;
 567:catboard.c    **** 			release_time = 0;
 568:catboard.c    **** 			repeat_time = 0;
 569:catboard.c    **** 		}
 570:catboard.c    **** 	}
 571:catboard.c    **** }
 572:catboard.c    **** 
 573:catboard.c    **** void change_layout(void) {
 203               		.loc 2 573 0 is_stmt 1
 204               		.cfi_startproc
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
 574:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
 209               		.loc 2 574 0
 210 0000 8091 0000 		lds r24,os_mode
 211 0004 8230      		cpi r24,lo8(2)
 212 0006 01F4      		brne .L35
 213               	.LBB30:
 214               	.LBB31:
 575:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 215               		.loc 2 575 0
 216 0008 88E0      		ldi r24,lo8(8)
 217 000a 8093 0000 		sts keyboard_modifier_keys,r24
 576:catboard.c    **** 		keyboard_keys[0] = 0;
 218               		.loc 2 576 0
 219 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 577:catboard.c    **** 		usb_keyboard_send();
 220               		.loc 2 577 0
 221 0012 0E94 0000 		call usb_keyboard_send
 222               	.LVL6:
 223               	.LBB32:
 224               	.LBB33:
 225               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 226               		.loc 3 164 0
 227 0016 2FEF      		ldi r18,lo8(159999)
 228 0018 80E7      		ldi r24,hi8(159999)
 229 001a 92E0      		ldi r25,hlo8(159999)
 230 001c 2150      		1: subi r18,1
 231 001e 8040      		sbci r24,0
 232 0020 9040      		sbci r25,0
 233 0022 01F4      		brne 1b
 234 0024 00C0      		rjmp .
 235 0026 0000      		nop
 236               	.LBE33:
 237               	.LBE32:
 578:catboard.c    **** 		_delay_ms(50);
 579:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 238               		.loc 2 579 0
 239 0028 68E0      		ldi r22,lo8(8)
 240 002a 8CE2      		ldi r24,lo8(44)
 241 002c 00C0      		rjmp .L36
 242               	.LVL7:
 243               	.L35:
 244               	.LBE31:
 245               	.LBE30:
 580:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 581:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 246               		.loc 2 581 0
 247 002e 84E0      		ldi r24,lo8(4)
 248 0030 8093 0000 		sts keyboard_modifier_keys,r24
 582:catboard.c    **** 		keyboard_keys[0] = 0;
 249               		.loc 2 582 0
 250 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 583:catboard.c    **** 		usb_keyboard_send();
 251               		.loc 2 583 0
 252 0038 0E94 0000 		call usb_keyboard_send
 253               	.LVL8:
 254               	.LBB34:
 255               	.LBB35:
 256               		.loc 3 164 0
 257 003c 2FEF      		ldi r18,lo8(159999)
 258 003e 80E7      		ldi r24,hi8(159999)
 259 0040 92E0      		ldi r25,hlo8(159999)
 260 0042 2150      		1: subi r18,1
 261 0044 8040      		sbci r24,0
 262 0046 9040      		sbci r25,0
 263 0048 01F4      		brne 1b
 264 004a 00C0      		rjmp .
 265 004c 0000      		nop
 266               	.LBE35:
 267               	.LBE34:
 584:catboard.c    **** 		_delay_ms(50);
 585:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 268               		.loc 2 585 0
 269 004e 66E0      		ldi r22,lo8(6)
 270 0050 80E0      		ldi r24,0
 271               	.LVL9:
 272               	.L36:
 273 0052 0C94 0000 		jmp usb_keyboard_press
 274               	.LVL10:
 275               		.cfi_endproc
 276               	.LFE16:
 278               		.section	.text.get_code,"ax",@progbits
 279               	.global	get_code
 281               	get_code:
 282               	.LFB18:
 586:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 587:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 588:catboard.c    **** 		keyboard_keys[0] = 0;
 589:catboard.c    **** 		usb_keyboard_send();
 590:catboard.c    **** 		_delay_ms(50);
 591:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 592:catboard.c    **** 	}
 593:catboard.c    **** }
 594:catboard.c    **** 
 595:catboard.c    **** void send(void) {
 596:catboard.c    **** 	uint8_t i;
 597:catboard.c    **** 	for (i=0; i<6; i++) {
 598:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 599:catboard.c    **** 	}
 600:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 601:catboard.c    **** 	usb_keyboard_send();
 602:catboard.c    **** }
 603:catboard.c    **** 
 604:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 283               		.loc 2 604 0
 284               		.cfi_startproc
 285               	.LVL11:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 605:catboard.c    **** 	uint8_t key_code = 0;
 606:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 290               		.loc 2 606 0
 291 0000 8C33      		cpi r24,lo8(60)
 292 0002 00F4      		brsh .L42
 293               	.LVL12:
 294               	.LBB38:
 295               	.LBB39:
 607:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 296               		.loc 2 607 0
 297 0004 90E0      		ldi r25,0
 298 0006 FC01      		movw r30,r24
 299 0008 E050      		subi r30,lo8(-(pressed))
 300 000a F040      		sbci r31,hi8(-(pressed))
 301 000c 4081      		ld r20,Z
 302 000e 4130      		cpi r20,lo8(1)
 303 0010 01F4      		brne .L39
 608:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 304               		.loc 2 608 0
 305 0012 FC01      		movw r30,r24
 306 0014 E050      		subi r30,lo8(-(layer_fn))
 307 0016 F040      		sbci r31,hi8(-(layer_fn))
 308 0018 8081      		ld r24,Z
 309               	.LVL13:
 310 001a 1816      		cp __zero_reg__,r24
 311 001c 04F0      		brlt .L38
 312 001e 00C0      		rjmp .L42
 313               	.LVL14:
 314               	.L39:
 609:catboard.c    **** 				key_code = layer_fn[key_id];
 610:catboard.c    **** 			}
 611:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 315               		.loc 2 611 0
 316 0020 2091 0000 		lds r18,layout
 317 0024 3091 0000 		lds r19,layout+1
 318 0028 50E0      		ldi r21,hi8(layer_fn)
 319 002a 2030      		cpi r18,lo8(layer_fn)
 320 002c 3507      		cpc r19,r21
 321 002e 01F0      		breq .L41
 322 0030 4230      		cpi r20,lo8(2)
 323 0032 01F4      		brne .L41
 612:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 324               		.loc 2 612 0
 325 0034 FC01      		movw r30,r24
 326 0036 E050      		subi r30,lo8(-(layer1))
 327 0038 F040      		sbci r31,hi8(-(layer1))
 328 003a 00C0      		rjmp .L46
 329               	.L41:
 613:catboard.c    **** 		} else {
 614:catboard.c    **** 			key_code = layout[key_id];
 330               		.loc 2 614 0
 331 003c F901      		movw r30,r18
 332 003e E80F      		add r30,r24
 333 0040 F91F      		adc r31,r25
 334               	.L46:
 335 0042 8081      		ld r24,Z
 336               	.LVL15:
 337 0044 0895      		ret
 338               	.LVL16:
 339               	.L42:
 340               	.LBE39:
 341               	.LBE38:
 605:catboard.c    **** 	uint8_t key_code = 0;
 342               		.loc 2 605 0
 343 0046 80E0      		ldi r24,0
 344               	.L38:
 345               	.LVL17:
 615:catboard.c    **** 		}
 616:catboard.c    **** 	}
 617:catboard.c    **** 	return key_code;
 618:catboard.c    **** }
 346               		.loc 2 618 0
 347 0048 0895      		ret
 348               		.cfi_endproc
 349               	.LFE18:
 351               		.section	.text.repeat_tick,"ax",@progbits
 352               	.global	repeat_tick
 354               	repeat_tick:
 355               	.LFB13:
 251:catboard.c    **** void repeat_tick(void) {
 356               		.loc 2 251 0
 357               		.cfi_startproc
 358               	/* prologue: function */
 359               	/* frame size = 0 */
 360               	/* stack size = 0 */
 361               	.L__stack_usage = 0
 252:catboard.c    **** 	if (repeat_time) { // repeat pause
 362               		.loc 2 252 0
 363 0000 8091 0000 		lds r24,repeat_time
 364 0004 9091 0000 		lds r25,repeat_time+1
 365 0008 0097      		sbiw r24,0
 366 000a 01F0      		breq .L48
 253:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 367               		.loc 2 253 0
 368 000c 2091 0000 		lds r18,release_time
 369 0010 3091 0000 		lds r19,release_time+1
 370 0014 3695      		lsr r19
 371 0016 2795      		ror r18
 372 0018 3695      		lsr r19
 373 001a 2795      		ror r18
 374 001c 8217      		cp r24,r18
 375 001e 9307      		cpc r25,r19
 376 0020 00F4      		brsh .L49
 254:catboard.c    **** 			repeat_time++;
 377               		.loc 2 254 0
 378 0022 0196      		adiw r24,1
 379 0024 00C0      		rjmp .L63
 380               	.L49:
 256:catboard.c    **** 			repeat_time = 1;
 381               		.loc 2 256 0
 382 0026 81E0      		ldi r24,lo8(1)
 383 0028 90E0      		ldi r25,0
 384 002a 9093 0000 		sts repeat_time+1,r25
 385 002e 8093 0000 		sts repeat_time,r24
 257:catboard.c    **** 			if (turbo_repeat) {
 386               		.loc 2 257 0
 387 0032 8091 0000 		lds r24,turbo_repeat
 388 0036 8823      		tst r24
 389 0038 01F4      		brne .+2
 390 003a 00C0      		rjmp .L47
 258:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 391               		.loc 2 258 0
 392 003c 8091 0000 		lds r24,mod_keys
 393 0040 8093 0000 		sts keyboard_modifier_keys,r24
 259:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 394               		.loc 2 259 0
 395 0044 8091 0000 		lds r24,last_key
 396 0048 0E94 0000 		call get_code
 397               	.LVL18:
 398 004c 8093 0000 		sts keyboard_keys,r24
 260:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 399               		.loc 2 260 0
 400 0050 0E94 0000 		call usb_keyboard_send
 401               	.LVL19:
 402 0054 8111      		cpse r24,__zero_reg__
 403 0056 00C0      		rjmp .L47
 261:catboard.c    **** 					keyboard_keys[0] = 0;
 404               		.loc 2 261 0
 405 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 262:catboard.c    **** 					usb_keyboard_send();
 406               		.loc 2 262 0
 407 005c 0C94 0000 		jmp usb_keyboard_send
 408               	.LVL20:
 409               	.L48:
 266:catboard.c    **** 	} else if (press_time2) { // press2 pause
 410               		.loc 2 266 0
 411 0060 2091 0000 		lds r18,press_time2
 412 0064 3091 0000 		lds r19,press_time2+1
 413 0068 8091 0000 		lds r24,press_time
 414 006c 9091 0000 		lds r25,press_time+1
 415 0070 2115      		cp r18,__zero_reg__
 416 0072 3105      		cpc r19,__zero_reg__
 417 0074 01F0      		breq .L53
 267:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 418               		.loc 2 267 0
 419 0076 4091 0000 		lds r20,pressed+39
 420 007a 4423      		tst r20
 421 007c 01F0      		breq .L59
 422 007e 45E0      		ldi r20,lo8(5)
 423 0080 50E0      		ldi r21,0
 424 0082 00C0      		rjmp .L54
 425               	.L59:
 426 0084 4EE1      		ldi r20,lo8(30)
 427 0086 50E0      		ldi r21,0
 428               	.L54:
 267:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 429               		.loc 2 267 0 is_stmt 0 discriminator 3
 430 0088 840F      		add r24,r20
 431 008a 951F      		adc r25,r21
 432 008c 2817      		cp r18,r24
 433 008e 3907      		cpc r19,r25
 434 0090 00F4      		brsh .L55
 268:catboard.c    **** 			press_time2++;
 435               		.loc 2 268 0 is_stmt 1
 436 0092 2F5F      		subi r18,-1
 437 0094 3F4F      		sbci r19,-1
 438 0096 3093 0000 		sts press_time2+1,r19
 439 009a 2093 0000 		sts press_time2,r18
 440 009e 0895      		ret
 441               	.L55:
 270:catboard.c    **** 			repeat_time = 1;
 442               		.loc 2 270 0
 443 00a0 81E0      		ldi r24,lo8(1)
 444 00a2 90E0      		ldi r25,0
 445               	.L63:
 446 00a4 9093 0000 		sts repeat_time+1,r25
 447 00a8 8093 0000 		sts repeat_time,r24
 448 00ac 0895      		ret
 449               	.L53:
 272:catboard.c    **** 	} else if (release_time) { // release pause
 450               		.loc 2 272 0
 451 00ae 2091 0000 		lds r18,release_time
 452 00b2 3091 0000 		lds r19,release_time+1
 453 00b6 2115      		cp r18,__zero_reg__
 454 00b8 3105      		cpc r19,__zero_reg__
 455 00ba 01F0      		breq .L56
 273:catboard.c    **** 		if (release_time<(press_time+50)) {
 456               		.loc 2 273 0
 457 00bc C296      		adiw r24,50
 458 00be 2817      		cp r18,r24
 459 00c0 3907      		cpc r19,r25
 460 00c2 00F4      		brsh .L57
 274:catboard.c    **** 			release_time++;
 461               		.loc 2 274 0
 462 00c4 2F5F      		subi r18,-1
 463 00c6 3F4F      		sbci r19,-1
 464 00c8 3093 0000 		sts release_time+1,r19
 465 00cc 2093 0000 		sts release_time,r18
 466 00d0 0895      		ret
 467               	.L57:
 276:catboard.c    **** 			last_key = 0xFF;
 468               		.loc 2 276 0
 469 00d2 8FEF      		ldi r24,lo8(-1)
 470 00d4 8093 0000 		sts last_key,r24
 277:catboard.c    **** 			release_time = 0;
 471               		.loc 2 277 0
 472 00d8 1092 0000 		sts release_time+1,__zero_reg__
 473 00dc 1092 0000 		sts release_time,__zero_reg__
 278:catboard.c    **** 			press_time = 0;
 474               		.loc 2 278 0
 475 00e0 1092 0000 		sts press_time+1,__zero_reg__
 476 00e4 1092 0000 		sts press_time,__zero_reg__
 279:catboard.c    **** 			press_time2 = 0;
 477               		.loc 2 279 0
 478 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 479 00ec 1092 0000 		sts press_time2,__zero_reg__
 480 00f0 0895      		ret
 481               	.L56:
 282:catboard.c    **** 	} else if (press_time) { // press1 pause
 482               		.loc 2 282 0
 483 00f2 0097      		sbiw r24,0
 484 00f4 01F0      		breq .L47
 283:catboard.c    **** 		if (press_time<250) {
 485               		.loc 2 283 0
 486 00f6 8A3F      		cpi r24,-6
 487 00f8 9105      		cpc r25,__zero_reg__
 488 00fa 00F4      		brsh .L58
 284:catboard.c    **** 			press_time++;
 489               		.loc 2 284 0
 490 00fc 0196      		adiw r24,1
 491 00fe 9093 0000 		sts press_time+1,r25
 492 0102 8093 0000 		sts press_time,r24
 493 0106 0895      		ret
 494               	.L58:
 286:catboard.c    **** 			press_time = 0;
 495               		.loc 2 286 0
 496 0108 1092 0000 		sts press_time+1,__zero_reg__
 497 010c 1092 0000 		sts press_time,__zero_reg__
 498               	.L47:
 499 0110 0895      		ret
 500               		.cfi_endproc
 501               	.LFE13:
 503               		.section	.text.send,"ax",@progbits
 504               	.global	send
 506               	send:
 507               	.LFB17:
 595:catboard.c    **** void send(void) {
 508               		.loc 2 595 0
 509               		.cfi_startproc
 510 0000 0F93      		push r16
 511               	.LCFI0:
 512               		.cfi_def_cfa_offset 3
 513               		.cfi_offset 16, -2
 514 0002 1F93      		push r17
 515               	.LCFI1:
 516               		.cfi_def_cfa_offset 4
 517               		.cfi_offset 17, -3
 518 0004 CF93      		push r28
 519               	.LCFI2:
 520               		.cfi_def_cfa_offset 5
 521               		.cfi_offset 28, -4
 522 0006 DF93      		push r29
 523               	.LCFI3:
 524               		.cfi_def_cfa_offset 6
 525               		.cfi_offset 29, -5
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 4 */
 529               	.L__stack_usage = 4
 530               	.LVL21:
 531 0008 C0E0      		ldi r28,lo8(queue)
 532 000a D0E0      		ldi r29,hi8(queue)
 533 000c 00E0      		ldi r16,lo8(keyboard_keys)
 534 000e 10E0      		ldi r17,hi8(keyboard_keys)
 535               	.LVL22:
 536               	.L66:
 598:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 537               		.loc 2 598 0 discriminator 2
 538 0010 8991      		ld r24,Y+
 539               	.LVL23:
 540 0012 0E94 0000 		call get_code
 541               	.LVL24:
 542 0016 F801      		movw r30,r16
 543 0018 8193      		st Z+,r24
 544 001a 8F01      		movw r16,r30
 545               	.LVL25:
 597:catboard.c    **** 	for (i=0; i<6; i++) {
 546               		.loc 2 597 0 discriminator 2
 547 001c F0E0      		ldi r31,hi8(queue+6)
 548 001e C030      		cpi r28,lo8(queue+6)
 549 0020 DF07      		cpc r29,r31
 550 0022 01F4      		brne .L66
 600:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 551               		.loc 2 600 0
 552 0024 8091 0000 		lds r24,mod_keys
 553 0028 8093 0000 		sts keyboard_modifier_keys,r24
 554               	/* epilogue start */
 602:catboard.c    **** }
 555               		.loc 2 602 0
 556 002c DF91      		pop r29
 557 002e CF91      		pop r28
 558               	.LVL26:
 559 0030 1F91      		pop r17
 560 0032 0F91      		pop r16
 601:catboard.c    **** 	usb_keyboard_send();
 561               		.loc 2 601 0
 562 0034 0C94 0000 		jmp usb_keyboard_send
 563               	.LVL27:
 564               		.cfi_endproc
 565               	.LFE17:
 567               		.section	.text.key_press,"ax",@progbits
 568               	.global	key_press
 570               	key_press:
 571               	.LFB14:
 291:catboard.c    **** void key_press(uint8_t key_id) {
 572               		.loc 2 291 0
 573               		.cfi_startproc
 574               	.LVL28:
 575 0000 CF93      		push r28
 576               	.LCFI4:
 577               		.cfi_def_cfa_offset 3
 578               		.cfi_offset 28, -2
 579               	/* prologue: function */
 580               	/* frame size = 0 */
 581               	/* stack size = 1 */
 582               	.L__stack_usage = 1
 583 0002 C82F      		mov r28,r24
 293:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 584               		.loc 2 293 0
 585 0004 6091 0000 		lds r22,mod_keys
 586 0008 962F      		mov r25,r22
 587 000a 9D7D      		andi r25,lo8(-35)
 588               	.LVL29:
 294:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 589               		.loc 2 294 0
 590 000c 282F      		mov r18,r24
 591 000e 30E0      		ldi r19,0
 592 0010 8091 0000 		lds r24,pressed+39
 593               	.LVL30:
 594 0014 8111      		cpse r24,__zero_reg__
 595 0016 00C0      		rjmp .L121
 294:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 596               		.loc 2 294 0 is_stmt 0 discriminator 1
 597 0018 9923      		tst r25
 598 001a 01F0      		breq .L122
 294:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 599               		.loc 2 294 0
 600 001c 82E0      		ldi r24,lo8(2)
 601 001e 00C0      		rjmp .L68
 602               	.L121:
 603 0020 81E0      		ldi r24,lo8(1)
 604 0022 00C0      		rjmp .L68
 605               	.L122:
 606 0024 8FEF      		ldi r24,lo8(-1)
 607               	.L68:
 294:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 608               		.loc 2 294 0 discriminator 5
 609 0026 F901      		movw r30,r18
 610 0028 E050      		subi r30,lo8(-(pressed))
 611 002a F040      		sbci r31,hi8(-(pressed))
 612 002c 8083      		st Z,r24
 296:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 613               		.loc 2 296 0 is_stmt 1 discriminator 5
 614 002e 8130      		cpi r24,lo8(1)
 615 0030 01F4      		brne .L69
 296:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 616               		.loc 2 296 0 is_stmt 0 discriminator 1
 617 0032 D901      		movw r26,r18
 618 0034 A050      		subi r26,lo8(-(layer_fn))
 619 0036 B040      		sbci r27,hi8(-(layer_fn))
 620 0038 00C0      		rjmp .L169
 621               	.L69:
 296:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 622               		.loc 2 296 0 discriminator 2
 623 003a A091 0000 		lds r26,layout
 624 003e B091 0000 		lds r27,layout+1
 625 0042 A20F      		add r26,r18
 626 0044 B31F      		adc r27,r19
 627               	.L169:
 628 0046 8C91      		ld r24,X
 629               	.LVL31:
 297:catboard.c    **** 	if (key_code==NULL) {
 630               		.loc 2 297 0 is_stmt 1 discriminator 2
 631 0048 8111      		cpse r24,__zero_reg__
 632 004a 00C0      		rjmp .L71
 298:catboard.c    **** 		key_code = layout[key_id];
 633               		.loc 2 298 0
 634 004c A091 0000 		lds r26,layout
 635 0050 B091 0000 		lds r27,layout+1
 636 0054 A20F      		add r26,r18
 637 0056 B31F      		adc r27,r19
 638 0058 8C91      		ld r24,X
 639               	.LVL32:
 299:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 640               		.loc 2 299 0
 641 005a 9923      		tst r25
 642 005c 01F0      		breq .L123
 643 005e 92E0      		ldi r25,lo8(2)
 644               	.LVL33:
 645 0060 00C0      		rjmp .L72
 646               	.LVL34:
 647               	.L123:
 648 0062 9FEF      		ldi r25,lo8(-1)
 649               	.LVL35:
 650               	.L72:
 299:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 651               		.loc 2 299 0 is_stmt 0 discriminator 3
 652 0064 9083      		st Z,r25
 300:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 653               		.loc 2 300 0 is_stmt 1 discriminator 3
 654 0066 8111      		cpse r24,__zero_reg__
 655 0068 00C0      		rjmp .L71
 300:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 656               		.loc 2 300 0 is_stmt 0 discriminator 1
 657 006a 4091 0000 		lds r20,prev_layer
 658 006e 5091 0000 		lds r21,prev_layer+1
 659 0072 4115      		cp r20,__zero_reg__
 660 0074 5105      		cpc r21,__zero_reg__
 661 0076 01F0      		breq .L71
 662 0078 6111      		cpse r22,__zero_reg__
 663 007a 00C0      		rjmp .L71
 301:catboard.c    **** 			key_code = prev_layer[key_id];
 664               		.loc 2 301 0 is_stmt 1
 665 007c DA01      		movw r26,r20
 666 007e A20F      		add r26,r18
 667 0080 B31F      		adc r27,r19
 668 0082 8C91      		ld r24,X
 669               	.LVL36:
 302:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 670               		.loc 2 302 0
 671 0084 96E0      		ldi r25,lo8(6)
 672 0086 9083      		st Z,r25
 673               	.L71:
 306:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 674               		.loc 2 306 0
 675 0088 9091 0000 		lds r25,locked
 676 008c 9923      		tst r25
 677 008e 01F0      		breq .L73
 306:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 678               		.loc 2 306 0 is_stmt 0 discriminator 1
 679 0090 8A37      		cpi r24,lo8(122)
 680 0092 01F0      		breq .+2
 681 0094 00C0      		rjmp .L67
 682 0096 00C0      		rjmp .L182
 683               	.L73:
 308:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 684               		.loc 2 308 0 is_stmt 1
 685 0098 8D36      		cpi r24,lo8(109)
 686 009a 00F4      		brsh .+2
 687 009c 00C0      		rjmp .L76
 309:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 688               		.loc 2 309 0
 689 009e 8D37      		cpi r24,lo8(125)
 690 00a0 01F4      		brne .L77
 310:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 691               		.loc 2 310 0
 692 00a2 8081      		ld r24,Z
 693               	.LVL37:
 694 00a4 8130      		cpi r24,lo8(1)
 695 00a6 01F4      		brne .L78
 311:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 696               		.loc 2 311 0
 697 00a8 64E0      		ldi r22,lo8(4)
 698               	.LVL38:
 699 00aa 8BE2      		ldi r24,lo8(43)
 700 00ac 00C0      		rjmp .L171
 701               	.LVL39:
 702               	.L78:
 313:catboard.c    **** 				if (! mod_keys) {
 703               		.loc 2 313 0
 704 00ae 6111      		cpse r22,__zero_reg__
 705 00b0 00C0      		rjmp .L80
 314:catboard.c    **** 					mod_keys |= (KEY_ALT);
 706               		.loc 2 314 0
 707 00b2 84E0      		ldi r24,lo8(4)
 708 00b4 8093 0000 		sts mod_keys,r24
 709 00b8 00C0      		rjmp .L81
 710               	.L80:
 316:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 711               		.loc 2 316 0
 712 00ba 83E0      		ldi r24,lo8(3)
 713 00bc 8083      		st Z,r24
 714               	.L81:
 318:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 715               		.loc 2 318 0
 716 00be 8091 0000 		lds r24,mod_keys
 717 00c2 8093 0000 		sts keyboard_modifier_keys,r24
 319:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 718               		.loc 2 319 0
 719 00c6 8BE2      		ldi r24,lo8(43)
 720 00c8 8093 0000 		sts keyboard_keys,r24
 320:catboard.c    **** 				usb_keyboard_send();
 721               		.loc 2 320 0
 722 00cc 0E94 0000 		call usb_keyboard_send
 723               	.LVL40:
 724               	.LBB40:
 725               	.LBB41:
 726               		.loc 3 164 0
 727 00d0 2FEF      		ldi r18,lo8(159999)
 728 00d2 80E7      		ldi r24,hi8(159999)
 729 00d4 92E0      		ldi r25,hlo8(159999)
 730 00d6 2150      		1: subi r18,1
 731 00d8 8040      		sbci r24,0
 732 00da 9040      		sbci r25,0
 733 00dc 01F4      		brne 1b
 734 00de 00C0      		rjmp .
 735 00e0 0000      		nop
 736 00e2 00C0      		rjmp .L172
 737               	.LVL41:
 738               	.L77:
 739               	.LBE41:
 740               	.LBE40:
 324:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 741               		.loc 2 324 0
 742 00e4 8E37      		cpi r24,lo8(126)
 743 00e6 01F4      		brne .L82
 325:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 744               		.loc 2 325 0
 745 00e8 8081      		ld r24,Z
 746               	.LVL42:
 747 00ea 8130      		cpi r24,lo8(1)
 748 00ec 01F0      		breq .+2
 749 00ee 00C0      		rjmp .L79
 325:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 750               		.loc 2 325 0 is_stmt 0 discriminator 1
 751 00f0 6272      		andi r22,lo8(34)
 752               	.LVL43:
 753 00f2 01F4      		brne .+2
 754 00f4 00C0      		rjmp .L79
 326:catboard.c    **** 				if (prev_layer) { // FnLock Off
 755               		.loc 2 326 0 is_stmt 1
 756 00f6 2091 0000 		lds r18,prev_layer
 757 00fa 3091 0000 		lds r19,prev_layer+1
 758               	.LVL44:
 759 00fe 2115      		cp r18,__zero_reg__
 760 0100 3105      		cpc r19,__zero_reg__
 761 0102 01F0      		breq .L85
 327:catboard.c    **** 					layout = prev_layer;
 762               		.loc 2 327 0
 763 0104 3093 0000 		sts layout+1,r19
 764 0108 2093 0000 		sts layout,r18
 328:catboard.c    **** 					prev_layer = 0;
 765               		.loc 2 328 0
 766 010c 1092 0000 		sts prev_layer+1,__zero_reg__
 767 0110 1092 0000 		sts prev_layer,__zero_reg__
 768 0114 00C0      		rjmp .L79
 769               	.L85:
 330:catboard.c    **** 					prev_layer = layout;
 770               		.loc 2 330 0
 771 0116 8091 0000 		lds r24,layout
 772 011a 9091 0000 		lds r25,layout+1
 773 011e 9093 0000 		sts prev_layer+1,r25
 774 0122 8093 0000 		sts prev_layer,r24
 331:catboard.c    **** 					layout = layer_fnlock;
 775               		.loc 2 331 0
 776 0126 80E0      		ldi r24,lo8(layer_fnlock)
 777 0128 90E0      		ldi r25,hi8(layer_fnlock)
 778 012a 9093 0000 		sts layout+1,r25
 779 012e 8093 0000 		sts layout,r24
 780 0132 00C0      		rjmp .L79
 781               	.LVL45:
 782               	.L82:
 334:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 783               		.loc 2 334 0
 784 0134 8C37      		cpi r24,lo8(124)
 785 0136 01F4      		brne .L86
 335:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 786               		.loc 2 335 0
 787 0138 8081      		ld r24,Z
 788               	.LVL46:
 789 013a 8130      		cpi r24,lo8(1)
 790 013c 01F4      		brne .L87
 335:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 791               		.loc 2 335 0 is_stmt 0 discriminator 1
 792 013e 862F      		mov r24,r22
 793 0140 8272      		andi r24,lo8(34)
 794 0142 01F0      		breq .L87
 336:catboard.c    **** 				os_mode++;
 795               		.loc 2 336 0 is_stmt 1
 796 0144 8091 0000 		lds r24,os_mode
 797 0148 8F5F      		subi r24,lo8(-(1))
 798 014a 8093 0000 		sts os_mode,r24
 337:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 799               		.loc 2 337 0
 800 014e 8330      		cpi r24,lo8(3)
 801 0150 00F4      		brsh .+2
 802 0152 00C0      		rjmp .L79
 337:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 803               		.loc 2 337 0 is_stmt 0 discriminator 1
 804 0154 1092 0000 		sts os_mode,__zero_reg__
 805 0158 00C0      		rjmp .L79
 806               	.L87:
 339:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 807               		.loc 2 339 0 is_stmt 1
 808 015a 8CE2      		ldi r24,lo8(44)
 809               	.LVL47:
 810               	.L171:
 811 015c 0E94 0000 		call usb_keyboard_press
 812               	.LVL48:
 813 0160 00C0      		rjmp .L79
 814               	.LVL49:
 815               	.L86:
 341:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 816               		.loc 2 341 0
 817 0162 8D36      		cpi r24,lo8(109)
 818 0164 01F4      		brne .L88
 342:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 819               		.loc 2 342 0
 820 0166 862F      		mov r24,r22
 821               	.LVL50:
 822 0168 8272      		andi r24,lo8(34)
 823 016a 01F0      		breq .L89
 343:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 824               		.loc 2 343 0
 825 016c 85E0      		ldi r24,lo8(5)
 826 016e 8083      		st Z,r24
 344:catboard.c    **** 				mod_keys |= KEY_CTRL;
 827               		.loc 2 344 0
 828 0170 6160      		ori r22,lo8(1)
 829               	.LVL51:
 830 0172 00C0      		rjmp .L177
 831               	.LVL52:
 832               	.L89:
 347:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 833               		.loc 2 347 0
 834 0174 6623      		tst r22
 835 0176 01F0      		breq .L178
 347:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 836               		.loc 2 347 0 is_stmt 0 discriminator 1
 837 0178 84E0      		ldi r24,lo8(4)
 838 017a 8083      		st Z,r24
 839 017c 00C0      		rjmp .L178
 840               	.LVL53:
 841               	.L88:
 351:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 842               		.loc 2 351 0 is_stmt 1
 843 017e 8E36      		cpi r24,lo8(110)
 844 0180 01F4      		brne .L91
 352:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 845               		.loc 2 352 0
 846 0182 6062      		ori r22,lo8(32)
 847               	.LVL54:
 848 0184 00C0      		rjmp .L177
 849               	.LVL55:
 850               	.L91:
 354:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 851               		.loc 2 354 0
 852 0186 8B37      		cpi r24,lo8(123)
 853 0188 01F4      		brne .L92
 355:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 854               		.loc 2 355 0
 855 018a 81E0      		ldi r24,lo8(1)
 856               	.LVL56:
 857 018c 9091 0000 		lds r25,turbo_repeat
 858 0190 9111      		cpse r25,__zero_reg__
 859 0192 80E0      		ldi r24,0
 860               	.L93:
 861 0194 8093 0000 		sts turbo_repeat,r24
 862 0198 00C0      		rjmp .L79
 863               	.LVL57:
 864               	.L92:
 356:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 865               		.loc 2 356 0
 866 019a 8737      		cpi r24,lo8(119)
 867 019c 01F4      		brne .L94
 868               	.LVL58:
 869               	.L178:
 357:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 870               		.loc 2 357 0
 871 019e 6260      		ori r22,lo8(2)
 872               	.LVL59:
 873               	.L177:
 874 01a0 6093 0000 		sts mod_keys,r22
 875               	.LVL60:
 876 01a4 00C0      		rjmp .L172
 877               	.LVL61:
 878               	.L94:
 359:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 879               		.loc 2 359 0
 880 01a6 8F36      		cpi r24,lo8(111)
 881 01a8 01F4      		brne .+2
 882 01aa 00C0      		rjmp .L79
 372:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 883               		.loc 2 372 0
 884 01ac 8A37      		cpi r24,lo8(122)
 885 01ae 01F4      		brne .L167
 380:catboard.c    **** 				locked = 1;
 886               		.loc 2 380 0
 887 01b0 81E0      		ldi r24,lo8(1)
 888               	.LVL62:
 889 01b2 8093 0000 		sts locked,r24
 381:catboard.c    **** 				LED_OFF;
 890               		.loc 2 381 0
 891 01b6 5E9A      		sbi 0xb,6
 382:catboard.c    **** 				LED_RED_OFF;
 892               		.loc 2 382 0
 893 01b8 469A      		sbi 0x8,6
 383:catboard.c    **** 				LED_BLUE_OFF;
 894               		.loc 2 383 0
 895 01ba 5998      		cbi 0xb,1
 384:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 896               		.loc 2 384 0
 897 01bc 68E0      		ldi r22,lo8(8)
 898               	.LVL63:
 899 01be 8FE0      		ldi r24,lo8(15)
 900 01c0 00C0      		rjmp .L171
 901               	.LVL64:
 902               	.L182:
 374:catboard.c    **** 				locked = 0;
 903               		.loc 2 374 0
 904 01c2 1092 0000 		sts locked,__zero_reg__
 375:catboard.c    **** 				if (led) {
 905               		.loc 2 375 0
 906 01c6 8091 0000 		lds r24,led
 907               	.LVL65:
 908 01ca 8823      		tst r24
 909 01cc 01F4      		brne .+2
 910 01ce 00C0      		rjmp .L79
 911 01d0 00C0      		rjmp .L181
 912               	.LVL66:
 913               	.L167:
 386:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 914               		.loc 2 386 0
 915 01d2 8937      		cpi r24,lo8(121)
 916 01d4 01F0      		breq .+2
 917 01d6 00C0      		rjmp .L79
 386:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 918               		.loc 2 386 0 is_stmt 0 discriminator 1
 919 01d8 6272      		andi r22,lo8(34)
 920               	.LVL67:
 921 01da 01F4      		brne .+2
 922 01dc 00C0      		rjmp .L79
 387:catboard.c    **** 			if (led) {
 923               		.loc 2 387 0 is_stmt 1
 924 01de 8091 0000 		lds r24,led
 925               	.LVL68:
 926 01e2 8823      		tst r24
 927 01e4 01F0      		breq .L100
 388:catboard.c    **** 				led = 0;
 928               		.loc 2 388 0
 929 01e6 1092 0000 		sts led,__zero_reg__
 389:catboard.c    **** 				LED_OFF;
 930               		.loc 2 389 0
 931 01ea 5E9A      		sbi 0xb,6
 390:catboard.c    **** 				LED_RED_OFF;
 932               		.loc 2 390 0
 933 01ec 469A      		sbi 0x8,6
 391:catboard.c    **** 				LED_BLUE_OFF;
 934               		.loc 2 391 0
 935 01ee 5998      		cbi 0xb,1
 936 01f0 00C0      		rjmp .L79
 937               	.L100:
 393:catboard.c    **** 				led = 1;
 938               		.loc 2 393 0
 939 01f2 81E0      		ldi r24,lo8(1)
 940 01f4 8093 0000 		sts led,r24
 941               	.L181:
 394:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 942               		.loc 2 394 0
 943 01f8 8091 0000 		lds r24,layout
 944 01fc 9091 0000 		lds r25,layout+1
 945 0200 8050      		subi r24,lo8(layer1)
 946 0202 9040      		sbci r25,hi8(layer1)
 947               	.LVL69:
 948 0204 01F0      		breq .L101
 394:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 949               		.loc 2 394 0 is_stmt 0 discriminator 2
 950 0206 8091 0000 		lds r24,prev_layer
 951 020a 9091 0000 		lds r25,prev_layer+1
 952 020e 8050      		subi r24,lo8(layer1)
 953 0210 9040      		sbci r25,hi8(layer1)
 954 0212 01F4      		brne .L102
 955               	.L101:
 394:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 956               		.loc 2 394 0 discriminator 1
 957 0214 599A      		sbi 0xb,1
 958               	.L102:
 395:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 959               		.loc 2 395 0 is_stmt 1
 960 0216 8091 0000 		lds r24,layout
 961 021a 9091 0000 		lds r25,layout+1
 962 021e 8050      		subi r24,lo8(layer2)
 963 0220 9040      		sbci r25,hi8(layer2)
 964 0222 01F0      		breq .L103
 395:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 965               		.loc 2 395 0 is_stmt 0 discriminator 2
 966 0224 8091 0000 		lds r24,prev_layer
 967 0228 9091 0000 		lds r25,prev_layer+1
 968 022c 8050      		subi r24,lo8(layer2)
 969 022e 9040      		sbci r25,hi8(layer2)
 970 0230 01F0      		breq .+2
 971 0232 00C0      		rjmp .L79
 972               	.L103:
 395:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 973               		.loc 2 395 0 discriminator 1
 974 0234 4698      		cbi 0x8,6
 975 0236 00C0      		rjmp .L79
 976               	.LVL70:
 977               	.L76:
 398:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 978               		.loc 2 398 0 is_stmt 1
 979 0238 8536      		cpi r24,lo8(101)
 980 023a 00F0      		brlo .L104
 399:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 981               		.loc 2 399 0
 982 023c 9091 0000 		lds r25,os_mode
 983 0240 9230      		cpi r25,lo8(2)
 984 0242 01F4      		brne .L105
 399:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 985               		.loc 2 399 0 is_stmt 0 discriminator 1
 986 0244 8536      		cpi r24,lo8(101)
 987 0246 01F0      		breq .L176
 401:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 988               		.loc 2 401 0 is_stmt 1 discriminator 1
 989 0248 8936      		cpi r24,lo8(105)
 990 024a 01F4      		brne .L168
 991 024c 00C0      		rjmp .L108
 992               	.L105:
 401:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 993               		.loc 2 401 0 is_stmt 0 discriminator 2
 994 024e 8C36      		cpi r24,lo8(108)
 995 0250 01F4      		brne .L110
 996               	.L108:
 402:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 997               		.loc 2 402 0 is_stmt 1
 998 0252 6068      		ori r22,lo8(-128)
 999               	.LVL71:
 1000 0254 00C0      		rjmp .L170
 1001               	.LVL72:
 1002               	.L110:
 403:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 1003               		.loc 2 403 0
 1004 0256 8536      		cpi r24,lo8(101)
 1005 0258 01F4      		brne .L111
 404:catboard.c    **** 			mod_keys |= KEY_CTRL;
 1006               		.loc 2 404 0
 1007 025a 6160      		ori r22,lo8(1)
 1008               	.LVL73:
 1009 025c 00C0      		rjmp .L170
 1010               	.LVL74:
 1011               	.L168:
 401:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1012               		.loc 2 401 0
 1013 025e 8C36      		cpi r24,lo8(108)
 1014 0260 01F0      		breq .L108
 1015               	.L111:
 405:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 1016               		.loc 2 405 0
 1017 0262 8636      		cpi r24,lo8(102)
 1018 0264 01F4      		brne .L112
 406:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 1019               		.loc 2 406 0
 1020 0266 6260      		ori r22,lo8(2)
 1021               	.LVL75:
 1022 0268 00C0      		rjmp .L170
 1023               	.LVL76:
 1024               	.L112:
 407:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 1025               		.loc 2 407 0
 1026 026a 8736      		cpi r24,lo8(103)
 1027 026c 01F4      		brne .L113
 408:catboard.c    **** 			mod_keys |= KEY_ALT;
 1028               		.loc 2 408 0
 1029 026e 6460      		ori r22,lo8(4)
 1030               	.LVL77:
 1031 0270 00C0      		rjmp .L170
 1032               	.LVL78:
 1033               	.L113:
 409:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 1034               		.loc 2 409 0
 1035 0272 8836      		cpi r24,lo8(104)
 1036 0274 01F4      		brne .L114
 1037               	.L176:
 410:catboard.c    **** 			mod_keys |= KEY_GUI;
 1038               		.loc 2 410 0
 1039 0276 6860      		ori r22,lo8(8)
 1040               	.LVL79:
 1041 0278 00C0      		rjmp .L170
 1042               	.LVL80:
 1043               	.L114:
 411:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 1044               		.loc 2 411 0
 1045 027a 8936      		cpi r24,lo8(105)
 1046 027c 01F4      		brne .L115
 412:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 1047               		.loc 2 412 0
 1048 027e 6061      		ori r22,lo8(16)
 1049               	.LVL81:
 1050 0280 00C0      		rjmp .L170
 1051               	.LVL82:
 1052               	.L115:
 413:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 1053               		.loc 2 413 0
 1054 0282 8A36      		cpi r24,lo8(106)
 1055 0284 01F4      		brne .L116
 414:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 1056               		.loc 2 414 0
 1057 0286 6062      		ori r22,lo8(32)
 1058               	.LVL83:
 1059 0288 00C0      		rjmp .L170
 1060               	.LVL84:
 1061               	.L116:
 416:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 1062               		.loc 2 416 0
 1063 028a 6064      		ori r22,lo8(64)
 1064               	.LVL85:
 1065               	.L170:
 1066 028c 6093 0000 		sts mod_keys,r22
 1067               	.LVL86:
 420:catboard.c    **** 		send();
 1068               		.loc 2 420 0
 1069 0290 0E94 0000 		call send
 1070               	.LVL87:
 421:catboard.c    **** 		press_time = 0;
 1071               		.loc 2 421 0
 1072 0294 1092 0000 		sts press_time+1,__zero_reg__
 1073 0298 1092 0000 		sts press_time,__zero_reg__
 423:catboard.c    **** 		release_time = 0;
 1074               		.loc 2 423 0
 1075 029c 1092 0000 		sts release_time+1,__zero_reg__
 1076 02a0 1092 0000 		sts release_time,__zero_reg__
 425:catboard.c    **** 		last_key = 0;
 1077               		.loc 2 425 0
 1078 02a4 1092 0000 		sts last_key,__zero_reg__
 1079 02a8 00C0      		rjmp .L79
 1080               	.LVL88:
 1081               	.L104:
 432:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1082               		.loc 2 432 0
 1083 02aa 8091 0000 		lds r24,last_key
 1084               	.LVL89:
 1085 02ae 8C13      		cpse r24,r28
 1086 02b0 00C0      		rjmp .L117
 432:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1087               		.loc 2 432 0 is_stmt 0 discriminator 1
 1088 02b2 8091 0000 		lds r24,release_time
 1089 02b6 9091 0000 		lds r25,release_time+1
 1090 02ba 0A97      		sbiw r24,10
 1091 02bc 00F0      		brlo .L79
 1092               	.L117:
 1093 02be E0E0      		ldi r30,lo8(queue+5)
 1094 02c0 F0E0      		ldi r31,hi8(queue+5)
 1095 02c2 A0E0      		ldi r26,lo8(queue+6)
 1096 02c4 B0E0      		ldi r27,hi8(queue+6)
 1097               	.L119:
 1098               	.LVL90:
 433:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 1099               		.loc 2 433 0 is_stmt 1 discriminator 2
 1100 02c6 8291      		ld r24,-Z
 1101               	.LVL91:
 1102 02c8 8E93      		st -X,r24
 1103               	.LVL92:
 1104 02ca 80E0      		ldi r24,hi8(queue)
 1105 02cc E030      		cpi r30,lo8(queue)
 1106 02ce F807      		cpc r31,r24
 1107 02d0 01F4      		brne .L119
 434:catboard.c    **** 			queue[0] = key_id;
 1108               		.loc 2 434 0
 1109 02d2 C093 0000 		sts queue,r28
 1110               	.LVL93:
 1111               	.L172:
 435:catboard.c    **** 			send();
 1112               		.loc 2 435 0
 1113 02d6 0E94 0000 		call send
 1114               	.LVL94:
 1115               	.L79:
 439:catboard.c    **** 	if (last_key==key_id) { // calc press2
 1116               		.loc 2 439 0
 1117 02da 8091 0000 		lds r24,last_key
 1118 02de 8C13      		cpse r24,r28
 1119 02e0 00C0      		rjmp .L120
 440:catboard.c    **** 		press_time2 = 1;
 1120               		.loc 2 440 0
 1121 02e2 81E0      		ldi r24,lo8(1)
 1122 02e4 90E0      		ldi r25,0
 1123 02e6 9093 0000 		sts press_time2+1,r25
 1124 02ea 8093 0000 		sts press_time2,r24
 1125 02ee 00C0      		rjmp .L173
 1126               	.L120:
 443:catboard.c    **** 		last_key = key_id;
 1127               		.loc 2 443 0
 1128 02f0 C093 0000 		sts last_key,r28
 444:catboard.c    **** 		press_time = 1;
 1129               		.loc 2 444 0
 1130 02f4 81E0      		ldi r24,lo8(1)
 1131 02f6 90E0      		ldi r25,0
 1132 02f8 9093 0000 		sts press_time+1,r25
 1133 02fc 8093 0000 		sts press_time,r24
 445:catboard.c    **** 		press_time2 = 0;
 1134               		.loc 2 445 0
 1135 0300 1092 0000 		sts press_time2+1,__zero_reg__
 1136 0304 1092 0000 		sts press_time2,__zero_reg__
 446:catboard.c    **** 		release_time = 0;
 1137               		.loc 2 446 0
 1138 0308 1092 0000 		sts release_time+1,__zero_reg__
 1139 030c 1092 0000 		sts release_time,__zero_reg__
 1140               	.L173:
 447:catboard.c    **** 		repeat_time = 0;
 1141               		.loc 2 447 0
 1142 0310 1092 0000 		sts repeat_time+1,__zero_reg__
 1143 0314 1092 0000 		sts repeat_time,__zero_reg__
 1144               	.L67:
 1145               	/* epilogue start */
 449:catboard.c    **** }
 1146               		.loc 2 449 0
 1147 0318 CF91      		pop r28
 1148               	.LVL95:
 1149 031a 0895      		ret
 1150               		.cfi_endproc
 1151               	.LFE14:
 1153               		.section	.text.key_release,"ax",@progbits
 1154               	.global	key_release
 1156               	key_release:
 1157               	.LFB15:
 451:catboard.c    **** void key_release(uint8_t key_id) {
 1158               		.loc 2 451 0
 1159               		.cfi_startproc
 1160               	.LVL96:
 1161 0000 CF93      		push r28
 1162               	.LCFI5:
 1163               		.cfi_def_cfa_offset 3
 1164               		.cfi_offset 28, -2
 1165 0002 DF93      		push r29
 1166               	.LCFI6:
 1167               		.cfi_def_cfa_offset 4
 1168               		.cfi_offset 29, -3
 1169               	/* prologue: function */
 1170               	/* frame size = 0 */
 1171               	/* stack size = 2 */
 1172               	.L__stack_usage = 2
 1173 0004 D82F      		mov r29,r24
 453:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 1174               		.loc 2 453 0
 1175 0006 282F      		mov r18,r24
 1176 0008 30E0      		ldi r19,0
 1177 000a D901      		movw r26,r18
 1178 000c A050      		subi r26,lo8(-(pressed))
 1179 000e B040      		sbci r27,hi8(-(pressed))
 1180 0010 CC91      		ld r28,X
 1181               	.LVL97:
 454:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 1182               		.loc 2 454 0
 1183 0012 C130      		cpi r28,lo8(1)
 1184 0014 01F4      		brne .L184
 454:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 1185               		.loc 2 454 0 is_stmt 0 discriminator 1
 1186 0016 F901      		movw r30,r18
 1187 0018 E050      		subi r30,lo8(-(layer_fn))
 1188 001a F040      		sbci r31,hi8(-(layer_fn))
 1189 001c 00C0      		rjmp .L262
 1190               	.L184:
 454:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 1191               		.loc 2 454 0 discriminator 2
 1192 001e E091 0000 		lds r30,layout
 1193 0022 F091 0000 		lds r31,layout+1
 1194 0026 E20F      		add r30,r18
 1195 0028 F31F      		adc r31,r19
 1196 002a 9081      		ld r25,Z
 1197               	.LVL98:
 455:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 1198               		.loc 2 455 0 is_stmt 1 discriminator 2
 1199 002c C630      		cpi r28,lo8(6)
 1200 002e 01F4      		brne .L185
 455:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 1201               		.loc 2 455 0 is_stmt 0 discriminator 1
 1202 0030 4091 0000 		lds r20,prev_layer
 1203 0034 5091 0000 		lds r21,prev_layer+1
 1204 0038 4115      		cp r20,__zero_reg__
 1205 003a 5105      		cpc r21,__zero_reg__
 1206 003c 01F0      		breq .L185
 456:catboard.c    **** 		key_code = prev_layer[key_id];
 1207               		.loc 2 456 0 is_stmt 1
 1208 003e FA01      		movw r30,r20
 1209 0040 E20F      		add r30,r18
 1210 0042 F31F      		adc r31,r19
 1211               	.LVL99:
 1212               	.L262:
 1213 0044 9081      		ld r25,Z
 1214               	.LVL100:
 1215               	.L185:
 458:catboard.c    **** 	pressed[key_id] = 0;
 1216               		.loc 2 458 0
 1217 0046 1C92      		st X,__zero_reg__
 459:catboard.c    **** 	if (locked) return;
 1218               		.loc 2 459 0
 1219 0048 8091 0000 		lds r24,locked
 1220               	.LVL101:
 1221 004c 8111      		cpse r24,__zero_reg__
 1222 004e 00C0      		rjmp .L183
 460:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 1223               		.loc 2 460 0
 1224 0050 9D36      		cpi r25,lo8(109)
 1225 0052 00F4      		brsh .+2
 1226 0054 00C0      		rjmp .L187
 461:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 1227               		.loc 2 461 0
 1228 0056 9D37      		cpi r25,lo8(125)
 1229 0058 01F4      		brne .L188
 461:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 1230               		.loc 2 461 0 is_stmt 0 discriminator 1
 1231 005a C330      		cpi r28,lo8(3)
 1232 005c 01F4      		brne .+2
 1233 005e 00C0      		rjmp .L183
 462:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 1234               		.loc 2 462 0 is_stmt 1
 1235 0060 8091 0000 		lds r24,mod_keys
 1236 0064 8B7F      		andi r24,lo8(-5)
 1237 0066 00C0      		rjmp .L265
 1238               	.L188:
 464:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 1239               		.loc 2 464 0
 1240 0068 9D36      		cpi r25,lo8(109)
 1241 006a 01F0      		breq .+2
 1242 006c 00C0      		rjmp .L189
 1243 006e 8091 0000 		lds r24,mod_keys
 464:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 1244               		.loc 2 464 0 is_stmt 0 discriminator 1
 1245 0072 C530      		cpi r28,lo8(5)
 1246 0074 01F4      		brne .L190
 465:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 1247               		.loc 2 465 0 is_stmt 1
 1248 0076 8E7F      		andi r24,lo8(-2)
 1249               	.L265:
 1250 0078 8093 0000 		sts mod_keys,r24
 1251               	/* epilogue start */
 571:catboard.c    **** }
 1252               		.loc 2 571 0
 1253 007c DF91      		pop r29
 1254 007e CF91      		pop r28
 1255               	.LVL102:
 466:catboard.c    **** 			send();
 1256               		.loc 2 466 0
 1257 0080 0C94 0000 		jmp send
 1258               	.LVL103:
 1259               	.L190:
 468:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 1260               		.loc 2 468 0
 1261 0084 8D7F      		andi r24,lo8(-3)
 1262 0086 8093 0000 		sts mod_keys,r24
 469:catboard.c    **** 			send();
 1263               		.loc 2 469 0
 1264 008a 0E94 0000 		call send
 1265               	.LVL104:
 470:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 1266               		.loc 2 470 0
 1267 008e 8091 0000 		lds r24,last_key
 1268 0092 8D13      		cpse r24,r29
 1269 0094 00C0      		rjmp .L202
 470:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 1270               		.loc 2 470 0 is_stmt 0 discriminator 1
 1271 0096 8091 0000 		lds r24,press_time
 1272 009a 9091 0000 		lds r25,press_time+1
 1273 009e 0197      		sbiw r24,1
 1274 00a0 C197      		sbiw r24,49
 1275 00a2 00F0      		brlo .+2
 1276 00a4 00C0      		rjmp .L202
 1277 00a6 C430      		cpi r28,lo8(4)
 1278 00a8 01F4      		brne .+2
 1279 00aa 00C0      		rjmp .L202
 471:catboard.c    **** 				if (layout!=layer1) {
 1280               		.loc 2 471 0 is_stmt 1
 1281 00ac 8091 0000 		lds r24,layout
 1282 00b0 9091 0000 		lds r25,layout+1
 1283 00b4 20E0      		ldi r18,hi8(layer1)
 1284 00b6 8030      		cpi r24,lo8(layer1)
 1285 00b8 9207      		cpc r25,r18
 1286 00ba 01F4      		brne .+2
 1287 00bc 00C0      		rjmp .L202
 1288               	.LBB42:
 472:catboard.c    **** 					if (layout==layer_fn) {
 1289               		.loc 2 472 0
 1290 00be 8050      		subi r24,lo8(layer_fn)
 1291 00c0 9040      		sbci r25,hi8(layer_fn)
 1292 00c2 01F4      		brne .L194
 473:catboard.c    **** 						prev_layer = layer1;
 1293               		.loc 2 473 0
 1294 00c4 80E0      		ldi r24,lo8(layer1)
 1295 00c6 90E0      		ldi r25,hi8(layer1)
 1296 00c8 9093 0000 		sts prev_layer+1,r25
 1297 00cc 8093 0000 		sts prev_layer,r24
 1298 00d0 00C0      		rjmp .L195
 1299               	.L194:
 475:catboard.c    **** 						layout = layer1;
 1300               		.loc 2 475 0
 1301 00d2 80E0      		ldi r24,lo8(layer1)
 1302 00d4 90E0      		ldi r25,hi8(layer1)
 1303 00d6 9093 0000 		sts layout+1,r25
 1304 00da 8093 0000 		sts layout,r24
 1305               	.L195:
 477:catboard.c    **** 					change_layout();
 1306               		.loc 2 477 0
 1307 00de 0E94 0000 		call change_layout
 1308               	.LVL105:
 479:catboard.c    **** 					LED_RED_OFF;
 1309               		.loc 2 479 0
 1310 00e2 469A      		sbi 0x8,6
 480:catboard.c    **** 					if (led) LED_BLUE_ON;
 1311               		.loc 2 480 0
 1312 00e4 8091 0000 		lds r24,led
 1313 00e8 8823      		tst r24
 1314 00ea 01F4      		brne .+2
 1315 00ec 00C0      		rjmp .L202
 480:catboard.c    **** 					if (led) LED_BLUE_ON;
 1316               		.loc 2 480 0 is_stmt 0 discriminator 1
 1317 00ee 599A      		sbi 0xb,1
 1318 00f0 00C0      		rjmp .L202
 1319               	.LVL106:
 1320               	.L189:
 1321               	.LBE42:
 488:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 1322               		.loc 2 488 0 is_stmt 1
 1323 00f2 9E36      		cpi r25,lo8(110)
 1324 00f4 01F4      		brne .L196
 489:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 1325               		.loc 2 489 0
 1326 00f6 8091 0000 		lds r24,mod_keys
 1327 00fa 8F7D      		andi r24,lo8(-33)
 1328 00fc 8093 0000 		sts mod_keys,r24
 490:catboard.c    **** 			send();
 1329               		.loc 2 490 0
 1330 0100 0E94 0000 		call send
 1331               	.LVL107:
 491:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 1332               		.loc 2 491 0
 1333 0104 8091 0000 		lds r24,last_key
 1334 0108 8D13      		cpse r24,r29
 1335 010a 00C0      		rjmp .L202
 491:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 1336               		.loc 2 491 0 is_stmt 0 discriminator 1
 1337 010c 8091 0000 		lds r24,press_time
 1338 0110 9091 0000 		lds r25,press_time+1
 1339 0114 0197      		sbiw r24,1
 1340 0116 C197      		sbiw r24,49
 1341 0118 00F0      		brlo .+2
 1342 011a 00C0      		rjmp .L202
 1343 011c C430      		cpi r28,lo8(4)
 1344 011e 01F4      		brne .+2
 1345 0120 00C0      		rjmp .L202
 492:catboard.c    **** 				if (layout!=layer2) {
 1346               		.loc 2 492 0 is_stmt 1
 1347 0122 8091 0000 		lds r24,layout
 1348 0126 9091 0000 		lds r25,layout+1
 1349 012a 20E0      		ldi r18,hi8(layer2)
 1350 012c 8030      		cpi r24,lo8(layer2)
 1351 012e 9207      		cpc r25,r18
 1352 0130 01F0      		breq .L202
 1353               	.LBB43:
 493:catboard.c    **** 					if (layout==layer_fn) {
 1354               		.loc 2 493 0
 1355 0132 8050      		subi r24,lo8(layer_fn)
 1356 0134 9040      		sbci r25,hi8(layer_fn)
 1357 0136 01F4      		brne .L200
 494:catboard.c    **** 						prev_layer = layer2;
 1358               		.loc 2 494 0
 1359 0138 80E0      		ldi r24,lo8(layer2)
 1360 013a 90E0      		ldi r25,hi8(layer2)
 1361 013c 9093 0000 		sts prev_layer+1,r25
 1362 0140 8093 0000 		sts prev_layer,r24
 1363 0144 00C0      		rjmp .L201
 1364               	.L200:
 496:catboard.c    **** 						layout = layer2;
 1365               		.loc 2 496 0
 1366 0146 80E0      		ldi r24,lo8(layer2)
 1367 0148 90E0      		ldi r25,hi8(layer2)
 1368 014a 9093 0000 		sts layout+1,r25
 1369 014e 8093 0000 		sts layout,r24
 1370               	.L201:
 498:catboard.c    **** 					change_layout();
 1371               		.loc 2 498 0
 1372 0152 0E94 0000 		call change_layout
 1373               	.LVL108:
 500:catboard.c    **** 					LED_BLUE_OFF;
 1374               		.loc 2 500 0
 1375 0156 5998      		cbi 0xb,1
 501:catboard.c    **** 					if (led) LED_RED_ON;
 1376               		.loc 2 501 0
 1377 0158 8091 0000 		lds r24,led
 1378 015c 8823      		tst r24
 1379 015e 01F0      		breq .L202
 501:catboard.c    **** 					if (led) LED_RED_ON;
 1380               		.loc 2 501 0 is_stmt 0 discriminator 1
 1381 0160 4698      		cbi 0x8,6
 1382 0162 00C0      		rjmp .L202
 1383               	.LVL109:
 1384               	.L196:
 1385               	.LBE43:
 509:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 1386               		.loc 2 509 0 is_stmt 1
 1387 0164 9737      		cpi r25,lo8(119)
 1388 0166 01F0      		breq .+2
 1389 0168 00C0      		rjmp .L183
 510:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 1390               		.loc 2 510 0
 1391 016a 8091 0000 		lds r24,mod_keys
 1392 016e 8D7F      		andi r24,lo8(-3)
 1393 0170 8093 0000 		sts mod_keys,r24
 511:catboard.c    **** 			send();
 1394               		.loc 2 511 0
 1395 0174 0E94 0000 		call send
 1396               	.LVL110:
 512:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 1397               		.loc 2 512 0
 1398 0178 8091 0000 		lds r24,last_key
 1399 017c 8D13      		cpse r24,r29
 1400 017e 00C0      		rjmp .L202
 512:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 1401               		.loc 2 512 0 is_stmt 0 discriminator 1
 1402 0180 8091 0000 		lds r24,press_time
 1403 0184 9091 0000 		lds r25,press_time+1
 1404 0188 0197      		sbiw r24,1
 1405 018a C197      		sbiw r24,49
 1406 018c 00F4      		brsh .L202
 1407 018e C230      		cpi r28,lo8(2)
 1408 0190 01F0      		breq .L202
 1409 0192 8091 0000 		lds r24,mod_keys
 1410 0196 8111      		cpse r24,__zero_reg__
 1411 0198 00C0      		rjmp .L202
 513:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 1412               		.loc 2 513 0 is_stmt 1
 1413 019a 60E0      		ldi r22,0
 1414 019c 8CE2      		ldi r24,lo8(44)
 1415 019e 0E94 0000 		call usb_keyboard_press
 1416               	.LVL111:
 1417               	.L202:
 515:catboard.c    **** 			last_key = 0xFF;
 1418               		.loc 2 515 0
 1419 01a2 8FEF      		ldi r24,lo8(-1)
 1420 01a4 8093 0000 		sts last_key,r24
 1421 01a8 00C0      		rjmp .L221
 1422               	.LVL112:
 1423               	.L187:
 521:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 1424               		.loc 2 521 0
 1425 01aa 9536      		cpi r25,lo8(101)
 1426 01ac 00F4      		brsh .+2
 1427 01ae 00C0      		rjmp .L203
 522:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1428               		.loc 2 522 0
 1429 01b0 2091 0000 		lds r18,os_mode
 1430               	.LVL113:
 1431 01b4 8091 0000 		lds r24,mod_keys
 1432 01b8 2230      		cpi r18,lo8(2)
 1433 01ba 01F4      		brne .L204
 522:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1434               		.loc 2 522 0 is_stmt 0 discriminator 1
 1435 01bc 9536      		cpi r25,lo8(101)
 1436 01be 01F4      		brne .L205
 1437               	.L213:
 523:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 1438               		.loc 2 523 0 is_stmt 1
 1439 01c0 877F      		andi r24,lo8(-9)
 1440 01c2 00C0      		rjmp .L263
 1441               	.L205:
 524:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1442               		.loc 2 524 0 discriminator 1
 1443 01c4 9936      		cpi r25,lo8(105)
 1444 01c6 01F4      		brne .L261
 1445 01c8 00C0      		rjmp .L207
 1446               	.L204:
 524:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1447               		.loc 2 524 0 is_stmt 0 discriminator 2
 1448 01ca 9C36      		cpi r25,lo8(108)
 1449 01cc 01F4      		brne .L209
 1450               	.L207:
 525:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 1451               		.loc 2 525 0 is_stmt 1
 1452 01ce 8F77      		andi r24,lo8(127)
 1453 01d0 00C0      		rjmp .L263
 1454               	.L209:
 526:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 1455               		.loc 2 526 0
 1456 01d2 9536      		cpi r25,lo8(101)
 1457 01d4 01F4      		brne .L210
 527:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 1458               		.loc 2 527 0
 1459 01d6 8E7F      		andi r24,lo8(-2)
 1460 01d8 00C0      		rjmp .L263
 1461               	.L261:
 524:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1462               		.loc 2 524 0
 1463 01da 9C36      		cpi r25,lo8(108)
 1464 01dc 01F0      		breq .L207
 1465               	.L210:
 528:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 1466               		.loc 2 528 0
 1467 01de 9636      		cpi r25,lo8(102)
 1468 01e0 01F4      		brne .L211
 529:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 1469               		.loc 2 529 0
 1470 01e2 8D7F      		andi r24,lo8(-3)
 1471 01e4 00C0      		rjmp .L263
 1472               	.L211:
 530:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 1473               		.loc 2 530 0
 1474 01e6 9736      		cpi r25,lo8(103)
 1475 01e8 01F4      		brne .L212
 531:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 1476               		.loc 2 531 0
 1477 01ea 8B7F      		andi r24,lo8(-5)
 1478 01ec 00C0      		rjmp .L263
 1479               	.L212:
 532:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 1480               		.loc 2 532 0
 1481 01ee 9836      		cpi r25,lo8(104)
 1482 01f0 01F0      		breq .L213
 534:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 1483               		.loc 2 534 0
 1484 01f2 9936      		cpi r25,lo8(105)
 1485 01f4 01F4      		brne .L214
 535:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 1486               		.loc 2 535 0
 1487 01f6 8F7E      		andi r24,lo8(-17)
 1488 01f8 00C0      		rjmp .L263
 1489               	.L214:
 536:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 1490               		.loc 2 536 0
 1491 01fa 9A36      		cpi r25,lo8(106)
 1492 01fc 01F4      		brne .L215
 537:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_SHIFT;
 1493               		.loc 2 537 0
 1494 01fe 8F7D      		andi r24,lo8(-33)
 1495 0200 00C0      		rjmp .L263
 1496               	.L215:
 539:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 1497               		.loc 2 539 0
 1498 0202 8F7B      		andi r24,lo8(-65)
 1499               	.L263:
 1500 0204 8093 0000 		sts mod_keys,r24
 543:catboard.c    **** 		send();
 1501               		.loc 2 543 0
 1502 0208 0E94 0000 		call send
 1503               	.LVL114:
 544:catboard.c    **** 		press_time = 0;
 1504               		.loc 2 544 0
 1505 020c 1092 0000 		sts press_time+1,__zero_reg__
 1506 0210 1092 0000 		sts press_time,__zero_reg__
 545:catboard.c    **** 		press_time2 = 0;
 1507               		.loc 2 545 0
 1508 0214 1092 0000 		sts press_time2+1,__zero_reg__
 1509 0218 1092 0000 		sts press_time2,__zero_reg__
 546:catboard.c    **** 		release_time = 0;
 1510               		.loc 2 546 0
 1511 021c 1092 0000 		sts release_time+1,__zero_reg__
 1512 0220 1092 0000 		sts release_time,__zero_reg__
 547:catboard.c    **** 		repeat_time = 0;
 1513               		.loc 2 547 0
 1514 0224 1092 0000 		sts repeat_time+1,__zero_reg__
 1515 0228 1092 0000 		sts repeat_time,__zero_reg__
 548:catboard.c    **** 		last_key = 0;
 1516               		.loc 2 548 0
 1517 022c 1092 0000 		sts last_key,__zero_reg__
 1518 0230 00C0      		rjmp .L183
 1519               	.LVL115:
 1520               	.L203:
 1521 0232 E0E0      		ldi r30,lo8(queue)
 1522 0234 F0E0      		ldi r31,hi8(queue)
 521:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 1523               		.loc 2 521 0
 1524 0236 80E0      		ldi r24,0
 1525               	.LVL116:
 1526               	.L219:
 551:catboard.c    **** 			if (queue[i]==key_id) {
 1527               		.loc 2 551 0
 1528 0238 9191      		ld r25,Z+
 1529 023a 9D17      		cp r25,r29
 1530 023c 01F0      		breq .L217
 550:catboard.c    **** 		for (i=0; i<6; i++) {
 1531               		.loc 2 550 0
 1532 023e 8F5F      		subi r24,lo8(-(1))
 1533               	.LVL117:
 1534 0240 8630      		cpi r24,lo8(6)
 1535 0242 01F4      		brne .L219
 1536               	.L217:
 555:catboard.c    **** 		for (; i<6; i++) {
 1537               		.loc 2 555 0 discriminator 1
 1538 0244 8630      		cpi r24,lo8(6)
 1539 0246 01F0      		breq .L266
 556:catboard.c    **** 			queue[i] = queue[i+1];
 1540               		.loc 2 556 0 discriminator 2
 1541 0248 E82F      		mov r30,r24
 1542 024a F0E0      		ldi r31,0
 1543 024c E050      		subi r30,lo8(-(queue))
 1544 024e F040      		sbci r31,hi8(-(queue))
 1545 0250 9181      		ldd r25,Z+1
 1546 0252 9083      		st Z,r25
 555:catboard.c    **** 		for (; i<6; i++) {
 1547               		.loc 2 555 0 discriminator 2
 1548 0254 8F5F      		subi r24,lo8(-(1))
 1549               	.LVL118:
 1550 0256 00C0      		rjmp .L217
 1551               	.L266:
 558:catboard.c    **** 		send();
 1552               		.loc 2 558 0
 1553 0258 0E94 0000 		call send
 1554               	.LVL119:
 560:catboard.c    **** 		if (last_key==key_id) { // realise time
 1555               		.loc 2 560 0
 1556 025c 8091 0000 		lds r24,last_key
 1557 0260 8D13      		cpse r24,r29
 1558 0262 00C0      		rjmp .L221
 561:catboard.c    **** 			press_time2 = 0;
 1559               		.loc 2 561 0
 1560 0264 1092 0000 		sts press_time2+1,__zero_reg__
 1561 0268 1092 0000 		sts press_time2,__zero_reg__
 562:catboard.c    **** 			release_time = 1;
 1562               		.loc 2 562 0
 1563 026c 81E0      		ldi r24,lo8(1)
 1564 026e 90E0      		ldi r25,0
 1565 0270 9093 0000 		sts release_time+1,r25
 1566 0274 8093 0000 		sts release_time,r24
 1567 0278 00C0      		rjmp .L264
 1568               	.L221:
 565:catboard.c    **** 			press_time = 0;
 1569               		.loc 2 565 0
 1570 027a 1092 0000 		sts press_time+1,__zero_reg__
 1571 027e 1092 0000 		sts press_time,__zero_reg__
 566:catboard.c    **** 			press_time2 = 0;
 1572               		.loc 2 566 0
 1573 0282 1092 0000 		sts press_time2+1,__zero_reg__
 1574 0286 1092 0000 		sts press_time2,__zero_reg__
 567:catboard.c    **** 			release_time = 0;
 1575               		.loc 2 567 0
 1576 028a 1092 0000 		sts release_time+1,__zero_reg__
 1577 028e 1092 0000 		sts release_time,__zero_reg__
 1578               	.L264:
 568:catboard.c    **** 			repeat_time = 0;
 1579               		.loc 2 568 0
 1580 0292 1092 0000 		sts repeat_time+1,__zero_reg__
 1581 0296 1092 0000 		sts repeat_time,__zero_reg__
 1582               	.L183:
 1583               	/* epilogue start */
 571:catboard.c    **** }
 1584               		.loc 2 571 0
 1585 029a DF91      		pop r29
 1586               	.LVL120:
 1587 029c CF91      		pop r28
 1588               	.LVL121:
 1589 029e 0895      		ret
 1590               		.cfi_endproc
 1591               	.LFE15:
 1593               		.section	.text.poll,"ax",@progbits
 1594               	.global	poll
 1596               	poll:
 1597               	.LFB11:
 205:catboard.c    **** void poll() {
 1598               		.loc 2 205 0
 1599               		.cfi_startproc
 1600 0000 7F92      		push r7
 1601               	.LCFI7:
 1602               		.cfi_def_cfa_offset 3
 1603               		.cfi_offset 7, -2
 1604 0002 8F92      		push r8
 1605               	.LCFI8:
 1606               		.cfi_def_cfa_offset 4
 1607               		.cfi_offset 8, -3
 1608 0004 9F92      		push r9
 1609               	.LCFI9:
 1610               		.cfi_def_cfa_offset 5
 1611               		.cfi_offset 9, -4
 1612 0006 AF92      		push r10
 1613               	.LCFI10:
 1614               		.cfi_def_cfa_offset 6
 1615               		.cfi_offset 10, -5
 1616 0008 BF92      		push r11
 1617               	.LCFI11:
 1618               		.cfi_def_cfa_offset 7
 1619               		.cfi_offset 11, -6
 1620 000a CF92      		push r12
 1621               	.LCFI12:
 1622               		.cfi_def_cfa_offset 8
 1623               		.cfi_offset 12, -7
 1624 000c DF92      		push r13
 1625               	.LCFI13:
 1626               		.cfi_def_cfa_offset 9
 1627               		.cfi_offset 13, -8
 1628 000e EF92      		push r14
 1629               	.LCFI14:
 1630               		.cfi_def_cfa_offset 10
 1631               		.cfi_offset 14, -9
 1632 0010 FF92      		push r15
 1633               	.LCFI15:
 1634               		.cfi_def_cfa_offset 11
 1635               		.cfi_offset 15, -10
 1636 0012 0F93      		push r16
 1637               	.LCFI16:
 1638               		.cfi_def_cfa_offset 12
 1639               		.cfi_offset 16, -11
 1640 0014 1F93      		push r17
 1641               	.LCFI17:
 1642               		.cfi_def_cfa_offset 13
 1643               		.cfi_offset 17, -12
 1644 0016 CF93      		push r28
 1645               	.LCFI18:
 1646               		.cfi_def_cfa_offset 14
 1647               		.cfi_offset 28, -13
 1648 0018 DF93      		push r29
 1649               	.LCFI19:
 1650               		.cfi_def_cfa_offset 15
 1651               		.cfi_offset 29, -14
 1652               	/* prologue: function */
 1653               	/* frame size = 0 */
 1654               	/* stack size = 13 */
 1655               	.L__stack_usage = 13
 1656               	.LVL122:
 1657 001a 70E0      		ldi r23,lo8(row_port)
 1658 001c E72E      		mov r14,r23
 1659 001e 70E0      		ldi r23,hi8(row_port)
 1660 0020 F72E      		mov r15,r23
 1661 0022 00E0      		ldi r16,lo8(row_bit)
 1662 0024 10E0      		ldi r17,hi8(row_bit)
 207:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1663               		.loc 2 207 0
 1664 0026 812C      		mov r8,__zero_reg__
 1665               	.LVL123:
 1666               	.L273:
 208:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1667               		.loc 2 208 0
 1668 0028 D701      		movw r26,r14
 1669 002a CD91      		ld r28,X+
 1670 002c DD91      		ld r29,X+
 1671 002e 7D01      		movw r14,r26
 1672 0030 F801      		movw r30,r16
 1673 0032 9190      		ld r9,Z+
 1674 0034 8F01      		movw r16,r30
 1675 0036 992D      		mov r25,r9
 1676 0038 9095      		com r25
 1677 003a 8881      		ld r24,Y
 1678 003c 8923      		and r24,r25
 1679 003e 8883      		st Y,r24
 1680               	.LVL124:
 1681               	.LBB44:
 1682               	.LBB45:
 165:/usr/avr/include/util/delay.h **** 
 166:/usr/avr/include/util/delay.h **** #else
 167:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/avr/include/util/delay.h **** 	{
 172:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/avr/include/util/delay.h **** 		{
 176:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/avr/include/util/delay.h **** 		}
 180:/usr/avr/include/util/delay.h **** 		return;
 181:/usr/avr/include/util/delay.h **** 	}
 182:/usr/avr/include/util/delay.h **** 	else
 183:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/avr/include/util/delay.h **** #endif
 186:/usr/avr/include/util/delay.h **** }
 187:/usr/avr/include/util/delay.h **** 
 188:/usr/avr/include/util/delay.h **** /**
 189:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/avr/include/util/delay.h **** 
 191:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/avr/include/util/delay.h **** 
 193:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/avr/include/util/delay.h **** 
 196:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/avr/include/util/delay.h **** 
 198:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/avr/include/util/delay.h **** 
 202:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/avr/include/util/delay.h ****   
 207:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/avr/include/util/delay.h **** 
 211:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/avr/include/util/delay.h ****  
 214:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****  */
 223:/usr/avr/include/util/delay.h **** void
 224:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/avr/include/util/delay.h **** {
 226:/usr/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/avr/include/util/delay.h **** 
 235:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/avr/include/util/delay.h **** 
 238:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h **** 	#else
 242:/usr/avr/include/util/delay.h **** 		//round up by default
 243:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/avr/include/util/delay.h **** 	#endif
 245:/usr/avr/include/util/delay.h **** 
 246:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1683               		.loc 3 246 0
 1684 0040 F5E0      		ldi r31,lo8(5)
 1685 0042 FA95      		1: dec r31
 1686 0044 01F4      		brne 1b
 1687 0046 0000      		nop
 1688               	.LVL125:
 1689 0048 50E0      		ldi r21,lo8(col_pin)
 1690 004a A52E      		mov r10,r21
 1691 004c 50E0      		ldi r21,hi8(col_pin)
 1692 004e B52E      		mov r11,r21
 1693 0050 60E0      		ldi r22,lo8(col_bit)
 1694 0052 C62E      		mov r12,r22
 1695 0054 60E0      		ldi r22,hi8(col_bit)
 1696 0056 D62E      		mov r13,r22
 1697 0058 712C      		mov r7,__zero_reg__
 1698               	.LVL126:
 1699               	.L271:
 1700               	.LBE45:
 1701               	.LBE44:
 211:catboard.c    **** 			key_id = col*ROWS+row;
 1702               		.loc 2 211 0
 1703 005a 872D      		mov r24,r7
 1704 005c 880D      		add r24,r8
 1705               	.LVL127:
 212:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1706               		.loc 2 212 0
 1707 005e D501      		movw r26,r10
 1708 0060 ED91      		ld r30,X+
 1709 0062 FD91      		ld r31,X+
 1710 0064 5D01      		movw r10,r26
 1711 0066 D601      		movw r26,r12
 1712 0068 9D91      		ld r25,X+
 1713 006a 6D01      		movw r12,r26
 1714               	.LVL128:
 1715 006c 2081      		ld r18,Z
 1716 006e 9223      		and r25,r18
 1717 0070 282F      		mov r18,r24
 1718 0072 30E0      		ldi r19,0
 213:catboard.c    **** 				if (! pressed[key_id]) {
 1719               		.loc 2 213 0
 1720 0074 F901      		movw r30,r18
 1721 0076 E050      		subi r30,lo8(-(pressed))
 1722 0078 F040      		sbci r31,hi8(-(pressed))
 212:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1723               		.loc 2 212 0
 1724 007a 9111      		cpse r25,__zero_reg__
 1725 007c 00C0      		rjmp .L268
 213:catboard.c    **** 				if (! pressed[key_id]) {
 1726               		.loc 2 213 0
 1727 007e 9081      		ld r25,Z
 1728 0080 9111      		cpse r25,__zero_reg__
 1729 0082 00C0      		rjmp .L269
 214:catboard.c    **** 					key_press(key_id);
 1730               		.loc 2 214 0
 1731 0084 0E94 0000 		call key_press
 1732               	.LVL129:
 1733 0088 00C0      		rjmp .L269
 1734               	.LVL130:
 1735               	.L268:
 216:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1736               		.loc 2 216 0
 1737 008a 9081      		ld r25,Z
 1738 008c 9111      		cpse r25,__zero_reg__
 217:catboard.c    **** 				key_release(key_id);
 1739               		.loc 2 217 0
 1740 008e 0E94 0000 		call key_release
 1741               	.LVL131:
 1742               	.L269:
 1743 0092 B5E0      		ldi r27,lo8(5)
 1744 0094 7B0E      		add r7,r27
 1745               	.LVL132:
 210:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1746               		.loc 2 210 0
 1747 0096 ECE3      		ldi r30,lo8(60)
 1748 0098 7E12      		cpse r7,r30
 1749 009a 00C0      		rjmp .L271
 220:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1750               		.loc 2 220 0
 1751 009c 8881      		ld r24,Y
 1752 009e 8929      		or r24,r9
 1753 00a0 8883      		st Y,r24
 207:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1754               		.loc 2 207 0
 1755 00a2 8394      		inc r8
 1756               	.LVL133:
 1757 00a4 8B12      		cpse r8,r27
 1758 00a6 00C0      		rjmp .L273
 222:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 1759               		.loc 2 222 0
 1760 00a8 8091 0000 		lds r24,keyboard_leds
 1761 00ac 8270      		andi r24,lo8(2)
 1762 00ae 9091 0000 		lds r25,caps_lock_led
 1763 00b2 9813      		cpse r25,r24
 1764               	.LBB46:
 223:catboard.c    **** 		caps_lock_change_layer();
 1765               		.loc 2 223 0
 1766 00b4 0E94 0000 		call caps_lock_change_layer
 1767               	.LVL134:
 1768               	.L274:
 1769               	.LBE46:
 226:catboard.c    **** 	repeat_tick();
 1770               		.loc 2 226 0
 1771 00b8 0E94 0000 		call repeat_tick
 1772               	.LVL135:
 1773               	.LBB47:
 1774               	.LBB48:
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1775               		.loc 3 164 0
 1776 00bc 8FE1      		ldi r24,lo8(19999)
 1777 00be 9EE4      		ldi r25,hi8(19999)
 1778 00c0 0197      		1: sbiw r24,1
 1779 00c2 01F4      		brne 1b
 1780 00c4 00C0      		rjmp .
 1781 00c6 0000      		nop
 1782               	/* epilogue start */
 1783               	.LBE48:
 1784               	.LBE47:
 228:catboard.c    **** }
 1785               		.loc 2 228 0
 1786 00c8 DF91      		pop r29
 1787 00ca CF91      		pop r28
 1788 00cc 1F91      		pop r17
 1789 00ce 0F91      		pop r16
 1790 00d0 FF90      		pop r15
 1791 00d2 EF90      		pop r14
 1792 00d4 DF90      		pop r13
 1793 00d6 CF90      		pop r12
 1794               	.LVL136:
 1795 00d8 BF90      		pop r11
 1796 00da AF90      		pop r10
 1797 00dc 9F90      		pop r9
 1798 00de 8F90      		pop r8
 1799               	.LVL137:
 1800 00e0 7F90      		pop r7
 1801 00e2 0895      		ret
 1802               		.cfi_endproc
 1803               	.LFE11:
 1805               		.section	.text.startup.main,"ax",@progbits
 1806               	.global	main
 1808               	main:
 1809               	.LFB9:
 166:catboard.c    **** int main(void) {
 1810               		.loc 2 166 0
 1811               		.cfi_startproc
 1812               	/* prologue: function */
 1813               	/* frame size = 0 */
 1814               	/* stack size = 0 */
 1815               	.L__stack_usage = 0
 168:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1816               		.loc 2 168 0
 1817 0000 84B7      		in r24,0x34
 1818 0002 877F      		andi r24,lo8(-9)
 1819 0004 84BF      		out 0x34,r24
 169:catboard.c    **** 	wdt_disable();
 1820               		.loc 2 169 0
 1821 0006 88E1      		ldi r24,lo8(24)
 1822               	/* #APP */
 1823               	 ;  169 "catboard.c" 1
 1824 0008 0FB6      		in __tmp_reg__, __SREG__
 1825 000a F894      		cli
 1826 000c 8093 6000 		sts 96, r24
 1827 0010 1092 6000 		sts 96, __zero_reg__
 1828 0014 0FBE      		out __SREG__,__tmp_reg__
 1829               		
 1830               	 ;  0 "" 2
 1831               	.LVL138:
 1832               	/* #NOAPP */
 1833               	.LBB49:
 1834               	.LBB50:
 1835               		.file 4 "/usr/avr/include/avr/power.h"
   1:/usr/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/avr/include/avr/power.h ****    All rights reserved.
   3:/usr/avr/include/avr/power.h **** 
   4:/usr/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/avr/power.h **** 
   7:/usr/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/avr/include/avr/power.h ****      distribution.
  13:/usr/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/avr/include/avr/power.h **** 
  17:/usr/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/avr/include/avr/power.h **** 
  29:/usr/avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/avr/include/avr/power.h **** 
  31:/usr/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/avr/include/avr/power.h **** 
  34:/usr/avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/avr/include/avr/power.h **** 
  37:/usr/avr/include/avr/power.h **** 
  38:/usr/avr/include/avr/power.h **** /** \file */
  39:/usr/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/avr/include/avr/power.h **** 
  41:/usr/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/avr/include/avr/power.h **** 
  43:/usr/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/avr/include/avr/power.h **** peripherals as needed.
  46:/usr/avr/include/avr/power.h **** 
  47:/usr/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/avr/include/avr/power.h **** 
  50:/usr/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/avr/include/avr/power.h **** macros are not available.
  53:/usr/avr/include/avr/power.h **** 
  54:/usr/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/avr/include/avr/power.h **** 
  59:/usr/avr/include/avr/power.h **** */
  60:/usr/avr/include/avr/power.h **** 
  61:/usr/avr/include/avr/power.h **** 
  62:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/avr/include/avr/power.h **** 
  64:/usr/avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/avr/include/avr/power.h **** <small>
  66:/usr/avr/include/avr/power.h **** <center>
  67:/usr/avr/include/avr/power.h **** <table border="3">
  68:/usr/avr/include/avr/power.h ****   <tr>
  69:/usr/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/avr/include/avr/power.h ****   </tr>
  73:/usr/avr/include/avr/power.h **** 
  74:/usr/avr/include/avr/power.h ****   <tr>
  75:/usr/avr/include/avr/power.h ****    <td>power_aca_disable()</td>
  76:/usr/avr/include/avr/power.h ****     <td> Disable The Analog Comparator On PortA </td>
  77:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
  78:/usr/avr/include/avr/power.h ****   </tr>
  79:/usr/avr/include/avr/power.h **** 
  80:/usr/avr/include/avr/power.h ****   <tr>
  81:/usr/avr/include/avr/power.h ****    <td>power_aca_enable()</td>
  82:/usr/avr/include/avr/power.h ****     <td> Enable The Analog Comparator On PortA </td>
  83:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
  84:/usr/avr/include/avr/power.h ****   </tr>
  85:/usr/avr/include/avr/power.h **** 
  86:/usr/avr/include/avr/power.h ****   <tr>
  87:/usr/avr/include/avr/power.h ****    <td>power_acb_disable()</td>
  88:/usr/avr/include/avr/power.h ****     <td> Disable The Analog Comparator On PortB </td>
  89:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
  90:/usr/avr/include/avr/power.h ****   </tr>
  91:/usr/avr/include/avr/power.h **** 
  92:/usr/avr/include/avr/power.h ****   <tr>
  93:/usr/avr/include/avr/power.h ****    <td>power_acb_enable()</td>
  94:/usr/avr/include/avr/power.h ****     <td> Enable The Analog Comparator On PortB </td>
  95:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
  96:/usr/avr/include/avr/power.h ****   </tr>
  97:/usr/avr/include/avr/power.h **** 
  98:/usr/avr/include/avr/power.h ****   <tr>
  99:/usr/avr/include/avr/power.h ****    <td>power_adc_disable()</td>
 100:/usr/avr/include/avr/power.h ****      <td>Disable the Analog to Digital Converter module.</td>
 101:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 102:/usr/avr/include/avr/power.h ****   </tr>
 103:/usr/avr/include/avr/power.h **** 
 104:/usr/avr/include/avr/power.h ****   <tr>
 105:/usr/avr/include/avr/power.h ****    <td>power_adc_enable()</td>
 106:/usr/avr/include/avr/power.h ****      <td>Enable the Analog to Digital Converter module.</td>
 107:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 108:/usr/avr/include/avr/power.h ****   </tr>
 109:/usr/avr/include/avr/power.h **** 
 110:/usr/avr/include/avr/power.h ****   <tr>
 111:/usr/avr/include/avr/power.h ****    <td>power_adca_disable()</td>
 112:/usr/avr/include/avr/power.h ****     <td> Disable the Analog to Digital Converter module On PortA </td>
 113:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 114:/usr/avr/include/avr/power.h ****   </tr>
 115:/usr/avr/include/avr/power.h **** 
 116:/usr/avr/include/avr/power.h ****   <tr>
 117:/usr/avr/include/avr/power.h ****    <td>power_adca_enable()</td>
 118:/usr/avr/include/avr/power.h ****     <td> Enable the Analog to Digital Converter module On PortA </td>
 119:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 120:/usr/avr/include/avr/power.h ****   </tr>
 121:/usr/avr/include/avr/power.h **** 
 122:/usr/avr/include/avr/power.h ****   <tr>
 123:/usr/avr/include/avr/power.h ****    <td>power_adcb_disable()</td>
 124:/usr/avr/include/avr/power.h ****     <td> Disable the Analog to Digital Converter module On PortB </td>
 125:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 126:/usr/avr/include/avr/power.h ****   </tr>
 127:/usr/avr/include/avr/power.h **** 
 128:/usr/avr/include/avr/power.h ****   <tr>
 129:/usr/avr/include/avr/power.h ****    <td>power_adcb_enable()</td>
 130:/usr/avr/include/avr/power.h ****     <td> Enable the Analog to Digital Converter module On PortB </td>
 131:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 132:/usr/avr/include/avr/power.h ****   </tr>
 133:/usr/avr/include/avr/power.h **** 
 134:/usr/avr/include/avr/power.h ****   <tr>
 135:/usr/avr/include/avr/power.h ****    <td>power_aes_disable()</td>
 136:/usr/avr/include/avr/power.h ****     <td> Disable the AES module </td>
 137:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 138:/usr/avr/include/avr/power.h ****   </tr>
 139:/usr/avr/include/avr/power.h **** 
 140:/usr/avr/include/avr/power.h ****   <tr>
 141:/usr/avr/include/avr/power.h ****    <td>power_aes_enable()</td>
 142:/usr/avr/include/avr/power.h ****     <td> Enable the AES module </td>
 143:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 144:/usr/avr/include/avr/power.h ****   </tr>
 145:/usr/avr/include/avr/power.h **** 
 146:/usr/avr/include/avr/power.h ****   <tr>
 147:/usr/avr/include/avr/power.h ****    <td>power_all_disable()</td>
 148:/usr/avr/include/avr/power.h ****      <td>Disable all modules.</td>
 149:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
 150:/usr/avr/include/avr/power.h ****   </tr>
 151:/usr/avr/include/avr/power.h **** 
 152:/usr/avr/include/avr/power.h ****   <tr>
 153:/usr/avr/include/avr/power.h ****    <td>power_all_enable()</td>
 154:/usr/avr/include/avr/power.h ****      <td>Enable all modules.</td>
 155:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
 156:/usr/avr/include/avr/power.h ****   </tr>
 157:/usr/avr/include/avr/power.h **** 
 158:/usr/avr/include/avr/power.h ****   <tr>
 159:/usr/avr/include/avr/power.h ****    <td>power_can_disable()</td>
 160:/usr/avr/include/avr/power.h ****     <td> Disable the CAN module </td>
 161:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 162:/usr/avr/include/avr/power.h ****   </tr>
 163:/usr/avr/include/avr/power.h **** 
 164:/usr/avr/include/avr/power.h ****   <tr>
 165:/usr/avr/include/avr/power.h ****    <td>power_can_enable()</td>
 166:/usr/avr/include/avr/power.h ****     <td> Enable the CAN module </td>
 167:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 168:/usr/avr/include/avr/power.h ****   </tr>
 169:/usr/avr/include/avr/power.h **** 
 170:/usr/avr/include/avr/power.h ****   <tr>
 171:/usr/avr/include/avr/power.h ****    <td>power_cinterface_disable()</td>
 172:/usr/avr/include/avr/power.h ****     <td> Disable the CINTERFACE module </td>
 173:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 174:/usr/avr/include/avr/power.h ****   </tr>
 175:/usr/avr/include/avr/power.h **** 
 176:/usr/avr/include/avr/power.h ****   <tr>
 177:/usr/avr/include/avr/power.h ****    <td>power_cinterface_enable()</td>
 178:/usr/avr/include/avr/power.h ****     <td> Enable the CINTERFACE module </td>
 179:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 180:/usr/avr/include/avr/power.h ****   </tr>
 181:/usr/avr/include/avr/power.h **** 
 182:/usr/avr/include/avr/power.h ****   <tr>
 183:/usr/avr/include/avr/power.h ****    <td>power_crypto_disable()</td>
 184:/usr/avr/include/avr/power.h ****     <td> Disable the CRYPTO module </td>
 185:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 186:/usr/avr/include/avr/power.h ****   </tr>
 187:/usr/avr/include/avr/power.h **** 
 188:/usr/avr/include/avr/power.h ****   <tr>
 189:/usr/avr/include/avr/power.h ****    <td>power_crypto_enable()</td>
 190:/usr/avr/include/avr/power.h ****     <td> Enable the CRYPTO module </td>
 191:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 192:/usr/avr/include/avr/power.h ****   </tr>
 193:/usr/avr/include/avr/power.h **** 
 194:/usr/avr/include/avr/power.h ****   <tr>
 195:/usr/avr/include/avr/power.h ****    <td>power_daca_disable()</td>
 196:/usr/avr/include/avr/power.h ****     <td> Disable the DAC module on PortA </td>
 197:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 198:/usr/avr/include/avr/power.h ****   </tr>
 199:/usr/avr/include/avr/power.h **** 
 200:/usr/avr/include/avr/power.h ****   <tr>
 201:/usr/avr/include/avr/power.h ****    <td>power_daca_enable()</td>
 202:/usr/avr/include/avr/power.h ****     <td> Enable the DAC module on PortA </td>
 203:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 204:/usr/avr/include/avr/power.h ****   </tr>
 205:/usr/avr/include/avr/power.h **** 
 206:/usr/avr/include/avr/power.h ****   <tr>
 207:/usr/avr/include/avr/power.h ****    <td>power_dacb_disable()</td>
 208:/usr/avr/include/avr/power.h ****     <td> Disable the DAC module on PortB </td>
 209:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 210:/usr/avr/include/avr/power.h ****   </tr>
 211:/usr/avr/include/avr/power.h **** 
 212:/usr/avr/include/avr/power.h ****   <tr>
 213:/usr/avr/include/avr/power.h ****    <td>power_dacb_enable()</td>
 214:/usr/avr/include/avr/power.h ****     <td> Enable the DAC module on PortB </td>
 215:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 216:/usr/avr/include/avr/power.h ****   </tr>
 217:/usr/avr/include/avr/power.h **** 
 218:/usr/avr/include/avr/power.h ****   <tr>
 219:/usr/avr/include/avr/power.h ****    <td>power_dma_disable()</td>
 220:/usr/avr/include/avr/power.h ****     <td> Disable the DMA module </td>
 221:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 222:/usr/avr/include/avr/power.h ****   </tr>
 223:/usr/avr/include/avr/power.h **** 
 224:/usr/avr/include/avr/power.h ****   <tr>
 225:/usr/avr/include/avr/power.h ****    <td>power_dma_enable()</td>
 226:/usr/avr/include/avr/power.h ****     <td> Enable the DMA module </td>
 227:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 228:/usr/avr/include/avr/power.h ****   </tr>
 229:/usr/avr/include/avr/power.h **** 
 230:/usr/avr/include/avr/power.h ****   <tr>
 231:/usr/avr/include/avr/power.h ****    <td>power_ebi_disable()</td>
 232:/usr/avr/include/avr/power.h ****     <td> Disable the EBI module </td>
 233:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 234:/usr/avr/include/avr/power.h ****   </tr>
 235:/usr/avr/include/avr/power.h **** 
 236:/usr/avr/include/avr/power.h ****   <tr>
 237:/usr/avr/include/avr/power.h ****    <td>power_ebi_enable()</td>
 238:/usr/avr/include/avr/power.h ****     <td> Enable the EBI module </td>
 239:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 240:/usr/avr/include/avr/power.h ****   </tr>
 241:/usr/avr/include/avr/power.h **** 
 242:/usr/avr/include/avr/power.h ****   <tr>
 243:/usr/avr/include/avr/power.h ****    <td>power_edma_disable()</td>
 244:/usr/avr/include/avr/power.h ****     <td> Disable EDMA module </td>
 245:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 246:/usr/avr/include/avr/power.h ****   </tr>
 247:/usr/avr/include/avr/power.h **** 
 248:/usr/avr/include/avr/power.h ****   <tr>
 249:/usr/avr/include/avr/power.h ****    <td>power_edma_enable()</td>
 250:/usr/avr/include/avr/power.h ****     <td> Enable EDMA module </td>
 251:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 252:/usr/avr/include/avr/power.h ****   </tr>
 253:/usr/avr/include/avr/power.h **** 
 254:/usr/avr/include/avr/power.h ****   <tr>
 255:/usr/avr/include/avr/power.h ****    <td>power_evsys_disable()</td>
 256:/usr/avr/include/avr/power.h ****     <td> Disable the EVSYS module </td>
 257:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 258:/usr/avr/include/avr/power.h ****   </tr>
 259:/usr/avr/include/avr/power.h **** 
 260:/usr/avr/include/avr/power.h ****   <tr>
 261:/usr/avr/include/avr/power.h ****    <td>power_evsys_enable()</td>
 262:/usr/avr/include/avr/power.h ****     <td> Enable the EVSYS module </td>
 263:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 264:/usr/avr/include/avr/power.h ****   </tr>
 265:/usr/avr/include/avr/power.h **** 
 266:/usr/avr/include/avr/power.h ****   <tr>
 267:/usr/avr/include/avr/power.h ****    <td>power_hiresc_disable()</td>
 268:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortC </td>
 269:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 270:/usr/avr/include/avr/power.h ****   </tr>
 271:/usr/avr/include/avr/power.h **** 
 272:/usr/avr/include/avr/power.h ****   <tr>
 273:/usr/avr/include/avr/power.h ****    <td>power_hiresc_enable()</td>
 274:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortC </td>
 275:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 276:/usr/avr/include/avr/power.h ****   </tr>
 277:/usr/avr/include/avr/power.h **** 
 278:/usr/avr/include/avr/power.h ****   <tr>
 279:/usr/avr/include/avr/power.h ****    <td>power_hiresd_disable()</td>
 280:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortD </td>
 281:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 282:/usr/avr/include/avr/power.h ****   </tr>
 283:/usr/avr/include/avr/power.h **** 
 284:/usr/avr/include/avr/power.h ****   <tr>
 285:/usr/avr/include/avr/power.h ****    <td>power_hiresd_enable()</td>
 286:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortD </td>
 287:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 288:/usr/avr/include/avr/power.h ****   </tr>
 289:/usr/avr/include/avr/power.h **** 
 290:/usr/avr/include/avr/power.h ****   <tr>
 291:/usr/avr/include/avr/power.h ****    <td>power_hirese_disable()</td>
 292:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortE </td>
 293:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 294:/usr/avr/include/avr/power.h ****   </tr>
 295:/usr/avr/include/avr/power.h **** 
 296:/usr/avr/include/avr/power.h ****   <tr>
 297:/usr/avr/include/avr/power.h ****    <td>power_hirese_enable()</td>
 298:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortE </td>
 299:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 300:/usr/avr/include/avr/power.h ****   </tr>
 301:/usr/avr/include/avr/power.h **** 
 302:/usr/avr/include/avr/power.h ****   <tr>
 303:/usr/avr/include/avr/power.h ****    <td>power_hiresf_disable()</td>
 304:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortF </td>
 305:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 306:/usr/avr/include/avr/power.h ****   </tr>
 307:/usr/avr/include/avr/power.h **** 
 308:/usr/avr/include/avr/power.h ****   <tr>
 309:/usr/avr/include/avr/power.h ****    <td>power_hiresf_enable()</td>
 310:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortF </td>
 311:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 312:/usr/avr/include/avr/power.h ****   </tr>
 313:/usr/avr/include/avr/power.h **** 
 314:/usr/avr/include/avr/power.h ****   <tr>
 315:/usr/avr/include/avr/power.h ****    <td>power_hsspi_disable()</td>
 316:/usr/avr/include/avr/power.h ****     <td> Disable the HSPPI module </td>
 317:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 318:/usr/avr/include/avr/power.h ****   </tr>
 319:/usr/avr/include/avr/power.h **** 
 320:/usr/avr/include/avr/power.h ****   <tr>
 321:/usr/avr/include/avr/power.h ****    <td>power_hsspi_enable()</td>
 322:/usr/avr/include/avr/power.h ****     <td> Enable the HSPPI module </td>
 323:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 324:/usr/avr/include/avr/power.h ****   </tr>
 325:/usr/avr/include/avr/power.h **** 
 326:/usr/avr/include/avr/power.h ****   <tr>
 327:/usr/avr/include/avr/power.h ****    <td>power_irdriver_disable()</td>
 328:/usr/avr/include/avr/power.h ****     <td> Disable the IRDRIVER module </td>
 329:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 330:/usr/avr/include/avr/power.h ****   </tr>
 331:/usr/avr/include/avr/power.h **** 
 332:/usr/avr/include/avr/power.h ****   <tr>
 333:/usr/avr/include/avr/power.h ****    <td>power_irdriver_enable()</td>
 334:/usr/avr/include/avr/power.h ****     <td> Enable the IRDRIVER module </td>
 335:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 336:/usr/avr/include/avr/power.h ****   </tr>
 337:/usr/avr/include/avr/power.h **** 
 338:/usr/avr/include/avr/power.h ****   <tr>
 339:/usr/avr/include/avr/power.h ****    <td>power_kb_disable()</td>
 340:/usr/avr/include/avr/power.h ****     <td> Disable the KB module </td>
 341:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 342:/usr/avr/include/avr/power.h ****   </tr>
 343:/usr/avr/include/avr/power.h **** 
 344:/usr/avr/include/avr/power.h ****   <tr>
 345:/usr/avr/include/avr/power.h ****    <td>power_kb_enable()</td>
 346:/usr/avr/include/avr/power.h ****     <td> Enable the KB module </td>
 347:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 348:/usr/avr/include/avr/power.h ****   </tr>
 349:/usr/avr/include/avr/power.h **** 
 350:/usr/avr/include/avr/power.h ****   <tr>
 351:/usr/avr/include/avr/power.h ****    <td>power_lcd_disable()</td>
 352:/usr/avr/include/avr/power.h ****      <td>Disable the LCD module.</td>
 353:/usr/avr/include/avr/power.h ****     <td>ATxmega64B1, ATxmega64B3, ATxmega128B1, ATxmega128B3, ATmega169, ATmega169A, ATmega169P, AT
 354:/usr/avr/include/avr/power.h ****   </tr>
 355:/usr/avr/include/avr/power.h **** 
 356:/usr/avr/include/avr/power.h ****   <tr>
 357:/usr/avr/include/avr/power.h ****    <td>power_lcd_enable()</td>
 358:/usr/avr/include/avr/power.h ****      <td>Enable the LCD module.</td>
 359:/usr/avr/include/avr/power.h ****     <td>ATxmega64B1, ATxmega64B3, ATxmega128B1, ATxmega128B3, ATmega169, ATmega169A, ATmega169P, AT
 360:/usr/avr/include/avr/power.h ****   </tr>
 361:/usr/avr/include/avr/power.h **** 
 362:/usr/avr/include/avr/power.h ****   <tr>
 363:/usr/avr/include/avr/power.h ****    <td>power_lfreceiver_disable()</td>
 364:/usr/avr/include/avr/power.h ****     <td> Disable the LFRECEIVER module </td>
 365:/usr/avr/include/avr/power.h ****     <td>ATA5790</td>
 366:/usr/avr/include/avr/power.h ****   </tr>
 367:/usr/avr/include/avr/power.h **** 
 368:/usr/avr/include/avr/power.h ****   <tr>
 369:/usr/avr/include/avr/power.h ****    <td>power_lfreceiver_enable()</td>
 370:/usr/avr/include/avr/power.h ****     <td> Enable the LFRECEIVER module </td>
 371:/usr/avr/include/avr/power.h ****     <td>ATA5790</td>
 372:/usr/avr/include/avr/power.h ****   </tr>
 373:/usr/avr/include/avr/power.h **** 
 374:/usr/avr/include/avr/power.h ****   <tr>
 375:/usr/avr/include/avr/power.h ****    <td>power_lin_disable()</td>
 376:/usr/avr/include/avr/power.h ****     <td> Disable the LIN module </td>
 377:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1, ATtiny167, ATtiny87, ATA5505, A
 378:/usr/avr/include/avr/power.h ****   </tr>
 379:/usr/avr/include/avr/power.h **** 
 380:/usr/avr/include/avr/power.h ****   <tr>
 381:/usr/avr/include/avr/power.h ****    <td>power_lin_enable()</td>
 382:/usr/avr/include/avr/power.h ****     <td> Enable the LIN module </td>
 383:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1, ATtiny167, ATtiny87, ATA5505, A
 384:/usr/avr/include/avr/power.h ****   </tr>
 385:/usr/avr/include/avr/power.h **** 
 386:/usr/avr/include/avr/power.h ****   <tr>
 387:/usr/avr/include/avr/power.h ****    <td>power_pga_disable()</td>
 388:/usr/avr/include/avr/power.h ****     <td> Disable PGA module </td>
 389:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 390:/usr/avr/include/avr/power.h ****   </tr>
 391:/usr/avr/include/avr/power.h **** 
 392:/usr/avr/include/avr/power.h ****   <tr>
 393:/usr/avr/include/avr/power.h ****    <td>power_pga_enable()</td>
 394:/usr/avr/include/avr/power.h ****     <td> Enable PGA module </td>
 395:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 396:/usr/avr/include/avr/power.h ****   </tr>
 397:/usr/avr/include/avr/power.h **** 
 398:/usr/avr/include/avr/power.h ****   <tr>
 399:/usr/avr/include/avr/power.h ****    <td>power_psc0_disable()</td>
 400:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 0 module.</td>
 401:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 402:/usr/avr/include/avr/power.h ****   </tr>
 403:/usr/avr/include/avr/power.h **** 
 404:/usr/avr/include/avr/power.h ****   <tr>
 405:/usr/avr/include/avr/power.h ****    <td>power_psc0_enable()</td>
 406:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 0 module.</td>
 407:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 408:/usr/avr/include/avr/power.h ****   </tr>
 409:/usr/avr/include/avr/power.h **** 
 410:/usr/avr/include/avr/power.h ****   <tr>
 411:/usr/avr/include/avr/power.h ****    <td>power_psc1_disable()</td>
 412:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 1 module.</td>
 413:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 414:/usr/avr/include/avr/power.h ****   </tr>
 415:/usr/avr/include/avr/power.h **** 
 416:/usr/avr/include/avr/power.h ****   <tr>
 417:/usr/avr/include/avr/power.h ****    <td>power_psc1_enable()</td>
 418:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 1 module.</td>
 419:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 420:/usr/avr/include/avr/power.h ****   </tr>
 421:/usr/avr/include/avr/power.h **** 
 422:/usr/avr/include/avr/power.h ****   <tr>
 423:/usr/avr/include/avr/power.h ****    <td>power_psc2_disable()</td>
 424:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 2 module.</td>
 425:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316, AT90PWM81, AT90
 426:/usr/avr/include/avr/power.h ****   </tr>
 427:/usr/avr/include/avr/power.h **** 
 428:/usr/avr/include/avr/power.h ****   <tr>
 429:/usr/avr/include/avr/power.h ****    <td>power_psc2_enable()</td>
 430:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 2 module.</td>
 431:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316, AT90PWM81, AT90
 432:/usr/avr/include/avr/power.h ****   </tr>
 433:/usr/avr/include/avr/power.h **** 
 434:/usr/avr/include/avr/power.h ****   <tr>
 435:/usr/avr/include/avr/power.h ****    <td>power_psc_disable()</td>
 436:/usr/avr/include/avr/power.h ****     <td> Disable the Power Stage Controller module </td>
 437:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 438:/usr/avr/include/avr/power.h ****   </tr>
 439:/usr/avr/include/avr/power.h **** 
 440:/usr/avr/include/avr/power.h ****   <tr>
 441:/usr/avr/include/avr/power.h ****    <td>power_psc_enable()</td>
 442:/usr/avr/include/avr/power.h ****     <td> Enable the Power Stage Controller module </td>
 443:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 444:/usr/avr/include/avr/power.h ****   </tr>
 445:/usr/avr/include/avr/power.h **** 
 446:/usr/avr/include/avr/power.h ****   <tr>
 447:/usr/avr/include/avr/power.h ****    <td>power_pscr_disable()</td>
 448:/usr/avr/include/avr/power.h ****      <td>Disable the Reduced Power Stage Controller module.</td>
 449:/usr/avr/include/avr/power.h ****     <td>AT90PWM81, AT90PWM161</td>
 450:/usr/avr/include/avr/power.h ****   </tr>
 451:/usr/avr/include/avr/power.h **** 
 452:/usr/avr/include/avr/power.h ****   <tr>
 453:/usr/avr/include/avr/power.h ****    <td>power_pscr_enable()</td>
 454:/usr/avr/include/avr/power.h ****      <td>Enable the Reduced Power Stage Controller module.</td>
 455:/usr/avr/include/avr/power.h ****     <td>AT90PWM81, AT90PWM161</td>
 456:/usr/avr/include/avr/power.h ****   </tr>
 457:/usr/avr/include/avr/power.h **** 
 458:/usr/avr/include/avr/power.h ****   <tr>
 459:/usr/avr/include/avr/power.h ****    <td>power_ram0_disable()</td>
 460:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 0 module </td>
 461:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 462:/usr/avr/include/avr/power.h ****   </tr>
 463:/usr/avr/include/avr/power.h **** 
 464:/usr/avr/include/avr/power.h ****   <tr>
 465:/usr/avr/include/avr/power.h ****    <td>power_ram0_enable()</td>
 466:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 0 module </td>
 467:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 468:/usr/avr/include/avr/power.h ****   </tr>
 469:/usr/avr/include/avr/power.h **** 
 470:/usr/avr/include/avr/power.h ****   <tr>
 471:/usr/avr/include/avr/power.h ****    <td>power_ram1_disable()</td>
 472:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 1 module </td>
 473:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 474:/usr/avr/include/avr/power.h ****   </tr>
 475:/usr/avr/include/avr/power.h **** 
 476:/usr/avr/include/avr/power.h ****   <tr>
 477:/usr/avr/include/avr/power.h ****    <td>power_ram1_enable()</td>
 478:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 1 module </td>
 479:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 480:/usr/avr/include/avr/power.h ****   </tr>
 481:/usr/avr/include/avr/power.h **** 
 482:/usr/avr/include/avr/power.h ****   <tr>
 483:/usr/avr/include/avr/power.h ****    <td>power_ram2_disable()</td>
 484:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 2 module </td>
 485:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 486:/usr/avr/include/avr/power.h ****   </tr>
 487:/usr/avr/include/avr/power.h **** 
 488:/usr/avr/include/avr/power.h ****   <tr>
 489:/usr/avr/include/avr/power.h ****    <td>power_ram2_enable()</td>
 490:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 2 module </td>
 491:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 492:/usr/avr/include/avr/power.h ****   </tr>
 493:/usr/avr/include/avr/power.h **** 
 494:/usr/avr/include/avr/power.h ****   <tr>
 495:/usr/avr/include/avr/power.h ****    <td>power_ram3_disable()</td>
 496:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 3 module </td>
 497:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 498:/usr/avr/include/avr/power.h ****   </tr>
 499:/usr/avr/include/avr/power.h **** 
 500:/usr/avr/include/avr/power.h ****   <tr>
 501:/usr/avr/include/avr/power.h ****    <td>power_ram3_enable()</td>
 502:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 3 module </td>
 503:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 504:/usr/avr/include/avr/power.h ****   </tr>
 505:/usr/avr/include/avr/power.h **** 
 506:/usr/avr/include/avr/power.h ****   <tr>
 507:/usr/avr/include/avr/power.h ****    <td>power_rtc_disable()</td>
 508:/usr/avr/include/avr/power.h ****     <td> Disable the RTC module </td>
 509:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 510:/usr/avr/include/avr/power.h ****   </tr>
 511:/usr/avr/include/avr/power.h **** 
 512:/usr/avr/include/avr/power.h ****   <tr>
 513:/usr/avr/include/avr/power.h ****    <td>power_rtc_enable()</td>
 514:/usr/avr/include/avr/power.h ****     <td> Enable the RTC module </td>
 515:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 516:/usr/avr/include/avr/power.h ****   </tr>
 517:/usr/avr/include/avr/power.h **** 
 518:/usr/avr/include/avr/power.h ****   <tr>
 519:/usr/avr/include/avr/power.h ****    <td>power_sci_disable()</td>
 520:/usr/avr/include/avr/power.h ****     <td> Disable the SCI module </td>
 521:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 522:/usr/avr/include/avr/power.h ****   </tr>
 523:/usr/avr/include/avr/power.h **** 
 524:/usr/avr/include/avr/power.h ****   <tr>
 525:/usr/avr/include/avr/power.h ****    <td>power_sci_enable()</td>
 526:/usr/avr/include/avr/power.h ****     <td> Enable the SCI module </td>
 527:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 528:/usr/avr/include/avr/power.h ****   </tr>
 529:/usr/avr/include/avr/power.h **** 
 530:/usr/avr/include/avr/power.h ****   <tr>
 531:/usr/avr/include/avr/power.h ****    <td>power_spi_disable()</td>
 532:/usr/avr/include/avr/power.h ****      <td>Disable the Serial Peripheral Interface module.</td>
 533:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 534:/usr/avr/include/avr/power.h ****   </tr>
 535:/usr/avr/include/avr/power.h **** 
 536:/usr/avr/include/avr/power.h ****   <tr>
 537:/usr/avr/include/avr/power.h ****    <td>power_spi_enable()</td>
 538:/usr/avr/include/avr/power.h ****      <td>Enable the Serial Peripheral Interface module.</td>
 539:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 540:/usr/avr/include/avr/power.h ****   </tr>
 541:/usr/avr/include/avr/power.h **** 
 542:/usr/avr/include/avr/power.h ****   <tr>
 543:/usr/avr/include/avr/power.h ****    <td>power_spic_disable()</td>
 544:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortC </td>
 545:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 546:/usr/avr/include/avr/power.h ****   </tr>
 547:/usr/avr/include/avr/power.h **** 
 548:/usr/avr/include/avr/power.h ****   <tr>
 549:/usr/avr/include/avr/power.h ****    <td>power_spic_enable()</td>
 550:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortC </td>
 551:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 552:/usr/avr/include/avr/power.h ****   </tr>
 553:/usr/avr/include/avr/power.h **** 
 554:/usr/avr/include/avr/power.h ****   <tr>
 555:/usr/avr/include/avr/power.h ****    <td>power_spid_disable()</td>
 556:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortD </td>
 557:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 558:/usr/avr/include/avr/power.h ****   </tr>
 559:/usr/avr/include/avr/power.h **** 
 560:/usr/avr/include/avr/power.h ****   <tr>
 561:/usr/avr/include/avr/power.h ****    <td>power_spid_enable()</td>
 562:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortD </td>
 563:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 564:/usr/avr/include/avr/power.h ****   </tr>
 565:/usr/avr/include/avr/power.h **** 
 566:/usr/avr/include/avr/power.h ****   <tr>
 567:/usr/avr/include/avr/power.h ****    <td>power_spie_disable()</td>
 568:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortE </td>
 569:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 570:/usr/avr/include/avr/power.h ****   </tr>
 571:/usr/avr/include/avr/power.h **** 
 572:/usr/avr/include/avr/power.h ****   <tr>
 573:/usr/avr/include/avr/power.h ****    <td>power_spie_enable()</td>
 574:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortE </td>
 575:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 576:/usr/avr/include/avr/power.h ****   </tr>
 577:/usr/avr/include/avr/power.h **** 
 578:/usr/avr/include/avr/power.h ****   <tr>
 579:/usr/avr/include/avr/power.h ****    <td>power_spif_disable()</td>
 580:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortF </td>
 581:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 582:/usr/avr/include/avr/power.h ****   </tr>
 583:/usr/avr/include/avr/power.h **** 
 584:/usr/avr/include/avr/power.h ****   <tr>
 585:/usr/avr/include/avr/power.h ****    <td>power_spif_enable()</td>
 586:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortF </td>
 587:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 588:/usr/avr/include/avr/power.h ****   </tr>
 589:/usr/avr/include/avr/power.h **** 
 590:/usr/avr/include/avr/power.h ****   <tr>
 591:/usr/avr/include/avr/power.h ****    <td>power_tc0c_disable()</td>
 592:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortC </td>
 593:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 594:/usr/avr/include/avr/power.h ****   </tr>
 595:/usr/avr/include/avr/power.h **** 
 596:/usr/avr/include/avr/power.h ****   <tr>
 597:/usr/avr/include/avr/power.h ****    <td>power_tc0c_enable()</td>
 598:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortC </td>
 599:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 600:/usr/avr/include/avr/power.h ****   </tr>
 601:/usr/avr/include/avr/power.h **** 
 602:/usr/avr/include/avr/power.h ****   <tr>
 603:/usr/avr/include/avr/power.h ****    <td>power_tc0d_disable()</td>
 604:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortD </td>
 605:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 606:/usr/avr/include/avr/power.h ****   </tr>
 607:/usr/avr/include/avr/power.h **** 
 608:/usr/avr/include/avr/power.h ****   <tr>
 609:/usr/avr/include/avr/power.h ****    <td>power_tc0d_enable()</td>
 610:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortD </td>
 611:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 612:/usr/avr/include/avr/power.h ****   </tr>
 613:/usr/avr/include/avr/power.h **** 
 614:/usr/avr/include/avr/power.h ****   <tr>
 615:/usr/avr/include/avr/power.h ****    <td>power_tc0e_disable()</td>
 616:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortE </td>
 617:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 618:/usr/avr/include/avr/power.h ****   </tr>
 619:/usr/avr/include/avr/power.h **** 
 620:/usr/avr/include/avr/power.h ****   <tr>
 621:/usr/avr/include/avr/power.h ****    <td>power_tc0e_enable()</td>
 622:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortE </td>
 623:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 624:/usr/avr/include/avr/power.h ****   </tr>
 625:/usr/avr/include/avr/power.h **** 
 626:/usr/avr/include/avr/power.h ****   <tr>
 627:/usr/avr/include/avr/power.h ****    <td>power_tc0f_disable()</td>
 628:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortF </td>
 629:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 630:/usr/avr/include/avr/power.h ****   </tr>
 631:/usr/avr/include/avr/power.h **** 
 632:/usr/avr/include/avr/power.h ****   <tr>
 633:/usr/avr/include/avr/power.h ****    <td>power_tc0f_enable()</td>
 634:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortF </td>
 635:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 636:/usr/avr/include/avr/power.h ****   </tr>
 637:/usr/avr/include/avr/power.h **** 
 638:/usr/avr/include/avr/power.h ****   <tr>
 639:/usr/avr/include/avr/power.h ****    <td>power_tc1c_disable()</td>
 640:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortC </td>
 641:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 642:/usr/avr/include/avr/power.h ****   </tr>
 643:/usr/avr/include/avr/power.h **** 
 644:/usr/avr/include/avr/power.h ****   <tr>
 645:/usr/avr/include/avr/power.h ****    <td>power_tc1c_enable()</td>
 646:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortC </td>
 647:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 648:/usr/avr/include/avr/power.h ****   </tr>
 649:/usr/avr/include/avr/power.h **** 
 650:/usr/avr/include/avr/power.h ****   <tr>
 651:/usr/avr/include/avr/power.h ****    <td>power_tc1d_disable()</td>
 652:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortD </td>
 653:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 654:/usr/avr/include/avr/power.h ****   </tr>
 655:/usr/avr/include/avr/power.h **** 
 656:/usr/avr/include/avr/power.h ****   <tr>
 657:/usr/avr/include/avr/power.h ****    <td>power_tc1d_enable()</td>
 658:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortD </td>
 659:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 660:/usr/avr/include/avr/power.h ****   </tr>
 661:/usr/avr/include/avr/power.h **** 
 662:/usr/avr/include/avr/power.h ****   <tr>
 663:/usr/avr/include/avr/power.h ****    <td>power_tc1e_disable()</td>
 664:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortE </td>
 665:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 666:/usr/avr/include/avr/power.h ****   </tr>
 667:/usr/avr/include/avr/power.h **** 
 668:/usr/avr/include/avr/power.h ****   <tr>
 669:/usr/avr/include/avr/power.h ****    <td>power_tc1e_enable()</td>
 670:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortE </td>
 671:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 672:/usr/avr/include/avr/power.h ****   </tr>
 673:/usr/avr/include/avr/power.h **** 
 674:/usr/avr/include/avr/power.h ****   <tr>
 675:/usr/avr/include/avr/power.h ****    <td>power_tc1f_disable()</td>
 676:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortF </td>
 677:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 678:/usr/avr/include/avr/power.h ****   </tr>
 679:/usr/avr/include/avr/power.h **** 
 680:/usr/avr/include/avr/power.h ****   <tr>
 681:/usr/avr/include/avr/power.h ****    <td>power_tc1f_enable()</td>
 682:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortF </td>
 683:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 684:/usr/avr/include/avr/power.h ****   </tr>
 685:/usr/avr/include/avr/power.h **** 
 686:/usr/avr/include/avr/power.h ****   <tr>
 687:/usr/avr/include/avr/power.h ****    <td>power_tc4c_disable()</td>
 688:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter4 module on port C </td>
 689:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 690:/usr/avr/include/avr/power.h ****   </tr>
 691:/usr/avr/include/avr/power.h **** 
 692:/usr/avr/include/avr/power.h ****   <tr>
 693:/usr/avr/include/avr/power.h ****    <td>power_tc4c_enable()</td>
 694:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter4 module on port C </td>
 695:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 696:/usr/avr/include/avr/power.h ****   </tr>
 697:/usr/avr/include/avr/power.h **** 
 698:/usr/avr/include/avr/power.h ****   <tr>
 699:/usr/avr/include/avr/power.h ****    <td>power_tc5c_disable()</td>
 700:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter5 module on port C </td>
 701:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 702:/usr/avr/include/avr/power.h ****   </tr>
 703:/usr/avr/include/avr/power.h **** 
 704:/usr/avr/include/avr/power.h ****   <tr>
 705:/usr/avr/include/avr/power.h ****    <td>power_tc5c_enable()</td>
 706:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter5 module on port C </td>
 707:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 708:/usr/avr/include/avr/power.h ****   </tr>
 709:/usr/avr/include/avr/power.h **** 
 710:/usr/avr/include/avr/power.h ****   <tr>
 711:/usr/avr/include/avr/power.h ****    <td>power_tc5d_disable()</td>
 712:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter5 module on port D </td>
 713:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 714:/usr/avr/include/avr/power.h ****   </tr>
 715:/usr/avr/include/avr/power.h **** 
 716:/usr/avr/include/avr/power.h ****   <tr>
 717:/usr/avr/include/avr/power.h ****    <td>power_tc5d_enable()</td>
 718:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter5 module on port D </td>
 719:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 720:/usr/avr/include/avr/power.h ****   </tr>
 721:/usr/avr/include/avr/power.h **** 
 722:/usr/avr/include/avr/power.h ****   <tr>
 723:/usr/avr/include/avr/power.h ****    <td>power_timer0_disable()</td>
 724:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 0 module.</td>
 725:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 726:/usr/avr/include/avr/power.h ****   </tr>
 727:/usr/avr/include/avr/power.h **** 
 728:/usr/avr/include/avr/power.h ****   <tr>
 729:/usr/avr/include/avr/power.h ****    <td>power_timer0_enable()</td>
 730:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 0 module.</td>
 731:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 732:/usr/avr/include/avr/power.h ****   </tr>
 733:/usr/avr/include/avr/power.h **** 
 734:/usr/avr/include/avr/power.h ****   <tr>
 735:/usr/avr/include/avr/power.h ****    <td>power_timer1_disable()</td>
 736:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 1 module.</td>
 737:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 738:/usr/avr/include/avr/power.h ****   </tr>
 739:/usr/avr/include/avr/power.h **** 
 740:/usr/avr/include/avr/power.h ****   <tr>
 741:/usr/avr/include/avr/power.h ****    <td>power_timer1_enable()</td>
 742:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 1 module.</td>
 743:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 744:/usr/avr/include/avr/power.h ****   </tr>
 745:/usr/avr/include/avr/power.h **** 
 746:/usr/avr/include/avr/power.h ****   <tr>
 747:/usr/avr/include/avr/power.h ****    <td>power_timer2_disable()</td>
 748:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 2 module.</td>
 749:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 750:/usr/avr/include/avr/power.h ****   </tr>
 751:/usr/avr/include/avr/power.h **** 
 752:/usr/avr/include/avr/power.h ****   <tr>
 753:/usr/avr/include/avr/power.h ****    <td>power_timer2_enable()</td>
 754:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 2 module.</td>
 755:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 756:/usr/avr/include/avr/power.h ****   </tr>
 757:/usr/avr/include/avr/power.h **** 
 758:/usr/avr/include/avr/power.h ****   <tr>
 759:/usr/avr/include/avr/power.h ****    <td>power_timer3_disable()</td>
 760:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 3 module.</td>
 761:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 762:/usr/avr/include/avr/power.h ****   </tr>
 763:/usr/avr/include/avr/power.h **** 
 764:/usr/avr/include/avr/power.h ****   <tr>
 765:/usr/avr/include/avr/power.h ****    <td>power_timer3_enable()</td>
 766:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 3 module.</td>
 767:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 768:/usr/avr/include/avr/power.h ****   </tr>
 769:/usr/avr/include/avr/power.h **** 
 770:/usr/avr/include/avr/power.h ****   <tr>
 771:/usr/avr/include/avr/power.h ****    <td>power_timer4_disable()</td>
 772:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 4 module.</td>
 773:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 774:/usr/avr/include/avr/power.h ****   </tr>
 775:/usr/avr/include/avr/power.h **** 
 776:/usr/avr/include/avr/power.h ****   <tr>
 777:/usr/avr/include/avr/power.h ****    <td>power_timer4_enable()</td>
 778:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 4 module.</td>
 779:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 780:/usr/avr/include/avr/power.h ****   </tr>
 781:/usr/avr/include/avr/power.h **** 
 782:/usr/avr/include/avr/power.h ****   <tr>
 783:/usr/avr/include/avr/power.h ****    <td>power_timer5_disable()</td>
 784:/usr/avr/include/avr/power.h ****     <td> Disable TIMER5 module </td>
 785:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 786:/usr/avr/include/avr/power.h ****   </tr>
 787:/usr/avr/include/avr/power.h **** 
 788:/usr/avr/include/avr/power.h ****   <tr>
 789:/usr/avr/include/avr/power.h ****    <td>power_timer5_enable()</td>
 790:/usr/avr/include/avr/power.h ****     <td> Enable TIMER5 module </td>
 791:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 792:/usr/avr/include/avr/power.h ****   </tr>
 793:/usr/avr/include/avr/power.h **** 
 794:/usr/avr/include/avr/power.h ****   <tr>
 795:/usr/avr/include/avr/power.h ****    <td>power_timermodulator_disable()</td>
 796:/usr/avr/include/avr/power.h ****     <td> Disable the TIMERMODULATOR module </td>
 797:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 798:/usr/avr/include/avr/power.h ****   </tr>
 799:/usr/avr/include/avr/power.h **** 
 800:/usr/avr/include/avr/power.h ****   <tr>
 801:/usr/avr/include/avr/power.h ****    <td>power_timermodulator_enable()</td>
 802:/usr/avr/include/avr/power.h ****     <td> Enable the TIMERMODULATOR module </td>
 803:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 804:/usr/avr/include/avr/power.h ****   </tr>
 805:/usr/avr/include/avr/power.h **** 
 806:/usr/avr/include/avr/power.h ****   <tr>
 807:/usr/avr/include/avr/power.h ****    <td>power_transceiver_disable()</td>
 808:/usr/avr/include/avr/power.h ****     <td> Disable TRANSCEIVER module </td>
 809:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 810:/usr/avr/include/avr/power.h ****   </tr>
 811:/usr/avr/include/avr/power.h **** 
 812:/usr/avr/include/avr/power.h ****   <tr>
 813:/usr/avr/include/avr/power.h ****    <td>power_transceiver_enable()</td>
 814:/usr/avr/include/avr/power.h ****     <td> Enable TRANSCEIVER module </td>
 815:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2,<
 816:/usr/avr/include/avr/power.h ****   </tr>
 817:/usr/avr/include/avr/power.h **** 
 818:/usr/avr/include/avr/power.h ****   <tr>
 819:/usr/avr/include/avr/power.h ****    <td>power_twi_disable()</td>
 820:/usr/avr/include/avr/power.h ****      <td>Disable the Two Wire Interface module.</td>
 821:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 822:/usr/avr/include/avr/power.h ****   </tr>
 823:/usr/avr/include/avr/power.h **** 
 824:/usr/avr/include/avr/power.h ****   <tr>
 825:/usr/avr/include/avr/power.h ****    <td>power_twi_enable()</td>
 826:/usr/avr/include/avr/power.h ****      <td>Enable the Two Wire Interface module.</td>
 827:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 828:/usr/avr/include/avr/power.h ****   </tr>
 829:/usr/avr/include/avr/power.h **** 
 830:/usr/avr/include/avr/power.h ****   <tr>
 831:/usr/avr/include/avr/power.h ****    <td>power_twic_disable()</td>
 832:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC </td>
 833:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 834:/usr/avr/include/avr/power.h ****   </tr>
 835:/usr/avr/include/avr/power.h **** 
 836:/usr/avr/include/avr/power.h ****   <tr>
 837:/usr/avr/include/avr/power.h ****    <td>power_twic_enable()</td>
 838:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC </td>
 839:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 840:/usr/avr/include/avr/power.h ****   </tr>
 841:/usr/avr/include/avr/power.h **** 
 842:/usr/avr/include/avr/power.h ****   <tr>
 843:/usr/avr/include/avr/power.h ****    <td>power_twid_disable()</td>
 844:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortD </td>
 845:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 846:/usr/avr/include/avr/power.h ****   </tr>
 847:/usr/avr/include/avr/power.h **** 
 848:/usr/avr/include/avr/power.h ****   <tr>
 849:/usr/avr/include/avr/power.h ****    <td>power_twid_enable()</td>
 850:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortD </td>
 851:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 852:/usr/avr/include/avr/power.h ****   </tr>
 853:/usr/avr/include/avr/power.h **** 
 854:/usr/avr/include/avr/power.h ****   <tr>
 855:/usr/avr/include/avr/power.h ****    <td>power_twie_disable()</td>
 856:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE </td>
 857:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 858:/usr/avr/include/avr/power.h ****   </tr>
 859:/usr/avr/include/avr/power.h **** 
 860:/usr/avr/include/avr/power.h ****   <tr>
 861:/usr/avr/include/avr/power.h ****    <td>power_twie_enable()</td>
 862:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE </td>
 863:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 864:/usr/avr/include/avr/power.h ****   </tr>
 865:/usr/avr/include/avr/power.h **** 
 866:/usr/avr/include/avr/power.h ****   <tr>
 867:/usr/avr/include/avr/power.h ****    <td>power_twif_disable()</td>
 868:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortF </td>
 869:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 870:/usr/avr/include/avr/power.h ****   </tr>
 871:/usr/avr/include/avr/power.h **** 
 872:/usr/avr/include/avr/power.h ****   <tr>
 873:/usr/avr/include/avr/power.h ****    <td>power_twif_enable()</td>
 874:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortF </td>
 875:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 876:/usr/avr/include/avr/power.h ****   </tr>
 877:/usr/avr/include/avr/power.h **** 
 878:/usr/avr/include/avr/power.h ****   <tr>
 879:/usr/avr/include/avr/power.h ****    <td>power_usart0_disable()</td>
 880:/usr/avr/include/avr/power.h ****      <td>Disable the USART 0 module.</td>
 881:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 882:/usr/avr/include/avr/power.h ****   </tr>
 883:/usr/avr/include/avr/power.h **** 
 884:/usr/avr/include/avr/power.h ****   <tr>
 885:/usr/avr/include/avr/power.h ****    <td>power_usart0_enable()</td>
 886:/usr/avr/include/avr/power.h ****      <td>Enable the USART 0 module.</td>
 887:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 888:/usr/avr/include/avr/power.h ****   </tr>
 889:/usr/avr/include/avr/power.h **** 
 890:/usr/avr/include/avr/power.h ****   <tr>
 891:/usr/avr/include/avr/power.h ****    <td>power_usart1_disable()</td>
 892:/usr/avr/include/avr/power.h ****      <td>Disable the USART 1 module.</td>
 893:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 894:/usr/avr/include/avr/power.h ****   </tr>
 895:/usr/avr/include/avr/power.h **** 
 896:/usr/avr/include/avr/power.h ****   <tr>
 897:/usr/avr/include/avr/power.h ****    <td>power_usart1_enable()</td>
 898:/usr/avr/include/avr/power.h ****      <td>Enable the USART 1 module.</td>
 899:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 900:/usr/avr/include/avr/power.h ****   </tr>
 901:/usr/avr/include/avr/power.h **** 
 902:/usr/avr/include/avr/power.h ****   <tr>
 903:/usr/avr/include/avr/power.h ****    <td>power_usart2_disable()</td>
 904:/usr/avr/include/avr/power.h ****      <td>Disable the USART 2 module.</td>
 905:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 906:/usr/avr/include/avr/power.h ****   </tr>
 907:/usr/avr/include/avr/power.h **** 
 908:/usr/avr/include/avr/power.h ****   <tr>
 909:/usr/avr/include/avr/power.h ****    <td>power_usart2_enable()</td>
 910:/usr/avr/include/avr/power.h ****      <td>Enable the USART 2 module.</td>
 911:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 912:/usr/avr/include/avr/power.h ****   </tr>
 913:/usr/avr/include/avr/power.h **** 
 914:/usr/avr/include/avr/power.h ****   <tr>
 915:/usr/avr/include/avr/power.h ****    <td>power_usart3_disable()</td>
 916:/usr/avr/include/avr/power.h ****      <td>Disable the USART 3 module.</td>
 917:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 918:/usr/avr/include/avr/power.h ****   </tr>
 919:/usr/avr/include/avr/power.h **** 
 920:/usr/avr/include/avr/power.h ****   <tr>
 921:/usr/avr/include/avr/power.h ****    <td>power_usart3_enable()</td>
 922:/usr/avr/include/avr/power.h ****      <td>Enable the USART 3 module.</td>
 923:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 924:/usr/avr/include/avr/power.h ****   </tr>
 925:/usr/avr/include/avr/power.h **** 
 926:/usr/avr/include/avr/power.h ****   <tr>
 927:/usr/avr/include/avr/power.h ****    <td>power_usart_disable()</td>
 928:/usr/avr/include/avr/power.h ****      <td>Disable the USART module.</td>
 929:/usr/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 930:/usr/avr/include/avr/power.h ****   </tr>
 931:/usr/avr/include/avr/power.h **** 
 932:/usr/avr/include/avr/power.h ****   <tr>
 933:/usr/avr/include/avr/power.h ****    <td>power_usart_enable()</td>
 934:/usr/avr/include/avr/power.h ****      <td>Enable the USART module.</td>
 935:/usr/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 936:/usr/avr/include/avr/power.h ****   </tr>
 937:/usr/avr/include/avr/power.h **** 
 938:/usr/avr/include/avr/power.h ****   <tr>
 939:/usr/avr/include/avr/power.h ****    <td>power_usartc0_disable()</td>
 940:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC </td>
 941:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 942:/usr/avr/include/avr/power.h ****   </tr>
 943:/usr/avr/include/avr/power.h **** 
 944:/usr/avr/include/avr/power.h ****   <tr>
 945:/usr/avr/include/avr/power.h ****    <td>power_usartc0_enable()</td>
 946:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC </td>
 947:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 948:/usr/avr/include/avr/power.h ****   </tr>
 949:/usr/avr/include/avr/power.h **** 
 950:/usr/avr/include/avr/power.h ****   <tr>
 951:/usr/avr/include/avr/power.h ****    <td>power_usartc1_disable()</td>
 952:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortC </td>
 953:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 954:/usr/avr/include/avr/power.h ****   </tr>
 955:/usr/avr/include/avr/power.h **** 
 956:/usr/avr/include/avr/power.h ****   <tr>
 957:/usr/avr/include/avr/power.h ****    <td>power_usartc1_enable()</td>
 958:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortC </td>
 959:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 960:/usr/avr/include/avr/power.h ****   </tr>
 961:/usr/avr/include/avr/power.h **** 
 962:/usr/avr/include/avr/power.h ****   <tr>
 963:/usr/avr/include/avr/power.h ****    <td>power_usartd0_disable()</td>
 964:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD </td>
 965:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 966:/usr/avr/include/avr/power.h ****   </tr>
 967:/usr/avr/include/avr/power.h **** 
 968:/usr/avr/include/avr/power.h ****   <tr>
 969:/usr/avr/include/avr/power.h ****    <td>power_usartd0_enable()</td>
 970:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD </td>
 971:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 972:/usr/avr/include/avr/power.h ****   </tr>
 973:/usr/avr/include/avr/power.h **** 
 974:/usr/avr/include/avr/power.h ****   <tr>
 975:/usr/avr/include/avr/power.h ****    <td>power_usartd1_disable()</td>
 976:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortD </td>
 977:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 978:/usr/avr/include/avr/power.h ****   </tr>
 979:/usr/avr/include/avr/power.h **** 
 980:/usr/avr/include/avr/power.h ****   <tr>
 981:/usr/avr/include/avr/power.h ****    <td>power_usartd1_enable()</td>
 982:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortE </td>
 983:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 984:/usr/avr/include/avr/power.h ****   </tr>
 985:/usr/avr/include/avr/power.h **** 
 986:/usr/avr/include/avr/power.h ****   <tr>
 987:/usr/avr/include/avr/power.h ****    <td>power_usarte0_disable()</td>
 988:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE </td>
 989:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 990:/usr/avr/include/avr/power.h ****   </tr>
 991:/usr/avr/include/avr/power.h **** 
 992:/usr/avr/include/avr/power.h ****   <tr>
 993:/usr/avr/include/avr/power.h ****    <td>power_usarte0_enable()</td>
 994:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE </td>
 995:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 996:/usr/avr/include/avr/power.h ****   </tr>
 997:/usr/avr/include/avr/power.h **** 
 998:/usr/avr/include/avr/power.h ****   <tr>
 999:/usr/avr/include/avr/power.h ****    <td>power_usarte1_disable()</td>
1000:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortE </td>
1001:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1002:/usr/avr/include/avr/power.h ****   </tr>
1003:/usr/avr/include/avr/power.h **** 
1004:/usr/avr/include/avr/power.h ****   <tr>
1005:/usr/avr/include/avr/power.h ****    <td>power_usarte1_enable()</td>
1006:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortE </td>
1007:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1008:/usr/avr/include/avr/power.h ****   </tr>
1009:/usr/avr/include/avr/power.h **** 
1010:/usr/avr/include/avr/power.h ****   <tr>
1011:/usr/avr/include/avr/power.h ****    <td>power_usartf0_disable()</td>
1012:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF </td>
1013:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
1014:/usr/avr/include/avr/power.h ****   </tr>
1015:/usr/avr/include/avr/power.h **** 
1016:/usr/avr/include/avr/power.h ****   <tr>
1017:/usr/avr/include/avr/power.h ****    <td>power_usartf0_enable()</td>
1018:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF </td>
1019:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
1020:/usr/avr/include/avr/power.h ****   </tr>
1021:/usr/avr/include/avr/power.h **** 
1022:/usr/avr/include/avr/power.h ****   <tr>
1023:/usr/avr/include/avr/power.h ****    <td>power_usartf1_disable()</td>
1024:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortF </td>
1025:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1026:/usr/avr/include/avr/power.h ****   </tr>
1027:/usr/avr/include/avr/power.h **** 
1028:/usr/avr/include/avr/power.h ****   <tr>
1029:/usr/avr/include/avr/power.h ****    <td>power_usartf1_enable()</td>
1030:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortF </td>
1031:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1032:/usr/avr/include/avr/power.h ****   </tr>
1033:/usr/avr/include/avr/power.h **** 
1034:/usr/avr/include/avr/power.h ****   <tr>
1035:/usr/avr/include/avr/power.h ****    <td>power_usb_disable()</td>
1036:/usr/avr/include/avr/power.h ****      <td>Disable the USB module.</td>
1037:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
1038:/usr/avr/include/avr/power.h ****   </tr>
1039:/usr/avr/include/avr/power.h **** 
1040:/usr/avr/include/avr/power.h ****   <tr>
1041:/usr/avr/include/avr/power.h ****    <td>power_usb_enable()</td>
1042:/usr/avr/include/avr/power.h ****      <td>Enable the USB module.</td>
1043:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
1044:/usr/avr/include/avr/power.h ****   </tr>
1045:/usr/avr/include/avr/power.h **** 
1046:/usr/avr/include/avr/power.h ****   <tr>
1047:/usr/avr/include/avr/power.h ****    <td>power_usbh_disable()</td>
1048:/usr/avr/include/avr/power.h ****     <td> Disable the USBH module </td>
1049:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
1050:/usr/avr/include/avr/power.h ****   </tr>
1051:/usr/avr/include/avr/power.h **** 
1052:/usr/avr/include/avr/power.h ****   <tr>
1053:/usr/avr/include/avr/power.h ****    <td>power_usbh_enable()</td>
1054:/usr/avr/include/avr/power.h ****     <td> Enable the USBH module </td>
1055:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
1056:/usr/avr/include/avr/power.h ****   </tr>
1057:/usr/avr/include/avr/power.h **** 
1058:/usr/avr/include/avr/power.h ****   <tr>
1059:/usr/avr/include/avr/power.h ****    <td>power_usi_disable()</td>
1060:/usr/avr/include/avr/power.h ****      <td>Disable the Universal Serial Interface module.</td>
1061:/usr/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny24A, ATtiny44, ATtiny44A, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85
1062:/usr/avr/include/avr/power.h ****   </tr>
1063:/usr/avr/include/avr/power.h **** 
1064:/usr/avr/include/avr/power.h ****   <tr>
1065:/usr/avr/include/avr/power.h ****    <td>power_usi_enable()</td>
1066:/usr/avr/include/avr/power.h ****      <td>Enable the Universal Serial Interface module.</td>
1067:/usr/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny24A, ATtiny44, ATtiny44A, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85
1068:/usr/avr/include/avr/power.h ****   </tr>
1069:/usr/avr/include/avr/power.h **** 
1070:/usr/avr/include/avr/power.h ****   <tr>
1071:/usr/avr/include/avr/power.h ****    <td>power_vadc_disable()</td>
1072:/usr/avr/include/avr/power.h ****      <td>Disable the Voltage ADC module.</td>
1073:/usr/avr/include/avr/power.h ****     <td>ATmega406, ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1074:/usr/avr/include/avr/power.h ****   </tr>
1075:/usr/avr/include/avr/power.h **** 
1076:/usr/avr/include/avr/power.h ****   <tr>
1077:/usr/avr/include/avr/power.h ****    <td>power_vadc_enable()</td>
1078:/usr/avr/include/avr/power.h ****      <td>Enable the Voltage ADC module.</td>
1079:/usr/avr/include/avr/power.h ****     <td>ATmega406, ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1080:/usr/avr/include/avr/power.h ****   </tr>
1081:/usr/avr/include/avr/power.h **** 
1082:/usr/avr/include/avr/power.h ****   <tr>
1083:/usr/avr/include/avr/power.h ****    <td>power_vmonitor_disable()</td>
1084:/usr/avr/include/avr/power.h ****     <td> Disable the VMONITOR module </td>
1085:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
1086:/usr/avr/include/avr/power.h ****   </tr>
1087:/usr/avr/include/avr/power.h **** 
1088:/usr/avr/include/avr/power.h ****   <tr>
1089:/usr/avr/include/avr/power.h ****    <td>power_vmonitor_enable()</td>
1090:/usr/avr/include/avr/power.h ****     <td> Enable the VMONITOR module </td>
1091:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
1092:/usr/avr/include/avr/power.h ****   </tr>
1093:/usr/avr/include/avr/power.h **** 
1094:/usr/avr/include/avr/power.h ****   <tr>
1095:/usr/avr/include/avr/power.h ****    <td>power_vrm_disable()</td>
1096:/usr/avr/include/avr/power.h ****     <td> Disable the VRM module </td>
1097:/usr/avr/include/avr/power.h ****     <td>ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1098:/usr/avr/include/avr/power.h ****   </tr>
1099:/usr/avr/include/avr/power.h **** 
1100:/usr/avr/include/avr/power.h ****   <tr>
1101:/usr/avr/include/avr/power.h ****    <td>power_vrm_enable()</td>
1102:/usr/avr/include/avr/power.h ****     <td> Enable the VRM module </td>
1103:/usr/avr/include/avr/power.h ****     <td>ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1104:/usr/avr/include/avr/power.h ****   </tr>
1105:/usr/avr/include/avr/power.h **** 
1106:/usr/avr/include/avr/power.h ****   <tr>
1107:/usr/avr/include/avr/power.h ****    <td>power_xcl_disable()</td>
1108:/usr/avr/include/avr/power.h ****     <td> Disable XCL module </td>
1109:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
1110:/usr/avr/include/avr/power.h ****   </tr>
1111:/usr/avr/include/avr/power.h **** 
1112:/usr/avr/include/avr/power.h ****   <tr>
1113:/usr/avr/include/avr/power.h ****    <td>power_xcl_enable()</td>
1114:/usr/avr/include/avr/power.h ****     <td> Enable XCL module </td>
1115:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
1116:/usr/avr/include/avr/power.h ****   </tr>
1117:/usr/avr/include/avr/power.h **** 
1118:/usr/avr/include/avr/power.h ****   <tr>
1119:/usr/avr/include/avr/power.h ****     <td>power_clock_output_enable()</td>
1120:/usr/avr/include/avr/power.h ****     <td>Enable clock output module</td>
1121:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1122:/usr/avr/include/avr/power.h ****   </tr>
1123:/usr/avr/include/avr/power.h **** 
1124:/usr/avr/include/avr/power.h ****   <tr>
1125:/usr/avr/include/avr/power.h ****     <td>power_clock_output_disable()</td>
1126:/usr/avr/include/avr/power.h ****     <td>Enable clock output module</td>
1127:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1128:/usr/avr/include/avr/power.h ****   </tr>
1129:/usr/avr/include/avr/power.h **** 
1130:/usr/avr/include/avr/power.h ****   <tr>
1131:/usr/avr/include/avr/power.h ****     <td>power_voltage_monitor_enable()</td>
1132:/usr/avr/include/avr/power.h ****     <td>Enable voltage monitor module</td>
1133:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1134:/usr/avr/include/avr/power.h ****   </tr>
1135:/usr/avr/include/avr/power.h **** 
1136:/usr/avr/include/avr/power.h ****   <tr>
1137:/usr/avr/include/avr/power.h ****     <td>power_voltage_monitor_disable()</td>
1138:/usr/avr/include/avr/power.h ****     <td>Disable voltage monitor module</td>
1139:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1140:/usr/avr/include/avr/power.h ****   </tr>
1141:/usr/avr/include/avr/power.h **** 
1142:/usr/avr/include/avr/power.h ****   <tr>
1143:/usr/avr/include/avr/power.h ****     <td>power_crc_enable()</td>
1144:/usr/avr/include/avr/power.h ****     <td>Enable CRC module</td>
1145:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1146:/usr/avr/include/avr/power.h ****   </tr>
1147:/usr/avr/include/avr/power.h **** 
1148:/usr/avr/include/avr/power.h ****   <tr>
1149:/usr/avr/include/avr/power.h ****     <td>power_crc_disable()</td>
1150:/usr/avr/include/avr/power.h ****     <td>Disable CRC module</td>
1151:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1152:/usr/avr/include/avr/power.h ****   </tr>
1153:/usr/avr/include/avr/power.h **** 
1154:/usr/avr/include/avr/power.h ****   <tr>
1155:/usr/avr/include/avr/power.h ****     <td>power_transmit_dsp_control_enable()</td>
1156:/usr/avr/include/avr/power.h ****     <td>Enable Transmit DSP control module</td>
1157:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1158:/usr/avr/include/avr/power.h ****   </tr>
1159:/usr/avr/include/avr/power.h **** 
1160:/usr/avr/include/avr/power.h ****   <tr>
1161:/usr/avr/include/avr/power.h ****     <td>power_transmit_dsp_control_disable()</td>
1162:/usr/avr/include/avr/power.h ****     <td>Disable Transmit DSP control module</td>
1163:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1164:/usr/avr/include/avr/power.h ****   </tr>
1165:/usr/avr/include/avr/power.h **** 
1166:/usr/avr/include/avr/power.h ****   <tr>
1167:/usr/avr/include/avr/power.h ****     <td>power_receive_dsp_control_enable()</td>
1168:/usr/avr/include/avr/power.h ****     <td>Enable Receive DSP control module</td>
1169:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1170:/usr/avr/include/avr/power.h ****   </tr>
1171:/usr/avr/include/avr/power.h **** 
1172:/usr/avr/include/avr/power.h ****   <tr>
1173:/usr/avr/include/avr/power.h ****     <td>power_receive_dsp_control_disable()</td>
1174:/usr/avr/include/avr/power.h ****     <td>Disable Receive DSP control module</td>
1175:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1176:/usr/avr/include/avr/power.h ****   </tr>
1177:/usr/avr/include/avr/power.h **** 
1178:/usr/avr/include/avr/power.h ****   <tr>
1179:/usr/avr/include/avr/power.h ****     <td>power_sequencer_state_machine_enable()</td>
1180:/usr/avr/include/avr/power.h ****     <td>Enable power sequencer state machine</td>
1181:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1182:/usr/avr/include/avr/power.h ****   </tr>
1183:/usr/avr/include/avr/power.h **** 
1184:/usr/avr/include/avr/power.h ****   <tr>
1185:/usr/avr/include/avr/power.h ****     <td>power_sequencer_state_machine_disable()</td>
1186:/usr/avr/include/avr/power.h ****     <td>Disable power sequencer state machine</td>
1187:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1188:/usr/avr/include/avr/power.h ****   </tr>
1189:/usr/avr/include/avr/power.h **** 
1190:/usr/avr/include/avr/power.h ****   <tr>
1191:/usr/avr/include/avr/power.h ****     <td>power_tx_modulator_enable()</td>
1192:/usr/avr/include/avr/power.h ****     <td>Enable Tx modulator</td>
1193:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1194:/usr/avr/include/avr/power.h ****   </tr>
1195:/usr/avr/include/avr/power.h **** 
1196:/usr/avr/include/avr/power.h ****   <tr>
1197:/usr/avr/include/avr/power.h ****     <td>power_tx_modulator_disable()</td>
1198:/usr/avr/include/avr/power.h ****     <td>Disable Tx modulator</td>
1199:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1200:/usr/avr/include/avr/power.h ****   </tr>
1201:/usr/avr/include/avr/power.h **** 
1202:/usr/avr/include/avr/power.h ****   <tr>
1203:/usr/avr/include/avr/power.h ****     <td>power_rssi_buffer_enable()</td>
1204:/usr/avr/include/avr/power.h ****     <td>Enable RSSI buffer</td>
1205:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1206:/usr/avr/include/avr/power.h ****   </tr>
1207:/usr/avr/include/avr/power.h **** 
1208:/usr/avr/include/avr/power.h ****   <tr>
1209:/usr/avr/include/avr/power.h ****     <td>power_rssi_buffer_disable()</td>
1210:/usr/avr/include/avr/power.h ****     <td>Disable RSSI buffer</td>
1211:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1212:/usr/avr/include/avr/power.h ****   </tr>
1213:/usr/avr/include/avr/power.h **** 
1214:/usr/avr/include/avr/power.h ****   <tr>
1215:/usr/avr/include/avr/power.h ****     <td>power_id_scan_enable()</td>
1216:/usr/avr/include/avr/power.h ****     <td>Enable ID Scan</td>
1217:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1218:/usr/avr/include/avr/power.h ****   </tr>
1219:/usr/avr/include/avr/power.h **** 
1220:/usr/avr/include/avr/power.h ****   <tr>
1221:/usr/avr/include/avr/power.h ****     <td>power_id_scan_disable()</td>
1222:/usr/avr/include/avr/power.h ****     <td>Disable ID Scan</td>
1223:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1224:/usr/avr/include/avr/power.h ****   </tr>
1225:/usr/avr/include/avr/power.h **** 
1226:/usr/avr/include/avr/power.h ****   <tr>
1227:/usr/avr/include/avr/power.h ****     <td>power_data_fifo_enable()</td>
1228:/usr/avr/include/avr/power.h ****     <td>Enable data FIFO</td>
1229:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1230:/usr/avr/include/avr/power.h ****   </tr>
1231:/usr/avr/include/avr/power.h **** 
1232:/usr/avr/include/avr/power.h ****   <tr>
1233:/usr/avr/include/avr/power.h ****     <td>power_data_fifo_disable()</td>
1234:/usr/avr/include/avr/power.h ****     <td>Disable data FIFO</td>
1235:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1236:/usr/avr/include/avr/power.h ****   </tr>
1237:/usr/avr/include/avr/power.h **** 
1238:/usr/avr/include/avr/power.h ****   <tr>
1239:/usr/avr/include/avr/power.h ****     <td>power_preamble_rssi_fifo_enable()</td>
1240:/usr/avr/include/avr/power.h ****     <td>Enable preamble/RSSI FIFO</td>
1241:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1242:/usr/avr/include/avr/power.h ****   </tr>
1243:/usr/avr/include/avr/power.h **** 
1244:/usr/avr/include/avr/power.h ****   <tr>
1245:/usr/avr/include/avr/power.h ****     <td>power_preamble_rssi_fifo_disable()</td>
1246:/usr/avr/include/avr/power.h ****     <td>Disable preamble/RSSI FIFO</td>
1247:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1248:/usr/avr/include/avr/power.h ****   </tr>
1249:/usr/avr/include/avr/power.h **** 
1250:/usr/avr/include/avr/power.h ****   <tr>
1251:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_A_enable()</td>
1252:/usr/avr/include/avr/power.h ****     <td>Enable receive buffer for data path A</td>
1253:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1254:/usr/avr/include/avr/power.h ****   </tr>
1255:/usr/avr/include/avr/power.h **** 
1256:/usr/avr/include/avr/power.h ****   <tr>
1257:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_A_disable()</td>
1258:/usr/avr/include/avr/power.h ****     <td>Disable receive buffer for data path A</td>
1259:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1260:/usr/avr/include/avr/power.h ****   </tr>
1261:/usr/avr/include/avr/power.h **** 
1262:/usr/avr/include/avr/power.h ****   <tr>
1263:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_B_enable()</td>
1264:/usr/avr/include/avr/power.h ****     <td>Enable receive buffer for data path B</td>
1265:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1266:/usr/avr/include/avr/power.h ****   </tr>
1267:/usr/avr/include/avr/power.h **** 
1268:/usr/avr/include/avr/power.h ****   <tr>
1269:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_B_disable()</td>
1270:/usr/avr/include/avr/power.h ****     <td>Disable receive buffer for data path B</td>
1271:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1272:/usr/avr/include/avr/power.h ****   </tr>
1273:/usr/avr/include/avr/power.h **** 
1274:/usr/avr/include/avr/power.h **** </table>
1275:/usr/avr/include/avr/power.h **** </center>
1276:/usr/avr/include/avr/power.h **** </small>
1277:/usr/avr/include/avr/power.h **** 
1278:/usr/avr/include/avr/power.h **** @} */
1279:/usr/avr/include/avr/power.h **** 
1280:/usr/avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
1281:/usr/avr/include/avr/power.h **** // Include any other device on need basis
1282:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
1283:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1284:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1285:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
1286:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
1287:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
1288:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
1289:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1290:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1291:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
1292:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
1293:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
1294:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1295:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1296:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
1297:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1298:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
1299:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) \
1300:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__) \
1301:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1302:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega384C3__)
1303:/usr/avr/include/avr/power.h **** 
1304:/usr/avr/include/avr/power.h **** 
1305:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1306:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1307:/usr/avr/include/avr/power.h **** 
1308:/usr/avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
1309:/usr/avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
1310:/usr/avr/include/avr/power.h **** 
1311:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1312:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1313:/usr/avr/include/avr/power.h **** 
1314:/usr/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
1315:/usr/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
1316:/usr/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
1317:/usr/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
1318:/usr/avr/include/avr/power.h **** 
1319:/usr/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1320:/usr/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1321:/usr/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1322:/usr/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1323:/usr/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1324:/usr/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1325:/usr/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1326:/usr/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1327:/usr/avr/include/avr/power.h **** 
1328:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega384C3__) \
1329:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1330:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1331:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1332:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1333:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1334:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1335:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1336:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1337:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) 
1338:/usr/avr/include/avr/power.h **** 
1339:/usr/avr/include/avr/power.h **** #define power_usb_enable()   (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1340:/usr/avr/include/avr/power.h **** #define power_usb_disable()  (PR_PRGEN &= (uint8_t)(PR_USB_bm))
1341:/usr/avr/include/avr/power.h **** 
1342:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1343:/usr/avr/include/avr/power.h **** do { \
1344:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm|PR_USB_bm); \
1345:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1346:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1347:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1348:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1349:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1350:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1351:/usr/avr/include/avr/power.h **** } while(0)
1352:/usr/avr/include/avr/power.h **** 
1353:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1354:/usr/avr/include/avr/power.h **** do { \
1355:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm|PR_USB_bm); \
1356:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1357:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1358:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1359:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1360:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1361:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1362:/usr/avr/include/avr/power.h **** } while(0)
1363:/usr/avr/include/avr/power.h **** 
1364:/usr/avr/include/avr/power.h **** #else
1365:/usr/avr/include/avr/power.h **** 
1366:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1367:/usr/avr/include/avr/power.h **** do { \
1368:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1369:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1370:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1371:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1372:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1373:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1374:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1375:/usr/avr/include/avr/power.h **** } while(0)
1376:/usr/avr/include/avr/power.h **** 
1377:/usr/avr/include/avr/power.h **** 
1378:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1379:/usr/avr/include/avr/power.h **** do { \
1380:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1381:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1382:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1383:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1384:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1385:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1386:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1387:/usr/avr/include/avr/power.h **** } while(0)
1388:/usr/avr/include/avr/power.h **** #endif
1389:/usr/avr/include/avr/power.h **** 
1390:/usr/avr/include/avr/power.h **** #endif
1391:/usr/avr/include/avr/power.h **** 
1392:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16C4__) \
1393:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32C4__) \
1394:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64C3__) \
1395:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128C3__) \
1396:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192C3__) \
1397:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256C3__) 
1398:/usr/avr/include/avr/power.h **** 
1399:/usr/avr/include/avr/power.h **** #define power_usb_enable()   (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1400:/usr/avr/include/avr/power.h **** #define power_usb_disable()  (PR_PRGEN &= (uint8_t)(PR_USB_bm))
1401:/usr/avr/include/avr/power.h **** 
1402:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1403:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1404:/usr/avr/include/avr/power.h **** 
1405:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1406:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1407:/usr/avr/include/avr/power.h **** 
1408:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1409:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1410:/usr/avr/include/avr/power.h **** 
1411:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1412:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1413:/usr/avr/include/avr/power.h **** 
1414:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1415:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1416:/usr/avr/include/avr/power.h **** 
1417:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1418:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1419:/usr/avr/include/avr/power.h **** 
1420:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1421:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1422:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1423:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1424:/usr/avr/include/avr/power.h **** 
1425:/usr/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1426:/usr/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1427:/usr/avr/include/avr/power.h **** 
1428:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1429:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1430:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1431:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1432:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1433:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1434:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1435:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1436:/usr/avr/include/avr/power.h **** 
1437:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1438:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1439:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1440:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1441:/usr/avr/include/avr/power.h **** 
1442:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1443:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1444:/usr/avr/include/avr/power.h **** 
1445:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1446:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1447:/usr/avr/include/avr/power.h **** 
1448:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1449:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1450:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1451:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1452:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1453:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1454:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1455:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1456:/usr/avr/include/avr/power.h **** 
1457:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1458:/usr/avr/include/avr/power.h **** do { \
1459:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_USB_bm|PR_AES_bm|PR_DMA_bm|PR_RTC_bm|PR_EVSYS_bm); \
1460:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1461:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_USART1_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1462:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1463:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1464:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1465:/usr/avr/include/avr/power.h ****     } while(0)
1466:/usr/avr/include/avr/power.h **** 
1467:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1468:/usr/avr/include/avr/power.h **** do { \
1469:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_USB_bm|PR_AES_bm|PR_DMA_bm|PR_RTC_bm|PR_EVSYS_bm); \
1470:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1471:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_USART1_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1472:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1473:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1474:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1475:/usr/avr/include/avr/power.h ****     } while(0)
1476:/usr/avr/include/avr/power.h **** 
1477:/usr/avr/include/avr/power.h **** #endif
1478:/usr/avr/include/avr/power.h **** 
1479:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
1480:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1481:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
1482:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
1483:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1484:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
1485:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
1486:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
1487:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
1488:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1489:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1490:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
1491:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
1492:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
1493:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
1494:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1495:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1496:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
1497:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
1498:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1499:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
1500:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
1501:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) \
1502:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__) \
1503:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1504:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega384C3__)
1505:/usr/avr/include/avr/power.h **** 
1506:/usr/avr/include/avr/power.h **** 
1507:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1508:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1509:/usr/avr/include/avr/power.h **** 
1510:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1511:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1512:/usr/avr/include/avr/power.h **** 
1513:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1514:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1515:/usr/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
1516:/usr/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
1517:/usr/avr/include/avr/power.h **** 
1518:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1519:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1520:/usr/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
1521:/usr/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
1522:/usr/avr/include/avr/power.h **** 
1523:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1524:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1525:/usr/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1526:/usr/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1527:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1528:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1529:/usr/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1530:/usr/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1531:/usr/avr/include/avr/power.h **** 
1532:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1533:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1534:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1535:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1536:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1537:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1538:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1539:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1540:/usr/avr/include/avr/power.h **** 
1541:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1542:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1543:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1544:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1545:/usr/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1546:/usr/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1547:/usr/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1548:/usr/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1549:/usr/avr/include/avr/power.h **** 
1550:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1551:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1552:/usr/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1553:/usr/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1554:/usr/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1555:/usr/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1556:/usr/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1557:/usr/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1558:/usr/avr/include/avr/power.h **** 
1559:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1560:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1561:/usr/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1562:/usr/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1563:/usr/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1564:/usr/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1565:/usr/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1566:/usr/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1567:/usr/avr/include/avr/power.h **** 
1568:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1569:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1570:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1571:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1572:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1573:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1574:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1575:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1576:/usr/avr/include/avr/power.h **** 
1577:/usr/avr/include/avr/power.h **** #endif
1578:/usr/avr/include/avr/power.h **** 
1579:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega64D4__) \
1580:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D4__) 
1581:/usr/avr/include/avr/power.h **** 
1582:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1583:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1584:/usr/avr/include/avr/power.h **** 
1585:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1586:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1587:/usr/avr/include/avr/power.h **** 
1588:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1589:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1590:/usr/avr/include/avr/power.h **** 
1591:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1592:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1593:/usr/avr/include/avr/power.h **** 
1594:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1595:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1596:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1597:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1598:/usr/avr/include/avr/power.h **** 
1599:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1600:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1601:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1602:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1603:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1604:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1605:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1606:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1607:/usr/avr/include/avr/power.h **** 
1608:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1609:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1610:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1611:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1612:/usr/avr/include/avr/power.h **** 
1613:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1614:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1615:/usr/avr/include/avr/power.h **** 
1616:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1617:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1618:/usr/avr/include/avr/power.h **** 
1619:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1620:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1621:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1622:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1623:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1624:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1625:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1626:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1627:/usr/avr/include/avr/power.h **** 
1628:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1629:/usr/avr/include/avr/power.h **** do { \
1630:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
1631:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1632:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1633:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1634:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1635:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1636:/usr/avr/include/avr/power.h ****     } while(0)
1637:/usr/avr/include/avr/power.h **** 
1638:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1639:/usr/avr/include/avr/power.h **** do { \
1640:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_RTC_bm|PR_EVSYS_bm); \
1641:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1642:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1643:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1644:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1645:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1646:/usr/avr/include/avr/power.h ****     } while(0)
1647:/usr/avr/include/avr/power.h **** 
1648:/usr/avr/include/avr/power.h **** #endif
1649:/usr/avr/include/avr/power.h **** 
1650:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
1651:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
1652:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
1653:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
1654:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
1655:/usr/avr/include/avr/power.h **** 
1656:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1657:/usr/avr/include/avr/power.h **** do { \
1658:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
1659:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1660:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1661:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1662:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1663:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1664:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1665:/usr/avr/include/avr/power.h **** } while(0)
1666:/usr/avr/include/avr/power.h **** 
1667:/usr/avr/include/avr/power.h **** 
1668:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1669:/usr/avr/include/avr/power.h **** do { \
1670:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1671:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1672:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1673:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1674:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1675:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1676:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1677:/usr/avr/include/avr/power.h **** } while(0)
1678:/usr/avr/include/avr/power.h **** 
1679:/usr/avr/include/avr/power.h **** 
1680:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATxmega32E5__) \
1681:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16E5__) \
1682:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega8E5__) 
1683:/usr/avr/include/avr/power.h **** 
1684:/usr/avr/include/avr/power.h **** #define power_xcl_enable()      (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
1685:/usr/avr/include/avr/power.h **** #define power_xcl_disable()     (PR_PRGEN |= (uint8_t)PR_XCL_bm)
1686:/usr/avr/include/avr/power.h **** 
1687:/usr/avr/include/avr/power.h **** #define power_rtc_enable()      (PR_PRGEN &= (uint8_t)~(PR_RTC_bm)) 
1688:/usr/avr/include/avr/power.h **** #define power_rtc_disable()     (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1689:/usr/avr/include/avr/power.h **** 
1690:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm)) 
1691:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1692:/usr/avr/include/avr/power.h **** 
1693:/usr/avr/include/avr/power.h **** #define power_edma_enable()     (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
1694:/usr/avr/include/avr/power.h **** #define power_edma_disable()    (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
1695:/usr/avr/include/avr/power.h **** 
1696:/usr/avr/include/avr/power.h **** #define power_daca_enable()      (PR_PRPA  &= (uint8_t)~(PR_DAC_bm))
1697:/usr/avr/include/avr/power.h **** #define power_daca_disable()     (PR_PRPA  |= (uint8_t)PR_DAC_bm)
1698:/usr/avr/include/avr/power.h **** 
1699:/usr/avr/include/avr/power.h **** #define power_adca_enable()      (PR_PRPA  &= (uint8_t)~(PR_ADC_bm))
1700:/usr/avr/include/avr/power.h **** #define power_adca_disable()     (PR_PRPA  |= (uint8_t)PR_ADC_bm)
1701:/usr/avr/include/avr/power.h **** 
1702:/usr/avr/include/avr/power.h **** #define power_aca_enable()       (PR_PRPA  &= (uint8_t)~(PR_AC_bm))
1703:/usr/avr/include/avr/power.h **** #define power_aca_disable()      (PR_PRPA  |= (uint8_t)PR_AC_bm)
1704:/usr/avr/include/avr/power.h **** 
1705:/usr/avr/include/avr/power.h **** #define power_twic_enable()      (PR_PRPC  &= (uint8_t)~(PR_TWI_bm))
1706:/usr/avr/include/avr/power.h **** #define power_twic_disable()     (PR_PRPC  |= (uint8_t)PR_TWI_bm)
1707:/usr/avr/include/avr/power.h **** 
1708:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()   (PR_PRPC  &= (uint8_t)~(PR_USART0_bm))
1709:/usr/avr/include/avr/power.h **** #define power_usartc0_disable()  (PR_PRPC  |= (uint8_t)PR_USART0_bm)
1710:/usr/avr/include/avr/power.h **** 
1711:/usr/avr/include/avr/power.h **** #define power_spic_enable()      (PR_PRPC  &= (uint8_t)~(PR_SPI_bm))
1712:/usr/avr/include/avr/power.h **** #define power_spic_disable()     (PR_PRPC  |= (uint8_t)PR_SPI_bm)
1713:/usr/avr/include/avr/power.h **** 
1714:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()    (PR_PRPC  &= (uint8_t)~(PR_HIRES_bm))
1715:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()   (PR_PRPC  |= (uint8_t)PR_HIRES_bm)
1716:/usr/avr/include/avr/power.h **** 
1717:/usr/avr/include/avr/power.h **** #define power_tc5c_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1718:/usr/avr/include/avr/power.h **** #define power_tc5c_disable()     (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1719:/usr/avr/include/avr/power.h **** 
1720:/usr/avr/include/avr/power.h **** #define power_tc4c_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1721:/usr/avr/include/avr/power.h **** #define power_tc4c_disable()     (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1722:/usr/avr/include/avr/power.h **** 
1723:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()   (PR_PRPD  &= (uint8_t)~(PR_USART0_bm))  
1724:/usr/avr/include/avr/power.h **** #define power_usartd0_disable()  (PR_PRPD  |= (uint8_t)PR_USART0_bm)
1725:/usr/avr/include/avr/power.h **** 
1726:/usr/avr/include/avr/power.h **** #define power_tc5d_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC5_bm)) 
1727:/usr/avr/include/avr/power.h **** #define power_tc5d_disable()     (PR_PRPC  |= (uint8_t)PR_TC5_bm) 
1728:/usr/avr/include/avr/power.h **** 
1729:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1730:/usr/avr/include/avr/power.h **** do { \
1731:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm|PR_XCL_bm|PR_EDMA_bm); \
1732:/usr/avr/include/avr/power.h ****     PR_PRPA  &= (uint8_t)~(PR_ADC_bm|PR_AC_bm|PR_DAC_bm); \
1733:/usr/avr/include/avr/power.h ****     PR_PRPC  &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC5_bm|PR_TC4_bm); \
1734:/usr/avr/include/avr/power.h ****     PR_PRPD  &= (uint8_t)~(PR_USART0_bm|PR_TC5_bm); \
1735:/usr/avr/include/avr/power.h **** } while(0)
1736:/usr/avr/include/avr/power.h **** 
1737:/usr/avr/include/avr/power.h **** 
1738:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1739:/usr/avr/include/avr/power.h **** do { \
1740:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_XCL_bm|PR_RTC_bm|PR_EVSYS_bm|PR_EDMA_bm); \
1741:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm|PR_DAC_bm); \
1742:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC5_bm|PR_TC4_bm); \
1743:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_TC5_bm); \
1744:/usr/avr/include/avr/power.h **** } while(0)
1745:/usr/avr/include/avr/power.h **** 
1746:/usr/avr/include/avr/power.h **** 
1747:/usr/avr/include/avr/power.h **** #elif defined (__AVR_ATxmega64B1__) \
1748:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega64B3__) \
1749:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega128B1__) \
1750:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega128B3__) 
1751:/usr/avr/include/avr/power.h **** #define power_lcd_enable()  (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
1752:/usr/avr/include/avr/power.h **** #define power_lcd_disable() (PR_PRGEN |= (uint8_t)PR_LCD_bm)
1753:/usr/avr/include/avr/power.h **** 
1754:/usr/avr/include/avr/power.h **** #define power_usb_enable()  (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1755:/usr/avr/include/avr/power.h **** #define power_usb_disable() (PR_PRGEN |= (uint8_t)PR_USB_bm)
1756:/usr/avr/include/avr/power.h **** 
1757:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1758:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1759:/usr/avr/include/avr/power.h **** 
1760:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1761:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1762:/usr/avr/include/avr/power.h **** 
1763:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1764:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1765:/usr/avr/include/avr/power.h **** 
1766:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1767:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1768:/usr/avr/include/avr/power.h **** 
1769:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1770:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1771:/usr/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
1772:/usr/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
1773:/usr/avr/include/avr/power.h **** 
1774:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1775:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1776:/usr/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
1777:/usr/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
1778:/usr/avr/include/avr/power.h **** 
1779:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1780:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1781:/usr/avr/include/avr/power.h **** 
1782:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1783:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1784:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1785:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1786:/usr/avr/include/avr/power.h **** 
1787:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1788:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1789:/usr/avr/include/avr/power.h **** 
1790:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()     (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1791:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()    (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1792:/usr/avr/include/avr/power.h **** 
1793:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1794:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1795:/usr/avr/include/avr/power.h **** 
1796:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()  (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1797:/usr/avr/include/avr/power.h **** #define power_tc0c_disable() (PR_PRPC |= (uint8_t)PR_TC0_bm)
1798:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()  (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1799:/usr/avr/include/avr/power.h **** #define power_tc0e_disable() (PR_PRPE |= (uint8_t)PR_TC0_bm)
1800:/usr/avr/include/avr/power.h **** 
1801:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1802:/usr/avr/include/avr/power.h **** do { \
1803:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_LCD_bm|PR_USB_bm|PR_AES_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1804:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1805:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1806:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1807:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1808:/usr/avr/include/avr/power.h ****     } while(0)
1809:/usr/avr/include/avr/power.h **** 
1810:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1811:/usr/avr/include/avr/power.h **** do { \
1812:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_LCD_bm|PR_USB_bm|PR_AES_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1813:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1814:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1815:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1816:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1817:/usr/avr/include/avr/power.h ****     } while(0)
1818:/usr/avr/include/avr/power.h **** 
1819:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
1820:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1821:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1822:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1823:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
1824:/usr/avr/include/avr/power.h **** 
1825:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1826:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1827:/usr/avr/include/avr/power.h **** 
1828:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1829:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1830:/usr/avr/include/avr/power.h **** 
1831:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1832:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1833:/usr/avr/include/avr/power.h **** 
1834:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1835:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1836:/usr/avr/include/avr/power.h **** 
1837:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1838:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1839:/usr/avr/include/avr/power.h **** 
1840:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1841:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1842:/usr/avr/include/avr/power.h **** 
1843:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1844:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1845:/usr/avr/include/avr/power.h **** 
1846:/usr/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
1847:/usr/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
1848:/usr/avr/include/avr/power.h **** 
1849:/usr/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
1850:/usr/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
1851:/usr/avr/include/avr/power.h **** 
1852:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1853:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1854:/usr/avr/include/avr/power.h **** 
1855:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1856:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1857:/usr/avr/include/avr/power.h **** 
1858:/usr/avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
1859:/usr/avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
1860:/usr/avr/include/avr/power.h **** 
1861:/usr/avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
1862:/usr/avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
1863:/usr/avr/include/avr/power.h **** 
1864:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1865:/usr/avr/include/avr/power.h **** do{ \
1866:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1867:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
1868:/usr/avr/include/avr/power.h **** }while(0)
1869:/usr/avr/include/avr/power.h **** 
1870:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1871:/usr/avr/include/avr/power.h **** do{ \
1872:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1873:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
1874:/usr/avr/include/avr/power.h **** }while(0)
1875:/usr/avr/include/avr/power.h **** 
1876:/usr/avr/include/avr/power.h **** 
1877:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
1878:/usr/avr/include/avr/power.h **** 
1879:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1880:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1881:/usr/avr/include/avr/power.h **** 
1882:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1883:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1884:/usr/avr/include/avr/power.h **** 
1885:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1886:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1887:/usr/avr/include/avr/power.h **** 
1888:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1889:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1890:/usr/avr/include/avr/power.h **** 
1891:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1892:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1893:/usr/avr/include/avr/power.h **** 
1894:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1895:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1896:/usr/avr/include/avr/power.h **** 
1897:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1898:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1899:/usr/avr/include/avr/power.h **** 
1900:/usr/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
1901:/usr/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
1902:/usr/avr/include/avr/power.h **** 
1903:/usr/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
1904:/usr/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
1905:/usr/avr/include/avr/power.h **** 
1906:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1907:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1908:/usr/avr/include/avr/power.h **** 
1909:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1910:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1911:/usr/avr/include/avr/power.h **** 
1912:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1913:/usr/avr/include/avr/power.h **** do{ \
1914:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1915:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
1916:/usr/avr/include/avr/power.h **** }while(0)
1917:/usr/avr/include/avr/power.h **** 
1918:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1919:/usr/avr/include/avr/power.h **** do{ \
1920:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1921:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
1922:/usr/avr/include/avr/power.h **** }while(0)
1923:/usr/avr/include/avr/power.h **** 
1924:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega256RFR2__) \
1925:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1926:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1927:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1928:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1929:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) 
1930:/usr/avr/include/avr/power.h **** 
1931:/usr/avr/include/avr/power.h **** #define power_adc_enable()           (PRR0 &= (uint8_t)~(1 << PRADC))
1932:/usr/avr/include/avr/power.h **** #define power_adc_disable()          (PRR0 |= (uint8_t)(1 << PRADC))
1933:/usr/avr/include/avr/power.h **** 
1934:/usr/avr/include/avr/power.h **** #define power_usart0_enable()        (PRR0 &= (uint8_t)~(1 << PRUSART0))
1935:/usr/avr/include/avr/power.h **** #define power_usart0_disable()       (PRR0 |= (uint8_t)(1 << PRUSART0))
1936:/usr/avr/include/avr/power.h **** 
1937:/usr/avr/include/avr/power.h **** #define power_spi_enable()           (PRR0 &= (uint8_t)~(1 << PRSPI))
1938:/usr/avr/include/avr/power.h **** #define power_spi_disable()          (PRR0 |= (uint8_t)(1 << PRSPI))
1939:/usr/avr/include/avr/power.h **** 
1940:/usr/avr/include/avr/power.h **** #define power_timer1_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM1))
1941:/usr/avr/include/avr/power.h **** #define power_timer1_disable()       (PRR0 |= (uint8_t)(1 << PRTIM1))
1942:/usr/avr/include/avr/power.h **** 
1943:/usr/avr/include/avr/power.h **** #define power_pga_enable()           (PRR0 &= (uint8_t)~(1 << PRPGA))
1944:/usr/avr/include/avr/power.h **** #define power_pga_disable()          (PRR0 |= (uint8_t)(1 << PRPGA))
1945:/usr/avr/include/avr/power.h **** 
1946:/usr/avr/include/avr/power.h **** #define power_timer0_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM0))
1947:/usr/avr/include/avr/power.h **** #define power_timer0_disable()       (PRR0 |= (uint8_t)(1 << PRTIM0))
1948:/usr/avr/include/avr/power.h **** 
1949:/usr/avr/include/avr/power.h **** #define power_timer2_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM2))
1950:/usr/avr/include/avr/power.h **** #define power_timer2_disable()       (PRR0 |= (uint8_t)(1 << PRTIM2))
1951:/usr/avr/include/avr/power.h **** 
1952:/usr/avr/include/avr/power.h **** #define power_twi_enable()           (PRR0 &= (uint8_t)~(1 << PRTWI))
1953:/usr/avr/include/avr/power.h **** #define power_twi_disable()          (PRR0 |= (uint8_t)(1 << PRTWI))
1954:/usr/avr/include/avr/power.h **** 
1955:/usr/avr/include/avr/power.h **** #define power_usart1_enable()        (PRR1 &= (uint8_t)~(1 << PRUSART1))
1956:/usr/avr/include/avr/power.h **** #define power_usart1_disable()       (PRR1 |= (uint8_t)(1 << PRUSART1))
1957:/usr/avr/include/avr/power.h **** 
1958:/usr/avr/include/avr/power.h **** #define power_timer3_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM3))
1959:/usr/avr/include/avr/power.h **** #define power_timer3_disable()       (PRR1 |= (uint8_t)(1 << PRTIM3))
1960:/usr/avr/include/avr/power.h **** 
1961:/usr/avr/include/avr/power.h **** #define power_timer4_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM4))
1962:/usr/avr/include/avr/power.h **** #define power_timer4_disable()       (PRR1 |= (uint8_t)(1 << PRTIM4))
1963:/usr/avr/include/avr/power.h **** 
1964:/usr/avr/include/avr/power.h **** #define power_timer5_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM5))
1965:/usr/avr/include/avr/power.h **** #define power_timer5_disable()       (PRR1 |= (uint8_t)(1 << PRTIM5))
1966:/usr/avr/include/avr/power.h **** 
1967:/usr/avr/include/avr/power.h **** #define power_transceiver_enable()   (PRR1 &= (uint8_t)~(1 << PRTRX24))
1968:/usr/avr/include/avr/power.h **** #define power_transceiver_disable()  (PRR1 |= (uint8_t)(1 << PRTRX24))
1969:/usr/avr/include/avr/power.h **** 
1970:/usr/avr/include/avr/power.h **** #define power_ram0_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM0))
1971:/usr/avr/include/avr/power.h **** #define power_ram0_disable()         (PRR2 |= (uint8_t)(1 << PRRAM0))
1972:/usr/avr/include/avr/power.h **** 
1973:/usr/avr/include/avr/power.h **** #define power_ram1_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM1))
1974:/usr/avr/include/avr/power.h **** #define power_ram1_disable()         (PRR2 |= (uint8_t)(1 << PRRAM1))
1975:/usr/avr/include/avr/power.h **** 
1976:/usr/avr/include/avr/power.h **** #define power_ram2_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM2))
1977:/usr/avr/include/avr/power.h **** #define power_ram2_disable()         (PRR2 |= (uint8_t)(1 << PRRAM2))
1978:/usr/avr/include/avr/power.h **** 
1979:/usr/avr/include/avr/power.h **** #define power_ram3_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM3))
1980:/usr/avr/include/avr/power.h **** #define power_ram3_disable()         (PRR2 |= (uint8_t)(1 << PRRAM3))
1981:/usr/avr/include/avr/power.h **** 
1982:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1983:/usr/avr/include/avr/power.h **** do{ \
1984:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1985:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSART1)|(1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTRX24)); \
1986:/usr/avr/include/avr/power.h ****     PRR2 &= (uint8_t)~((1<<PRRAM0)|(1<<PRRAM1)|(1<<PRRAM2)|(1<<PRRAM3)); \
1987:/usr/avr/include/avr/power.h **** }while(0)
1988:/usr/avr/include/avr/power.h **** 
1989:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1990:/usr/avr/include/avr/power.h **** do{ \
1991:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1992:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSART1)|(1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTRX24)); \
1993:/usr/avr/include/avr/power.h ****     PRR2 |= (uint8_t)((1<<PRRAM0)|(1<<PRRAM1)|(1<<PRRAM2)|(1<<PRRAM3)); \
1994:/usr/avr/include/avr/power.h **** }while(0)
1995:/usr/avr/include/avr/power.h **** 
1996:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
1997:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1998:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1999:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
2000:/usr/avr/include/avr/power.h **** 
2001:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2002:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2003:/usr/avr/include/avr/power.h **** 
2004:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2005:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2006:/usr/avr/include/avr/power.h **** 
2007:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2008:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2009:/usr/avr/include/avr/power.h **** 
2010:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2011:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2012:/usr/avr/include/avr/power.h **** 
2013:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2014:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2015:/usr/avr/include/avr/power.h **** 
2016:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2017:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2018:/usr/avr/include/avr/power.h **** 
2019:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2020:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2021:/usr/avr/include/avr/power.h **** 
2022:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2023:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2024:/usr/avr/include/avr/power.h **** 
2025:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2026:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2027:/usr/avr/include/avr/power.h **** 
2028:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2029:/usr/avr/include/avr/power.h **** do{ \
2030:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2031:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2032:/usr/avr/include/avr/power.h **** }while(0)
2033:/usr/avr/include/avr/power.h **** 
2034:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2035:/usr/avr/include/avr/power.h **** do{ \
2036:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2037:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2038:/usr/avr/include/avr/power.h **** }while(0)
2039:/usr/avr/include/avr/power.h **** 
2040:/usr/avr/include/avr/power.h **** 
2041:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
2042:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
2043:/usr/avr/include/avr/power.h **** 
2044:/usr/avr/include/avr/power.h **** 
2045:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2046:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2047:/usr/avr/include/avr/power.h **** 
2048:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2049:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2050:/usr/avr/include/avr/power.h **** 
2051:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2052:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2053:/usr/avr/include/avr/power.h **** 
2054:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2055:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2056:/usr/avr/include/avr/power.h **** 
2057:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2058:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2059:/usr/avr/include/avr/power.h **** 
2060:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2061:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2062:/usr/avr/include/avr/power.h **** 
2063:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2064:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2065:/usr/avr/include/avr/power.h **** 
2066:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2067:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2068:/usr/avr/include/avr/power.h **** 
2069:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2070:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2071:/usr/avr/include/avr/power.h **** 
2072:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2073:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2074:/usr/avr/include/avr/power.h **** 
2075:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2076:/usr/avr/include/avr/power.h **** do{ \
2077:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
2078:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2079:/usr/avr/include/avr/power.h **** }while(0)
2080:/usr/avr/include/avr/power.h **** 
2081:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2082:/usr/avr/include/avr/power.h **** do{ \
2083:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
2084:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2085:/usr/avr/include/avr/power.h **** }while(0)
2086:/usr/avr/include/avr/power.h **** 
2087:/usr/avr/include/avr/power.h **** 
2088:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
2089:/usr/avr/include/avr/power.h **** 
2090:/usr/avr/include/avr/power.h **** 
2091:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2092:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2093:/usr/avr/include/avr/power.h **** 
2094:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2095:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2096:/usr/avr/include/avr/power.h **** 
2097:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2098:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2099:/usr/avr/include/avr/power.h **** 
2100:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2101:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2102:/usr/avr/include/avr/power.h **** 
2103:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2104:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2105:/usr/avr/include/avr/power.h **** 
2106:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2107:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2108:/usr/avr/include/avr/power.h **** 
2109:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2110:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2111:/usr/avr/include/avr/power.h **** 
2112:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2113:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2114:/usr/avr/include/avr/power.h **** 
2115:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2116:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2117:/usr/avr/include/avr/power.h **** 
2118:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2119:/usr/avr/include/avr/power.h **** do{ \
2120:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2121:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2122:/usr/avr/include/avr/power.h **** }while(0)
2123:/usr/avr/include/avr/power.h **** 
2124:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2125:/usr/avr/include/avr/power.h **** do{ \
2126:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2127:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2128:/usr/avr/include/avr/power.h **** }while(0)
2129:/usr/avr/include/avr/power.h **** 
2130:/usr/avr/include/avr/power.h **** 
2131:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
2132:/usr/avr/include/avr/power.h **** 
2133:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2134:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2135:/usr/avr/include/avr/power.h **** 
2136:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2137:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2138:/usr/avr/include/avr/power.h **** 
2139:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2140:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2141:/usr/avr/include/avr/power.h **** 
2142:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2143:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2144:/usr/avr/include/avr/power.h **** 
2145:/usr/avr/include/avr/power.h **** /* Power Stage Controller 0 */
2146:/usr/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
2147:/usr/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
2148:/usr/avr/include/avr/power.h **** 
2149:/usr/avr/include/avr/power.h **** /* Power Stage Controller 1 */
2150:/usr/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
2151:/usr/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
2152:/usr/avr/include/avr/power.h **** 
2153:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2154:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2155:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2156:/usr/avr/include/avr/power.h **** 
2157:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2158:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2159:/usr/avr/include/avr/power.h **** 
2160:/usr/avr/include/avr/power.h **** 
2161:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
2162:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
2163:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
2164:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
2165:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
2166:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
2167:/usr/avr/include/avr/power.h **** 
2168:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2169:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2170:/usr/avr/include/avr/power.h **** 
2171:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2172:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2173:/usr/avr/include/avr/power.h **** 
2174:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90PWM216__) || defined(__AVR_AT90PWM316__)
2175:/usr/avr/include/avr/power.h **** 
2176:/usr/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
2177:/usr/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
2178:/usr/avr/include/avr/power.h **** 
2179:/usr/avr/include/avr/power.h **** #else
2180:/usr/avr/include/avr/power.h **** 
2181:/usr/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART0))
2182:/usr/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART0))
2183:/usr/avr/include/avr/power.h **** 
2184:/usr/avr/include/avr/power.h **** #endif
2185:/usr/avr/include/avr/power.h **** 
2186:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2187:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2188:/usr/avr/include/avr/power.h **** 
2189:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2190:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2191:/usr/avr/include/avr/power.h **** 
2192:/usr/avr/include/avr/power.h **** /* Power Stage Controller 0 */
2193:/usr/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
2194:/usr/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
2195:/usr/avr/include/avr/power.h **** 
2196:/usr/avr/include/avr/power.h **** /* Power Stage Controller 1 */
2197:/usr/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
2198:/usr/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
2199:/usr/avr/include/avr/power.h **** 
2200:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2201:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2202:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2203:/usr/avr/include/avr/power.h **** 
2204:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90PWM216__) || defined(__AVR_AT90PWM316__)
2205:/usr/avr/include/avr/power.h **** 
2206:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
2207:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
2208:/usr/avr/include/avr/power.h **** 
2209:/usr/avr/include/avr/power.h **** #else
2210:/usr/avr/include/avr/power.h **** 
2211:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2212:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2213:/usr/avr/include/avr/power.h **** 
2214:/usr/avr/include/avr/power.h **** #endif
2215:/usr/avr/include/avr/power.h **** 
2216:/usr/avr/include/avr/power.h **** 
2217:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__) \
2218:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__)
2219:/usr/avr/include/avr/power.h **** 
2220:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2221:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2222:/usr/avr/include/avr/power.h **** 
2223:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2224:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2225:/usr/avr/include/avr/power.h **** 
2226:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2227:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2228:/usr/avr/include/avr/power.h **** 
2229:/usr/avr/include/avr/power.h **** /* Reduced Power Stage Controller */
2230:/usr/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
2231:/usr/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
2232:/usr/avr/include/avr/power.h **** 
2233:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2234:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2235:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2236:/usr/avr/include/avr/power.h **** 
2237:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
2238:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
2239:/usr/avr/include/avr/power.h **** 
2240:/usr/avr/include/avr/power.h **** 
2241:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
2242:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
2243:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
2244:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
2245:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
2246:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
2247:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
2248:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
2249:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
2250:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
2251:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
2252:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
2253:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
2254:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
2255:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
2256:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
2257:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
2258:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
2259:/usr/avr/include/avr/power.h **** 
2260:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2261:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2262:/usr/avr/include/avr/power.h **** 
2263:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2264:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2265:/usr/avr/include/avr/power.h **** 
2266:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2267:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2268:/usr/avr/include/avr/power.h **** 
2269:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2270:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2271:/usr/avr/include/avr/power.h **** 
2272:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
2273:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
2274:/usr/avr/include/avr/power.h **** 
2275:/usr/avr/include/avr/power.h **** 
2276:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
2277:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
2278:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
2279:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
2280:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
2281:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
2282:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
2283:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
2284:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
2285:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
2286:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
2287:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
2288:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
2289:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
2290:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
2291:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
2292:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
2293:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
2294:/usr/avr/include/avr/power.h **** 
2295:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2296:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2297:/usr/avr/include/avr/power.h **** 
2298:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2299:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2300:/usr/avr/include/avr/power.h **** 
2301:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2302:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2303:/usr/avr/include/avr/power.h **** 
2304:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2305:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2306:/usr/avr/include/avr/power.h **** 
2307:/usr/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
2308:/usr/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
2309:/usr/avr/include/avr/power.h **** 
2310:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
2311:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
2312:/usr/avr/include/avr/power.h **** 
2313:/usr/avr/include/avr/power.h **** 
2314:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
2315:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
2316:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
2317:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
2318:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
2319:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
2320:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
2321:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
2322:/usr/avr/include/avr/power.h **** 
2323:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2324:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2325:/usr/avr/include/avr/power.h **** 
2326:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2327:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2328:/usr/avr/include/avr/power.h **** 
2329:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2330:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2331:/usr/avr/include/avr/power.h **** 
2332:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
2333:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
2334:/usr/avr/include/avr/power.h **** 
2335:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2336:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2337:/usr/avr/include/avr/power.h **** 
2338:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2339:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2340:/usr/avr/include/avr/power.h **** 
2341:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2342:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2343:/usr/avr/include/avr/power.h **** 
2344:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2345:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2346:/usr/avr/include/avr/power.h **** 
2347:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
2348:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
2349:/usr/avr/include/avr/power.h **** 
2350:/usr/avr/include/avr/power.h **** 
2351:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__) \
2352:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__)
2353:/usr/avr/include/avr/power.h **** 
2354:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2355:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2356:/usr/avr/include/avr/power.h **** 
2357:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2358:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2359:/usr/avr/include/avr/power.h **** 
2360:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2361:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2362:/usr/avr/include/avr/power.h **** 
2363:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2364:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2365:/usr/avr/include/avr/power.h **** 
2366:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2367:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2368:/usr/avr/include/avr/power.h **** 
2369:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2370:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2371:/usr/avr/include/avr/power.h **** 
2372:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2373:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2374:/usr/avr/include/avr/power.h **** 
2375:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
2376:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2377:/usr/avr/include/avr/power.h **** 
2378:/usr/avr/include/avr/power.h **** 
2379:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
2380:/usr/avr/include/avr/power.h **** 
2381:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2382:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2383:/usr/avr/include/avr/power.h **** 
2384:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2385:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2386:/usr/avr/include/avr/power.h **** 
2387:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2388:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2389:/usr/avr/include/avr/power.h **** 
2390:/usr/avr/include/avr/power.h **** /* Voltage ADC */
2391:/usr/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
2392:/usr/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
2393:/usr/avr/include/avr/power.h **** 
2394:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
2395:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
2396:/usr/avr/include/avr/power.h **** 
2397:/usr/avr/include/avr/power.h **** 
2398:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
2399:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
2400:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
2401:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
2402:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
2403:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
2404:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
2405:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
2406:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
2407:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
2408:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
2409:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
2410:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
2411:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
2412:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny828__)
2413:/usr/avr/include/avr/power.h **** 
2414:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2415:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2416:/usr/avr/include/avr/power.h **** 
2417:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2418:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2419:/usr/avr/include/avr/power.h **** 
2420:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2421:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2422:/usr/avr/include/avr/power.h **** 
2423:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2424:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2425:/usr/avr/include/avr/power.h **** 
2426:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2427:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2428:/usr/avr/include/avr/power.h **** 
2429:/usr/avr/include/avr/power.h **** #if !defined(__AVR_ATtiny828__)
2430:/usr/avr/include/avr/power.h **** 
2431:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
2432:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
2433:/usr/avr/include/avr/power.h **** 
2434:/usr/avr/include/avr/power.h **** #endif
2435:/usr/avr/include/avr/power.h **** 
2436:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2437:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2438:/usr/avr/include/avr/power.h **** 
2439:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATtiny828__)
2440:/usr/avr/include/avr/power.h **** 
2441:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2442:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2443:/usr/avr/include/avr/power.h **** 
2444:/usr/avr/include/avr/power.h **** #else
2445:/usr/avr/include/avr/power.h **** 
2446:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2447:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2448:/usr/avr/include/avr/power.h **** 
2449:/usr/avr/include/avr/power.h **** #endif
2450:/usr/avr/include/avr/power.h **** 
2451:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny48__) \
2452:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
2453:/usr/avr/include/avr/power.h **** 
2454:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2455:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2456:/usr/avr/include/avr/power.h **** 
2457:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2458:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2459:/usr/avr/include/avr/power.h **** 
2460:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2461:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2462:/usr/avr/include/avr/power.h **** 
2463:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2464:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2465:/usr/avr/include/avr/power.h **** 
2466:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2467:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2468:/usr/avr/include/avr/power.h **** 
2469:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2470:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2471:/usr/avr/include/avr/power.h **** 
2472:/usr/avr/include/avr/power.h ****   
2473:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
2474:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
2475:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
2476:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
2477:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
2478:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
2479:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
2480:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
2481:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
2482:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
2483:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
2484:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
2485:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
2486:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
2487:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
2488:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
2489:/usr/avr/include/avr/power.h **** 
2490:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2491:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2492:/usr/avr/include/avr/power.h **** 
2493:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2494:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2495:/usr/avr/include/avr/power.h **** 
2496:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2497:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2498:/usr/avr/include/avr/power.h **** 
2499:/usr/avr/include/avr/power.h **** /* Universal Serial Interface */
2500:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2501:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2502:/usr/avr/include/avr/power.h **** 
2503:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
2504:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
2505:/usr/avr/include/avr/power.h **** 
2506:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284__)
2507:/usr/avr/include/avr/power.h **** 
2508:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2509:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2510:/usr/avr/include/avr/power.h **** 
2511:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2512:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2513:/usr/avr/include/avr/power.h **** 
2514:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2515:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2516:/usr/avr/include/avr/power.h **** 
2517:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2518:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2519:/usr/avr/include/avr/power.h **** 
2520:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2521:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2522:/usr/avr/include/avr/power.h **** 
2523:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2524:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2525:/usr/avr/include/avr/power.h **** 
2526:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2527:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2528:/usr/avr/include/avr/power.h **** 
2529:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2530:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2531:/usr/avr/include/avr/power.h **** 
2532:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2533:/usr/avr/include/avr/power.h **** do{ \
2534:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
2535:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
2536:/usr/avr/include/avr/power.h **** }while(0)
2537:/usr/avr/include/avr/power.h **** 
2538:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2539:/usr/avr/include/avr/power.h **** do{ \
2540:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
2541:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
2542:/usr/avr/include/avr/power.h **** }while(0)
2543:/usr/avr/include/avr/power.h **** 
2544:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
2545:/usr/avr/include/avr/power.h **** 
2546:/usr/avr/include/avr/power.h **** 
2547:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2548:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2549:/usr/avr/include/avr/power.h **** 
2550:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2551:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2552:/usr/avr/include/avr/power.h **** 
2553:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2554:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2555:/usr/avr/include/avr/power.h **** 
2556:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2557:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2558:/usr/avr/include/avr/power.h **** 
2559:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2560:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2561:/usr/avr/include/avr/power.h **** 
2562:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2563:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2564:/usr/avr/include/avr/power.h **** 
2565:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2566:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2567:/usr/avr/include/avr/power.h **** 
2568:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2569:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2570:/usr/avr/include/avr/power.h **** 
2571:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
2572:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
2573:/usr/avr/include/avr/power.h **** 
2574:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2575:/usr/avr/include/avr/power.h **** do{ \
2576:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
2577:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
2578:/usr/avr/include/avr/power.h **** }while(0)
2579:/usr/avr/include/avr/power.h **** 
2580:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2581:/usr/avr/include/avr/power.h **** do{ \
2582:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
2583:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
2584:/usr/avr/include/avr/power.h **** }while(0)
2585:/usr/avr/include/avr/power.h **** 
2586:/usr/avr/include/avr/power.h **** 
2587:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
2588:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
2589:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
2590:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
2591:/usr/avr/include/avr/power.h **** 
2592:/usr/avr/include/avr/power.h **** 
2593:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2594:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2595:/usr/avr/include/avr/power.h **** 
2596:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2597:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2598:/usr/avr/include/avr/power.h **** 
2599:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2600:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2601:/usr/avr/include/avr/power.h **** 
2602:/usr/avr/include/avr/power.h **** /* Voltage ADC */
2603:/usr/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
2604:/usr/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
2605:/usr/avr/include/avr/power.h **** 
2606:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2607:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2608:/usr/avr/include/avr/power.h **** 
2609:/usr/avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
2610:/usr/avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
2611:/usr/avr/include/avr/power.h **** 
2612:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
2613:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
2614:/usr/avr/include/avr/power.h **** 
2615:/usr/avr/include/avr/power.h **** 
2616:/usr/avr/include/avr/power.h **** #elif defined (__AVR_ATA5790__) \
2617:/usr/avr/include/avr/power.h **** || defined (__AVR_ATA5790N__) \
2618:/usr/avr/include/avr/power.h **** || defined (__AVR_ATA5795__)
2619:/usr/avr/include/avr/power.h **** 
2620:/usr/avr/include/avr/power.h **** // Enable the voltage monitor 
2621:/usr/avr/include/avr/power.h **** #define power_vmonitor_enable()          (PRR0 &= (uint8_t)~(1 << PRVM))
2622:/usr/avr/include/avr/power.h **** #define power_vmonitor_disable()         (PRR0 |= (uint8_t)(1 << PRVM))
2623:/usr/avr/include/avr/power.h **** 
2624:/usr/avr/include/avr/power.h **** #define power_irdriver_enable()          (PRR0 &= (uint8_t)~(1 << PRDS))
2625:/usr/avr/include/avr/power.h **** #define power_irdriver_disable()         (PRR0 |= (uint8_t)(1 << PRDS))
2626:/usr/avr/include/avr/power.h **** 
2627:/usr/avr/include/avr/power.h **** #define power_crypto_enable()            (PRR0 &= (uint8_t)~(1 << PRCU))
2628:/usr/avr/include/avr/power.h **** #define power_crypto_disable()           (PRR0 |= (uint8_t)(1 << PRCU))
2629:/usr/avr/include/avr/power.h **** 
2630:/usr/avr/include/avr/power.h **** #define power_timermodulator_enable()    (PRR0 &= (uint8_t)~(1 << PRTM))
2631:/usr/avr/include/avr/power.h **** #define power_timermodulator_disable()   (PRR0 |= (uint8_t)(1 << PRTM))
2632:/usr/avr/include/avr/power.h **** 
2633:/usr/avr/include/avr/power.h **** #define power_timer1_enable()            (PRR0 &= (uint8_t)~(1 << PRT1))
2634:/usr/avr/include/avr/power.h **** #define power_timer1_disable()           (PRR0 |= (uint8_t)(1 << PRT1))
2635:/usr/avr/include/avr/power.h **** 
2636:/usr/avr/include/avr/power.h **** #define power_timer2_enable()            (PRR0 &= (uint8_t)~(1 << PRT2))
2637:/usr/avr/include/avr/power.h **** #define power_timer2_disable()           (PRR0 |= (uint8_t)(1 << PRT2))
2638:/usr/avr/include/avr/power.h **** 
2639:/usr/avr/include/avr/power.h **** #define power_timer3_enable()            (PRR0 &= (uint8_t)~(1 << PRT3))
2640:/usr/avr/include/avr/power.h **** #define power_timer3_disable()           (PRR0 |= (uint8_t)(1 << PRT3))
2641:/usr/avr/include/avr/power.h **** 
2642:/usr/avr/include/avr/power.h **** #define power_spi_enable()               (PRR1 &= (uint8_t)~(1 << PRSPI))
2643:/usr/avr/include/avr/power.h **** #define power_spi_disable()              (PRR1 |= (uint8_t)(1 << PRSPI))
2644:/usr/avr/include/avr/power.h **** 
2645:/usr/avr/include/avr/power.h **** #define power_cinterface_enable()        (PRR1 &= (uint8_t)~(1 << PRCI))
2646:/usr/avr/include/avr/power.h **** #define power_cinterface_disable()       (PRR1 |= (uint8_t)(1 << PRCI))
2647:/usr/avr/include/avr/power.h **** 
2648:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATA5790__) \
2649:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5790N__)
2650:/usr/avr/include/avr/power.h **** 
2651:/usr/avr/include/avr/power.h **** #define power_lfreceiver_enable()        (PRR0 &= (uint8_t)~(1 << PRLFR))            
2652:/usr/avr/include/avr/power.h **** #define power_lfreceiver_disable()       (PRR0 |= (uint8_t)(1 << PRLFR))            
2653:/usr/avr/include/avr/power.h **** 
2654:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2655:/usr/avr/include/avr/power.h **** do{ \
2656:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)|(1<<PR
2657:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRSPI)|(1<<PRCI)); \
2658:/usr/avr/include/avr/power.h **** }while(0)
2659:/usr/avr/include/avr/power.h **** 
2660:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2661:/usr/avr/include/avr/power.h **** do{ \
2662:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)|(1<<PRL
2663:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRSPI)|(1<<PRCI)); \
2664:/usr/avr/include/avr/power.h **** }while(0)
2665:/usr/avr/include/avr/power.h **** 
2666:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATA5795__)
2667:/usr/avr/include/avr/power.h **** 
2668:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2669:/usr/avr/include/avr/power.h **** do{ \
2670:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)); \
2671:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRSPI)|(1<<PRCI)); \
2672:/usr/avr/include/avr/power.h **** }while(0)
2673:/usr/avr/include/avr/power.h **** 
2674:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2675:/usr/avr/include/avr/power.h **** do{ \
2676:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)); \
2677:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRSPI)|(1<<PRCI)); \
2678:/usr/avr/include/avr/power.h **** }while(0)
2679:/usr/avr/include/avr/power.h **** 
2680:/usr/avr/include/avr/power.h **** #endif
2681:/usr/avr/include/avr/power.h **** 
2682:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega64HVE__) \
2683:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64HVE2__) 
2684:/usr/avr/include/avr/power.h **** 
2685:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR0 &= (uint8_t)~(1 << PRLIN))
2686:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR0 |= (uint8_t)(1 << PRLIN))
2687:/usr/avr/include/avr/power.h **** 
2688:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2689:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2690:/usr/avr/include/avr/power.h **** 
2691:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2692:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2693:/usr/avr/include/avr/power.h **** 
2694:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2695:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2696:/usr/avr/include/avr/power.h **** 
2697:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)))
2698:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)))
2699:/usr/avr/include/avr/power.h **** 
2700:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATA5831__)
2701:/usr/avr/include/avr/power.h **** 
2702:/usr/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
2703:/usr/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
2704:/usr/avr/include/avr/power.h **** 
2705:/usr/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
2706:/usr/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
2707:/usr/avr/include/avr/power.h **** 
2708:/usr/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
2709:/usr/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
2710:/usr/avr/include/avr/power.h **** 
2711:/usr/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()     (PRR0 &= (uint8_t)~(1 << PRTXDC))
2712:/usr/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()    (PRR0 |= (uint8_t)(1 << PRTXDC))
2713:/usr/avr/include/avr/power.h **** 
2714:/usr/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()      (PRR0 &= (uint8_t)~(1 << PRRXDC))
2715:/usr/avr/include/avr/power.h **** #define power_receive_dsp_control_disable()     (PRR0 |= (uint8_t)(1 << PRRXDC))
2716:/usr/avr/include/avr/power.h **** 
2717:/usr/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
2718:/usr/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
2719:/usr/avr/include/avr/power.h **** 
2720:/usr/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
2721:/usr/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
2722:/usr/avr/include/avr/power.h **** 
2723:/usr/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
2724:/usr/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
2725:/usr/avr/include/avr/power.h **** 
2726:/usr/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
2727:/usr/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
2728:/usr/avr/include/avr/power.h **** 
2729:/usr/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
2730:/usr/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
2731:/usr/avr/include/avr/power.h **** 
2732:/usr/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
2733:/usr/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
2734:/usr/avr/include/avr/power.h **** 
2735:/usr/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
2736:/usr/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
2737:/usr/avr/include/avr/power.h **** 
2738:/usr/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
2739:/usr/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
2740:/usr/avr/include/avr/power.h **** 
2741:/usr/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
2742:/usr/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
2743:/usr/avr/include/avr/power.h **** 
2744:/usr/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
2745:/usr/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
2746:/usr/avr/include/avr/power.h **** 
2747:/usr/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
2748:/usr/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
2749:/usr/avr/include/avr/power.h **** 
2750:/usr/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
2751:/usr/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
2752:/usr/avr/include/avr/power.h **** 
2753:/usr/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
2754:/usr/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
2755:/usr/avr/include/avr/power.h **** 
2756:/usr/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
2757:/usr/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
2758:/usr/avr/include/avr/power.h **** 
2759:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2760:/usr/avr/include/avr/power.h **** do{ \
2761:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1 << PRCO) | (1 << PRVM) | (1 << PRCRC) | (1 << PRTXDC) | (1 << PRRXDC) | (
2762:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1 << PRT1) | (1 << PRT2) | (1 << PRT3) | (1 << PRT4) | (1 << PRT5)); \
2763:/usr/avr/include/avr/power.h ****     PRR2 &= (uint8_t)~((1 << PRSSM) | (1 << PRTM) | (1 << PRRS) | (1 << PRIDS) | (1 << PRDF) | (1 <
2764:/usr/avr/include/avr/power.h **** }while(0)
2765:/usr/avr/include/avr/power.h **** 
2766:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2767:/usr/avr/include/avr/power.h **** do{ \
2768:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1 << PRCO) | (1 << PRVM) | (1 << PRCRC) | (1 << PRTXDC) | (1 << PRRXDC) | (1
2769:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1 << PRT1) | (1 << PRT2) | (1 << PRT3) | (1 << PRT4) | (1 << PRT5)); \
2770:/usr/avr/include/avr/power.h ****     PRR2 |= (uint8_t)((1 << PRSSM) | (1 << PRTM) | (1 << PRRS) | (1 << PRIDS) | (1 << PRDF) | (1 <<
2771:/usr/avr/include/avr/power.h **** }while(0)
2772:/usr/avr/include/avr/power.h **** 
2773:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
2774:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
2775:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
2776:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
2777:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
2778:/usr/avr/include/avr/power.h **** 
2779:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2780:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2781:/usr/avr/include/avr/power.h **** 
2782:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
2783:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
2784:/usr/avr/include/avr/power.h **** 
2785:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2786:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2787:/usr/avr/include/avr/power.h **** 
2788:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2789:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2790:/usr/avr/include/avr/power.h **** 
2791:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2792:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2793:/usr/avr/include/avr/power.h **** 
2794:/usr/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
2795:/usr/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
2796:/usr/avr/include/avr/power.h **** 
2797:/usr/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
2798:/usr/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
2799:/usr/avr/include/avr/power.h **** 
2800:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
2801:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
2802:/usr/avr/include/avr/power.h **** 
2803:/usr/avr/include/avr/power.h **** 
2804:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
2805:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
2806:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
2807:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5272__)
2808:/usr/avr/include/avr/power.h **** 
2809:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2810:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2811:/usr/avr/include/avr/power.h **** 
2812:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2813:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2814:/usr/avr/include/avr/power.h **** 
2815:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2816:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2817:/usr/avr/include/avr/power.h **** 
2818:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2819:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2820:/usr/avr/include/avr/power.h **** 
2821:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2822:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2823:/usr/avr/include/avr/power.h **** 
2824:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
2825:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
2826:/usr/avr/include/avr/power.h **** 
2827:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2828:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2829:/usr/avr/include/avr/power.h **** 
2830:/usr/avr/include/avr/power.h **** 
2831:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny1634__)
2832:/usr/avr/include/avr/power.h **** 
2833:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2834:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2835:/usr/avr/include/avr/power.h **** 
2836:/usr/avr/include/avr/power.h **** #define power_usart0_enable()      (PRR &= (uint8_t)~(1 << PRUSART0))
2837:/usr/avr/include/avr/power.h **** #define power_usart0_disable()     (PRR |= (uint8_t)(1 << PRUSART0))
2838:/usr/avr/include/avr/power.h **** 
2839:/usr/avr/include/avr/power.h **** #define power_usart1_enable()      (PRR &= (uint8_t)~(1 << PRUSART1))
2840:/usr/avr/include/avr/power.h **** #define power_usart1_disable()     (PRR |= (uint8_t)(1 << PRUSART1))
2841:/usr/avr/include/avr/power.h **** 
2842:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2843:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2844:/usr/avr/include/avr/power.h **** 
2845:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2846:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2847:/usr/avr/include/avr/power.h **** 
2848:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2849:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2850:/usr/avr/include/avr/power.h **** 
2851:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2852:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2853:/usr/avr/include/avr/power.h **** 
2854:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1 << PRTWI)|(1 << PRUSI)|(1 << PRTIM0)|(1 << PR
2855:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1 << PRTWI)|(1 << PRUSI)|(1 << PRTIM0)|(1 << PRT
2856:/usr/avr/include/avr/power.h **** 
2857:/usr/avr/include/avr/power.h **** 
2858:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
2859:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
2860:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
2861:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
2862:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
2863:/usr/avr/include/avr/power.h **** 
2864:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2865:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2866:/usr/avr/include/avr/power.h **** 
2867:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2868:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2869:/usr/avr/include/avr/power.h **** 
2870:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2871:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2872:/usr/avr/include/avr/power.h **** 
2873:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2874:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2875:/usr/avr/include/avr/power.h **** 
2876:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2877:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2878:/usr/avr/include/avr/power.h **** 
2879:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2880:/usr/avr/include/avr/power.h **** do{ \
2881:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
2882:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
2883:/usr/avr/include/avr/power.h **** }while(0)
2884:/usr/avr/include/avr/power.h **** 
2885:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2886:/usr/avr/include/avr/power.h **** do{ \
2887:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
2888:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
2889:/usr/avr/include/avr/power.h **** }while(0)
2890:/usr/avr/include/avr/power.h **** 
2891:/usr/avr/include/avr/power.h **** 
2892:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
2893:/usr/avr/include/avr/power.h **** 
2894:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2895:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2896:/usr/avr/include/avr/power.h **** 
2897:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2898:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2899:/usr/avr/include/avr/power.h **** 
2900:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2901:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2902:/usr/avr/include/avr/power.h **** 
2903:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2904:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2905:/usr/avr/include/avr/power.h **** 
2906:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2907:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2908:/usr/avr/include/avr/power.h **** 
2909:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2910:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2911:/usr/avr/include/avr/power.h **** 
2912:/usr/avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
2913:/usr/avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
2914:/usr/avr/include/avr/power.h **** 
2915:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2916:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2917:/usr/avr/include/avr/power.h **** 
2918:/usr/avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
2919:/usr/avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
2920:/usr/avr/include/avr/power.h **** 
2921:/usr/avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
2922:/usr/avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
2923:/usr/avr/include/avr/power.h **** 
2924:/usr/avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
2925:/usr/avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
2926:/usr/avr/include/avr/power.h **** 
2927:/usr/avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
2928:/usr/avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
2929:/usr/avr/include/avr/power.h **** 
2930:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2931:/usr/avr/include/avr/power.h **** do{ \
2932:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
2933:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
2934:/usr/avr/include/avr/power.h **** }while(0)
2935:/usr/avr/include/avr/power.h **** 
2936:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2937:/usr/avr/include/avr/power.h **** do{ \
2938:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
2939:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
2940:/usr/avr/include/avr/power.h **** }while(0)
2941:/usr/avr/include/avr/power.h **** 
2942:/usr/avr/include/avr/power.h **** 
2943:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
2944:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
2945:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
2946:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
2947:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
2948:/usr/avr/include/avr/power.h **** 
2949:/usr/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
2950:/usr/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
2951:/usr/avr/include/avr/power.h **** 
2952:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2953:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2954:/usr/avr/include/avr/power.h **** 
2955:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
2956:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
2957:/usr/avr/include/avr/power.h **** 
2958:/usr/avr/include/avr/power.h **** 
2959:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
2960:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
2961:/usr/avr/include/avr/power.h **** 
2962:/usr/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
2963:/usr/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
2964:/usr/avr/include/avr/power.h **** 
2965:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2966:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2967:/usr/avr/include/avr/power.h **** 
2968:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2969:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2970:/usr/avr/include/avr/power.h **** 
2971:/usr/avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
2972:/usr/avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
2973:/usr/avr/include/avr/power.h **** 
2974:/usr/avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
2975:/usr/avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
2976:/usr/avr/include/avr/power.h **** 
2977:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
2978:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
2979:/usr/avr/include/avr/power.h **** 
2980:/usr/avr/include/avr/power.h **** #endif
2981:/usr/avr/include/avr/power.h **** 
2982:/usr/avr/include/avr/power.h **** 
2983:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
2984:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
2985:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
2986:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
2987:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
2988:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
2989:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
2990:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
2991:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
2992:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
2993:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
2994:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
2995:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
2996:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
2997:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
2998:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
2999:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
3000:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
3001:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
3002:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
3003:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
3004:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
3005:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
3006:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
3007:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
3008:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
3009:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
3010:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
3011:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
3012:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
3013:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
3014:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
3015:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
3016:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
3017:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
3018:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
3019:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
3020:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
3021:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
3022:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
3023:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
3024:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
3025:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
3026:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
3027:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
3028:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
3029:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
3030:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
3031:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
3032:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
3033:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
3034:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
3035:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
3036:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
3037:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
3038:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
3039:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
3040:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
3041:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
3042:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
3043:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
3044:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
3045:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
3046:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
3047:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
3048:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
3049:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
3050:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
3051:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
3052:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
3053:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
3054:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
3055:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
3056:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
3057:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
3058:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
3059:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
3060:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
3061:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
3062:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
3063:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
3064:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
3065:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
3066:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
3067:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
3068:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
3069:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
3070:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
3071:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
3072:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
3073:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
3074:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
3075:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
3076:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
3077:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
3078:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
3079:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
3080:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
3081:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
3082:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
3083:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
3084:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
3085:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
3086:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
3087:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
3088:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
3089:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
3090:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
3091:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
3092:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
3093:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
3094:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
3095:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
3096:/usr/avr/include/avr/power.h **** || defined(__DOXYGEN__)
3097:/usr/avr/include/avr/power.h **** 
3098:/usr/avr/include/avr/power.h **** 
3099:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3100:/usr/avr/include/avr/power.h **** 
3101:/usr/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
3102:/usr/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
3103:/usr/avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
3104:/usr/avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
3105:/usr/avr/include/avr/power.h **** 
3106:/usr/avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
3107:/usr/avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
3108:/usr/avr/include/avr/power.h **** */
3109:/usr/avr/include/avr/power.h **** 
3110:/usr/avr/include/avr/power.h **** 
3111:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3112:/usr/avr/include/avr/power.h **** \code 
3113:/usr/avr/include/avr/power.h **** typedef enum
3114:/usr/avr/include/avr/power.h **** {
3115:/usr/avr/include/avr/power.h ****     clock_div_1 = 0,
3116:/usr/avr/include/avr/power.h ****     clock_div_2 = 1,
3117:/usr/avr/include/avr/power.h ****     clock_div_4 = 2,
3118:/usr/avr/include/avr/power.h ****     clock_div_8 = 3,
3119:/usr/avr/include/avr/power.h ****     clock_div_16 = 4,
3120:/usr/avr/include/avr/power.h ****     clock_div_32 = 5,
3121:/usr/avr/include/avr/power.h ****     clock_div_64 = 6,
3122:/usr/avr/include/avr/power.h ****     clock_div_128 = 7,
3123:/usr/avr/include/avr/power.h ****     clock_div_256 = 8,
3124:/usr/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
3125:/usr/avr/include/avr/power.h **** } clock_div_t;
3126:/usr/avr/include/avr/power.h **** \endcode
3127:/usr/avr/include/avr/power.h **** Clock prescaler setting enumerations.
3128:/usr/avr/include/avr/power.h **** 
3129:/usr/avr/include/avr/power.h **** */
3130:/usr/avr/include/avr/power.h **** typedef enum
3131:/usr/avr/include/avr/power.h **** {
3132:/usr/avr/include/avr/power.h ****     clock_div_1 = 0,
3133:/usr/avr/include/avr/power.h ****     clock_div_2 = 1,
3134:/usr/avr/include/avr/power.h ****     clock_div_4 = 2,
3135:/usr/avr/include/avr/power.h ****     clock_div_8 = 3,
3136:/usr/avr/include/avr/power.h ****     clock_div_16 = 4,
3137:/usr/avr/include/avr/power.h ****     clock_div_32 = 5,
3138:/usr/avr/include/avr/power.h ****     clock_div_64 = 6,
3139:/usr/avr/include/avr/power.h ****     clock_div_128 = 7,
3140:/usr/avr/include/avr/power.h ****     clock_div_256 = 8
3141:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
3142:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
3143:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
3144:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
3145:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
3146:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
3147:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
3148:/usr/avr/include/avr/power.h ****     , clock_div_1_rc = 15
3149:/usr/avr/include/avr/power.h **** #endif
3150:/usr/avr/include/avr/power.h **** } clock_div_t;
3151:/usr/avr/include/avr/power.h **** 
3152:/usr/avr/include/avr/power.h **** 
3153:/usr/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
3154:/usr/avr/include/avr/power.h **** 
3155:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3156:/usr/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
3157:/usr/avr/include/avr/power.h **** 
3158:/usr/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
3159:/usr/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
3160:/usr/avr/include/avr/power.h **** optimizations are disabled.
3161:/usr/avr/include/avr/power.h **** 
3162:/usr/avr/include/avr/power.h **** The type of x is clock_div_t.
3163:/usr/avr/include/avr/power.h **** */
3164:/usr/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
3165:/usr/avr/include/avr/power.h **** {
3166:/usr/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
3167:/usr/avr/include/avr/power.h ****     __asm__ __volatile__ (
 1836               		.loc 4 3167 0
 1837 0016 90E0      		ldi r25,0
 1838 0018 80E8      		ldi r24,lo8(-128)
 1839               	/* #APP */
 1840               	 ;  3167 "/usr/avr/include/avr/power.h" 1
 1841 001a 0FB6      		in __tmp_reg__,__SREG__
 1842 001c F894      		cli
 1843 001e 8093 6100 		sts 97, r24
 1844 0022 9093 6100 		sts 97, r25
 1845 0026 0FBE      		out __SREG__, __tmp_reg__
 1846               	 ;  0 "" 2
 1847               	/* #NOAPP */
 1848               	.LBE50:
 1849               	.LBE49:
 174:catboard.c    **** 	init();
 1850               		.loc 2 174 0
 1851 0028 0E94 0000 		call init
 1852               	.LVL139:
 1853               	.L279:
 176:catboard.c    **** 		poll();
 1854               		.loc 2 176 0 discriminator 1
 1855 002c 0E94 0000 		call poll
 1856               	.LVL140:
 1857 0030 00C0      		rjmp .L279
 1858               		.cfi_endproc
 1859               	.LFE9:
 1861               	.global	repeat_time
 1862               		.section .bss
 1865               	repeat_time:
 1866 0000 0000      		.zero	2
 1867               	.global	release_time
 1870               	release_time:
 1871 0002 0000      		.zero	2
 1872               	.global	press_time2
 1875               	press_time2:
 1876 0004 0000      		.zero	2
 1877               	.global	press_time
 1880               	press_time:
 1881 0006 0000      		.zero	2
 1882               	.global	last_key
 1883               		.data
 1886               	last_key:
 1887 0000 FF        		.byte	-1
 1888               	.global	led
 1891               	led:
 1892 0001 01        		.byte	1
 1893               	.global	locked
 1894               		.section .bss
 1897               	locked:
 1898 0008 00        		.zero	1
 1899               	.global	turbo_repeat
 1900               		.data
 1903               	turbo_repeat:
 1904 0002 01        		.byte	1
 1905               	.global	prev_layer
 1906               		.section .bss
 1909               	prev_layer:
 1910 0009 0000      		.zero	2
 1911               	.global	mod_keys
 1914               	mod_keys:
 1915 000b 00        		.zero	1
 1916               	.global	queue
 1917               		.data
 1920               	queue:
 1921 0003 FF        		.byte	-1
 1922 0004 FF        		.byte	-1
 1923 0005 FF        		.byte	-1
 1924 0006 FF        		.byte	-1
 1925 0007 FF        		.byte	-1
 1926 0008 FF        		.byte	-1
 1927 0009 FF        		.byte	-1
 1928               		.comm	pressed,60,1
 1929               	.global	layout
 1932               	layout:
 1933 000a 0000      		.word	layer2
 1934               	.global	caps_lock_led
 1935               		.section .bss
 1938               	caps_lock_led:
 1939 000c 00        		.zero	1
 1940               	.global	os_mode
 1941               		.data
 1944               	os_mode:
 1945 000c 01        		.byte	1
 1946               	.global	layer_fnlock
 1947               		.section	.rodata
 1950               	layer_fnlock:
 1951 0000 35        		.byte	53
 1952 0001 2B        		.byte	43
 1953 0002 69        		.byte	105
 1954 0003 7D        		.byte	125
 1955 0004 7B        		.byte	123
 1956 0005 1E        		.byte	30
 1957 0006 4B        		.byte	75
 1958 0007 4E        		.byte	78
 1959 0008 68        		.byte	104
 1960 0009 6D        		.byte	109
 1961 000a 1F        		.byte	31
 1962 000b 4A        		.byte	74
 1963 000c 50        		.byte	80
 1964 000d 6F        		.byte	111
 1965 000e 6F        		.byte	111
 1966 000f 20        		.byte	32
 1967 0010 52        		.byte	82
 1968 0011 51        		.byte	81
 1969 0012 6F        		.byte	111
 1970 0013 67        		.byte	103
 1971 0014 21        		.byte	33
 1972 0015 4D        		.byte	77
 1973 0016 4F        		.byte	79
 1974 0017 6F        		.byte	111
 1975 0018 65        		.byte	101
 1976 0019 22        		.byte	34
 1977 001a 35        		.byte	53
 1978 001b 28        		.byte	40
 1979 001c 6F        		.byte	111
 1980 001d 77        		.byte	119
 1981 001e 23        		.byte	35
 1982 001f 54        		.byte	84
 1983 0020 55        		.byte	85
 1984 0021 62        		.byte	98
 1985 0022 2C        		.byte	44
 1986 0023 24        		.byte	36
 1987 0024 5F        		.byte	95
 1988 0025 5C        		.byte	92
 1989 0026 59        		.byte	89
 1990 0027 7F        		.byte	127
 1991 0028 25        		.byte	37
 1992 0029 60        		.byte	96
 1993 002a 5D        		.byte	93
 1994 002b 5A        		.byte	90
 1995 002c 6B        		.byte	107
 1996 002d 26        		.byte	38
 1997 002e 61        		.byte	97
 1998 002f 5E        		.byte	94
 1999 0030 5B        		.byte	91
 2000 0031 00        		.byte	0
 2001 0032 27        		.byte	39
 2002 0033 56        		.byte	86
 2003 0034 57        		.byte	87
 2004 0035 63        		.byte	99
 2005 0036 6E        		.byte	110
 2006 0037 2D        		.byte	45
 2007 0038 29        		.byte	41
 2008 0039 28        		.byte	40
 2009 003a 53        		.byte	83
 2010 003b 2E        		.byte	46
 2011               	.global	layer_fn
 2014               	layer_fn:
 2015 003c 2F        		.byte	47
 2016 003d 34        		.byte	52
 2017 003e 69        		.byte	105
 2018 003f 7D        		.byte	125
 2019 0040 7B        		.byte	123
 2020 0041 23        		.byte	35
 2021 0042 13        		.byte	19
 2022 0043 33        		.byte	51
 2023 0044 11        		.byte	17
 2024 0045 6D        		.byte	109
 2025 0046 24        		.byte	36
 2026 0047 12        		.byte	18
 2027 0048 0F        		.byte	15
 2028 0049 10        		.byte	16
 2029 004a 00        		.byte	0
 2030 004b 25        		.byte	37
 2031 004c 0C        		.byte	12
 2032 004d 0E        		.byte	14
 2033 004e 36        		.byte	54
 2034 004f 67        		.byte	103
 2035 0050 26        		.byte	38
 2036 0051 18        		.byte	24
 2037 0052 0D        		.byte	13
 2038 0053 37        		.byte	55
 2039 0054 65        		.byte	101
 2040 0055 27        		.byte	39
 2041 0056 1C        		.byte	28
 2042 0057 0B        		.byte	11
 2043 0058 38        		.byte	56
 2044 0059 77        		.byte	119
 2045 005a 3F        		.byte	63
 2046 005b 29        		.byte	41
 2047 005c 28        		.byte	40
 2048 005d 00        		.byte	0
 2049 005e 7C        		.byte	124
 2050 005f 40        		.byte	64
 2051 0060 4A        		.byte	74
 2052 0061 50        		.byte	80
 2053 0062 2A        		.byte	42
 2054 0063 7F        		.byte	127
 2055 0064 41        		.byte	65
 2056 0065 52        		.byte	82
 2057 0066 51        		.byte	81
 2058 0067 4C        		.byte	76
 2059 0068 7E        		.byte	126
 2060 0069 42        		.byte	66
 2061 006a 4D        		.byte	77
 2062 006b 4F        		.byte	79
 2063 006c 49        		.byte	73
 2064 006d 00        		.byte	0
 2065 006e 43        		.byte	67
 2066 006f 4B        		.byte	75
 2067 0070 4E        		.byte	78
 2068 0071 00        		.byte	0
 2069 0072 7A        		.byte	122
 2070 0073 44        		.byte	68
 2071 0074 29        		.byte	41
 2072 0075 48        		.byte	72
 2073 0076 47        		.byte	71
 2074 0077 45        		.byte	69
 2075               	.global	layer1
 2078               	layer1:
 2079 0078 35        		.byte	53
 2080 0079 2B        		.byte	43
 2081 007a 69        		.byte	105
 2082 007b 7D        		.byte	125
 2083 007c 29        		.byte	41
 2084 007d 1E        		.byte	30
 2085 007e 14        		.byte	20
 2086 007f 04        		.byte	4
 2087 0080 68        		.byte	104
 2088 0081 6D        		.byte	109
 2089 0082 1F        		.byte	31
 2090 0083 1A        		.byte	26
 2091 0084 16        		.byte	22
 2092 0085 1B        		.byte	27
 2093 0086 1D        		.byte	29
 2094 0087 20        		.byte	32
 2095 0088 08        		.byte	8
 2096 0089 07        		.byte	7
 2097 008a 06        		.byte	6
 2098 008b 67        		.byte	103
 2099 008c 21        		.byte	33
 2100 008d 15        		.byte	21
 2101 008e 09        		.byte	9
 2102 008f 19        		.byte	25
 2103 0090 65        		.byte	101
 2104 0091 22        		.byte	34
 2105 0092 17        		.byte	23
 2106 0093 0A        		.byte	10
 2107 0094 05        		.byte	5
 2108 0095 77        		.byte	119
 2109 0096 23        		.byte	35
 2110 0097 1C        		.byte	28
 2111 0098 0B        		.byte	11
 2112 0099 11        		.byte	17
 2113 009a 2C        		.byte	44
 2114 009b 24        		.byte	36
 2115 009c 18        		.byte	24
 2116 009d 0D        		.byte	13
 2117 009e 10        		.byte	16
 2118 009f 7F        		.byte	127
 2119 00a0 25        		.byte	37
 2120 00a1 0C        		.byte	12
 2121 00a2 0E        		.byte	14
 2122 00a3 36        		.byte	54
 2123 00a4 6B        		.byte	107
 2124 00a5 26        		.byte	38
 2125 00a6 12        		.byte	18
 2126 00a7 0F        		.byte	15
 2127 00a8 37        		.byte	55
 2128 00a9 38        		.byte	56
 2129 00aa 27        		.byte	39
 2130 00ab 13        		.byte	19
 2131 00ac 33        		.byte	51
 2132 00ad 31        		.byte	49
 2133 00ae 6E        		.byte	110
 2134 00af 2D        		.byte	45
 2135 00b0 2F        		.byte	47
 2136 00b1 34        		.byte	52
 2137 00b2 30        		.byte	48
 2138 00b3 2E        		.byte	46
 2139               	.global	col_bit
 2142               	col_bit:
 2143 00b4 08        		.byte	8
 2144 00b5 01        		.byte	1
 2145 00b6 10        		.byte	16
 2146 00b7 01        		.byte	1
 2147 00b8 04        		.byte	4
 2148 00b9 20        		.byte	32
 2149 00ba 10        		.byte	16
 2150 00bb 10        		.byte	16
 2151 00bc 04        		.byte	4
 2152 00bd 20        		.byte	32
 2153 00be 80        		.byte	-128
 2154 00bf 80        		.byte	-128
 2155               	.global	col_pin
 2158               	col_pin:
 2159 00c0 2900      		.word	41
 2160 00c2 2900      		.word	41
 2161 00c4 2900      		.word	41
 2162 00c6 2300      		.word	35
 2163 00c8 2600      		.word	38
 2164 00ca 2900      		.word	41
 2165 00cc 2300      		.word	35
 2166 00ce 2600      		.word	38
 2167 00d0 2300      		.word	35
 2168 00d2 2300      		.word	35
 2169 00d4 2600      		.word	38
 2170 00d6 2300      		.word	35
 2171               	.global	row_bit
 2174               	row_bit:
 2175 00d8 20        		.byte	32
 2176 00d9 04        		.byte	4
 2177 00da 40        		.byte	64
 2178 00db 08        		.byte	8
 2179 00dc 02        		.byte	2
 2180               	.global	row_port
 2183               	row_port:
 2184 00dd 2800      		.word	40
 2185 00df 2B00      		.word	43
 2186 00e1 2500      		.word	37
 2187 00e3 2500      		.word	37
 2188 00e5 2500      		.word	37
 2189               	.global	layer2
 2192               	layer2:
 2193 00e7 35        		.byte	53
 2194 00e8 2B        		.byte	43
 2195 00e9 69        		.byte	105
 2196 00ea 7D        		.byte	125
 2197 00eb 29        		.byte	41
 2198 00ec 1E        		.byte	30
 2199 00ed 14        		.byte	20
 2200 00ee 04        		.byte	4
 2201 00ef 68        		.byte	104
 2202 00f0 6D        		.byte	109
 2203 00f1 1F        		.byte	31
 2204 00f2 1A        		.byte	26
 2205 00f3 16        		.byte	22
 2206 00f4 1B        		.byte	27
 2207 00f5 1D        		.byte	29
 2208 00f6 20        		.byte	32
 2209 00f7 08        		.byte	8
 2210 00f8 07        		.byte	7
 2211 00f9 06        		.byte	6
 2212 00fa 67        		.byte	103
 2213 00fb 21        		.byte	33
 2214 00fc 15        		.byte	21
 2215 00fd 09        		.byte	9
 2216 00fe 19        		.byte	25
 2217 00ff 65        		.byte	101
 2218 0100 22        		.byte	34
 2219 0101 17        		.byte	23
 2220 0102 0A        		.byte	10
 2221 0103 05        		.byte	5
 2222 0104 77        		.byte	119
 2223 0105 23        		.byte	35
 2224 0106 1C        		.byte	28
 2225 0107 0B        		.byte	11
 2226 0108 11        		.byte	17
 2227 0109 2C        		.byte	44
 2228 010a 24        		.byte	36
 2229 010b 18        		.byte	24
 2230 010c 0D        		.byte	13
 2231 010d 10        		.byte	16
 2232 010e 7F        		.byte	127
 2233 010f 25        		.byte	37
 2234 0110 0C        		.byte	12
 2235 0111 0E        		.byte	14
 2236 0112 36        		.byte	54
 2237 0113 6B        		.byte	107
 2238 0114 26        		.byte	38
 2239 0115 12        		.byte	18
 2240 0116 0F        		.byte	15
 2241 0117 37        		.byte	55
 2242 0118 38        		.byte	56
 2243 0119 27        		.byte	39
 2244 011a 13        		.byte	19
 2245 011b 33        		.byte	51
 2246 011c 31        		.byte	49
 2247 011d 6E        		.byte	110
 2248 011e 2D        		.byte	45
 2249 011f 2F        		.byte	47
 2250 0120 34        		.byte	52
 2251 0121 30        		.byte	48
 2252 0122 2E        		.byte	46
 2253               		.text
 2254               	.Letext0:
 2255               		.file 5 "/usr/avr/include/stdint.h"
 2256               		.file 6 "usb_keyboard.h"
 2257               		.file 7 "qwerty.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/ccYhwCqs.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYhwCqs.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYhwCqs.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYhwCqs.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYhwCqs.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYhwCqs.s:13     .text.init_ports:0000000000000000 init_ports
     /tmp/ccYhwCqs.s:41     .text.init:0000000000000000 init
     /tmp/ccYhwCqs.s:1891   .data:0000000000000001 led
                            *COM*:000000000000003c pressed
     /tmp/ccYhwCqs.s:1938   .bss:000000000000000c caps_lock_led
     /tmp/ccYhwCqs.s:115    .text.caps_lock_change_layer:0000000000000000 caps_lock_change_layer
     /tmp/ccYhwCqs.s:1932   .data:000000000000000a layout
     /tmp/ccYhwCqs.s:2078   .rodata:0000000000000078 layer1
     /tmp/ccYhwCqs.s:2014   .rodata:000000000000003c layer_fn
     /tmp/ccYhwCqs.s:1909   .bss:0000000000000009 prev_layer
     /tmp/ccYhwCqs.s:2192   .rodata:00000000000000e7 layer2
     /tmp/ccYhwCqs.s:201    .text.change_layout:0000000000000000 change_layout
     /tmp/ccYhwCqs.s:1944   .data:000000000000000c os_mode
     /tmp/ccYhwCqs.s:281    .text.get_code:0000000000000000 get_code
     /tmp/ccYhwCqs.s:354    .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/ccYhwCqs.s:1865   .bss:0000000000000000 repeat_time
     /tmp/ccYhwCqs.s:1870   .bss:0000000000000002 release_time
     /tmp/ccYhwCqs.s:1903   .data:0000000000000002 turbo_repeat
     /tmp/ccYhwCqs.s:1914   .bss:000000000000000b mod_keys
     /tmp/ccYhwCqs.s:1886   .data:0000000000000000 last_key
     /tmp/ccYhwCqs.s:1875   .bss:0000000000000004 press_time2
     /tmp/ccYhwCqs.s:1880   .bss:0000000000000006 press_time
     /tmp/ccYhwCqs.s:506    .text.send:0000000000000000 send
     /tmp/ccYhwCqs.s:1920   .data:0000000000000003 queue
     /tmp/ccYhwCqs.s:570    .text.key_press:0000000000000000 key_press
     /tmp/ccYhwCqs.s:1897   .bss:0000000000000008 locked
     /tmp/ccYhwCqs.s:1950   .rodata:0000000000000000 layer_fnlock
     /tmp/ccYhwCqs.s:1156   .text.key_release:0000000000000000 key_release
     /tmp/ccYhwCqs.s:1596   .text.poll:0000000000000000 poll
     /tmp/ccYhwCqs.s:2183   .rodata:00000000000000dd row_port
     /tmp/ccYhwCqs.s:2174   .rodata:00000000000000d8 row_bit
     /tmp/ccYhwCqs.s:2158   .rodata:00000000000000c0 col_pin
     /tmp/ccYhwCqs.s:2142   .rodata:00000000000000b4 col_bit
     /tmp/ccYhwCqs.s:1808   .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_leds
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
usb_keyboard_press
__do_copy_data
__do_clear_bss
